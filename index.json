[{"content":"","date":"2024 September 3","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2024 September 3","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024 September 3","externalUrl":null,"permalink":"/tags/teamspeak3/","section":"Tags","summary":"","title":"Teamspeak3","type":"tags"},{"content":" 前言 # 本文用于教电脑小白如何安装windows的teamspeak3，如果是想搭建自己的teamspeak服务器请跳转到如何搭建自己的ts3服务器\n由于是主要教小白，所以本文主要只说怎么做，大部分地方不会说为什么\n准备 # 一台能够正常连接网络的电脑 解压软件（Bandzip） teamspeak3的安装包（我网站的备份） teamspeak3的汉化文件（上一条中会同时下载） 开始之前 # 安装解压软件 # 你需要检查自己电脑有没有解压软件，例如Bandzip、WinRAR、7zip或者360解压。有的话直接跳过到下一条，如果没有或者不确定的话请转入准备这一项中第二小条“解压软件”下载“Badnzip”\n下载好后双击安装文件，如果弹出UAC提示请选择“是” 版本类型选择“评价版” 阅读协议，自动发送报告可选可不选，决定不了就不选，然后点击“同意并安装”按钮 等待进度条结束后点击关闭 接下来会弹出Bandzip的设置界面，直接点击左下角确定即可 弹出的Badnzip主界面直接右上角叉掉即可，桌面和底部任务栏生成的快捷方式可以删掉（桌面快捷方式拖动到“回收站”即可，底部任务栏的可以右键后点击“从任务栏取消固定”） 进行解压 # 双击下载的teamspeak3压缩包，名称为TeamSpeak3-Client-win64-3.6.2.zip 将左边的文件夹TeamSpeak3-Client-win64-3.6.2.zip拖动到桌面上的空白位置（如果你是用的其他解压软件可以找到“解压”按钮，然后解压位置选择桌面即可） 开始安装 # 双击进入刚刚解压的压缩包，可以看到有两个文件TeamSpeak3-Client-win64-\u0026lt;版本号\u0026gt;.exe和Chinese_Translation_zh-CN.ts3_translation，先双击TeamSpeak3-Client-win64-\u0026lt;版本号\u0026gt;.exe这个文件 如果弹出UAC提示请选择“是”，点击“Next”按钮 将协议拉到最下面，然后勾选“I accept the terms of the License Agreemrnt”，再点击“Next” 询问安装给谁可以自行选择，不知道就直接选择第一个“Install for anyone using this computer”，然后点击“Next” 安装路径默认是在C:\\盘，如果想更改到其他盘可以直接修改文字内容“C:\\Program Files”为自己想改到的盘。（例如我想改到E:\\盘，就将C:\\Program Files改为E:\\即可，文本框内文本就变为了E:\\TeamSpeak 3 Client。）然后点击“Next” 数据保存位置默认即可，直接点击“Next” 游戏内覆盖可选，如果你想在游戏内看到是谁在讲话就勾选“Install the offcial TeamSpeak overlay, by Overwolf”，效果同示例图一样。不需要的话直接点击“Install”即可（如果此时出现运行库安装窗口不用慌，这是在安装运行Teamspeak3所必须的运行库） 安装结束，直接点击“Finish”按钮 叉掉teamspeak3，接下来进行汉化 安装汉化 # 刚开始解压出来的文件夹中的另一个文件Chinese_Translation_zh-CN.ts3_translation就是汉化文件，直接双击，会弹出插件介绍\n直接点击“Install”，提示是否启用直接选择“Yes”\n至此安装完毕，可以直接删掉下载的压缩包TeamSpeak3-Client-win64-3.6.2.zip和解压出来文件夹TeamSpeak3-Client-win64-3.6.2\n进入ts3并添加标签 # 此时重启Teamspeak3，会发现界面变为了中文\n如果弹出了使用协议先将右边滑条拖动到最底部，然后勾选同意即可 安装时勾选安装了游戏内覆盖会弹出Overwolf介绍，直接叉掉或者点击“Continue”按钮即可 初次使用会弹出myTeamSpeak账号登录界面，直接点击左下角“跳过登录”即可 弹出选择昵称请输入自己的昵称再点击“OK”就行 点击顶部“书签”菜单栏，选择“书签管理器”\n点击左下角“新增书签”按钮\n点击下面的“进阶选项”，依次修改书签属性\n书签名：HeTong的ts3服务器 昵称：填入自己昵称即可（如果刚刚弹出的昵称输入框填了会直接显示刚刚填的昵称） 服务器别名或地址：ts3.hetong-re4per.com 勾选“启动时连接此服务器” 其他几项都为空或默认即可 点击“OK”按钮 此时可以选择点击顶部“书签”菜单栏，选择“HeTong的ts3服务器”来进入我的服务器；或者直接叉掉“Teamspeak3”，然后再启动以进入我的服务器 优化语音 # ts3提供了降噪和回声消除等功能，接下来教学如何开启\n在顶部“工具”菜单栏中选择“设置” 在左边选择“音频输入” 配置文件选择Default（否则不要问为何不生效）在“激活”这一栏中“语音检测”一项找到“模式”，选择“Volume Gate”，下面的滑条就激活了，拖动到合适的位置（你可以点击下面的“开始测试”按钮，边说话边测试，直到背景噪音不影响自己说话为止。“-20”时可能效果比较好，但实际请自己测试，不同耳机性能不同）（当然你也可以选择使用按键激活，需要选择“按键说话”，然后点击“未分配快捷键”来分配按键说话的快捷键） 数字信号处理这一栏除了“回声抑制[闪避]”不选其他全部勾选即可，“消除背景噪音”直接拉满，然后点击右下角“OK”按钮即可 最后 # 以上就是ts3的安装以及配置方法了，还有疑问的话欢迎评论区或者邮箱提问\n","date":"2024 September 3","externalUrl":null,"permalink":"/posts/how-to-install-teamspeak3/","section":"Posts","summary":"","title":"如何安装Teamspeak3","type":"posts"},{"content":"","date":"2024 September 3","externalUrl":null,"permalink":"/tags/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/","section":"Tags","summary":"","title":"实用教程","type":"tags"},{"content":"","date":"2024 September 3","externalUrl":null,"permalink":"/","section":"瞳のBlog","summary":"","title":"瞳のBlog","type":"page"},{"content":"","date":"2024 September 2","externalUrl":null,"permalink":"/tags/cloudflare/","section":"Tags","summary":"","title":"Cloudflare","type":"tags"},{"content":"","date":"2024 September 2","externalUrl":null,"permalink":"/tags/cloudreve/","section":"Tags","summary":"","title":"Cloudreve","type":"tags"},{"content":"","date":"2024 September 2","externalUrl":null,"permalink":"/tags/%E4%B8%AA%E4%BA%BA%E4%BA%91%E7%9B%98/","section":"Tags","summary":"","title":"个人云盘","type":"tags"},{"content":"","date":"2024 September 2","externalUrl":null,"permalink":"/tags/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/","section":"Tags","summary":"","title":"技术教程","type":"tags"},{"content":"","date":"2024 September 2","externalUrl":null,"permalink":"/tags/%E5%BB%BA%E7%AB%99/","section":"Tags","summary":"","title":"建站","type":"tags"},{"content":" 前言 # 请合理使用这些免费资源，不要滥用，大家都不想失去这些免费工具和资源。 由于我有一些分享文件的需求，而市面上的大部分云盘都不符合我的预期。在使用CND过程中了解“赛博活佛”Cloudflare后知道了他们提供的免费的对象储存R2，发现这个十分符合我的需求。它有10G/mon的免费存储额度，并且我分享的范围很小，所以对我来说是一个免费的存储对象。\n开始之前 # R2介绍 # Cloudflare R2 Storage allows developers to store large amounts of unstructured data without the costly egress bandwidth fees associated with typical cloud storage services.\nCloudflare R2 Storage 允许开发人员存储大量非结构化数据，而无需支付与典型云存储服务相关的昂贵的出口带宽费用。\n选择它主要是因为它对于我来说是免费的，很适合我们这些个人开发者和小型企业。不像国内的一些OSS方案提供商，看着每个月使用OSS费用很便宜，但是使用后才发现出站的流量和存储空间是独立与使用费的。每个月只要存的有东西就需要支付一定存储数据或者有外网访问就需要额外支付。而Cloudflare R2储存数据量小于10G/mon，每个月数据修改量小的话就是免费的，向外网传送数据也是免费的。官方有一个价格计算器，用来比较R2和亚马逊S3对象存储价格。以下是Cloudflare R2的免费套餐定价规则：\n项目 价格 存储 10 GB / 月 A 类操作 100 万个请求 / 月 B 类操作 1000 万个请求 / 月 出口（数据传输到 Internet） 免费 Cloudreve介绍 # Cloudreve 是一个可以自定义存储策略、虚拟文件系统、离线下载、分享等功能的网盘系统。您可以通过多种设备和应用访问您的文件，也可以创建分享链接来控制文件的访问权限。\n选择Cloudreve的主要原因是它支持S3协议，并且支持几乎完整地Cloudflare R2 API，并且有丰富的插件，可以满足大部分需求。\n准备工作 # 一个可以正常访问Cloudflare dash的网络环境 一个域名，并且需要将域名托管到Cloudflare上 一张外币卡（支持visa, 万事达, 和运通） 一个用来搭建Cloudreve的VPS（我是用的是白嫖的一年Amazon AWS） 搭建Clourflare R2 # 准备Cloudflare账号 # 首先你需要一个Cloudflare账号，并且需要有一个域名，并且需要将域名托管到Cloudflare上。如果没有域名的话在后面的R2部分公网访问资源就只能使用CF提供的子域名，但是会有一定限制，所以不建议使用。\n启用 r2.dev 访问时，Internet 上的任何人都可以使用公共 r2.dev URL 查看此存储桶中的对象。但在使用时有速率限制，因此，不建议用于生产。此外，访问和缓存等 Cloudflare 功能无法再使用。\n你可以直接点击下面按钮前往R2创建界面，如果没有Cloudflare账号请先注册并登录，拥有Cloudflare账号的话可以直接登录。\n开始使用Cloudflare R2 创建订阅 # 登录Cloudflare账号后就会直接进入R2订阅界面，点击“进入付款详细信息” 添加自己的支付方式，然后点击“保存付款信息” 接下来会进行卡的验证，请确认自己卡中至少有$1，点击“继续转到仪表板”进入下一步 创建R2储存桶 # 在左侧菜单栏找到“R2 -\u0026gt; 概述” 在右边面板点击“创建储存桶”按钮 输入储存桶名称，其他选项默认，然后点击“继续创建储存桶” 这个时候你就已经成功创建储存桶了，接下来转入下一步设置API tokrn\n获取R2储存桶的API密钥 # 回到R2主界面，在右侧找到“管理 R2 API 令牌” 点击“创建 API 令牌”按钮 输入API密钥名称，默认也行，权限请务必选择选择“管理员读和写”，TTL选择“永久” 点击右下角“创建 API 令牌” 此时会弹出你的token等，此页面内容不会再次显示，请务必复制下来保存好 搭建Cloudreve # 本部分主要按照Cloudreve 官方搭建教程进行进行搭建 获取 Cloudreve # 你可以在 GitHub Release 页面获取已经构建打包完成的主程序。其中每个版本都提供了常见系统架构下可用的主程序，命名规则为cloudreve_版本号_操作系统_CPU架构.tar.gz。比如，普通 64 位 Linux 系统上部署 3.0.0 版本，则应该下载cloudreve_3.0.0_linux_amd64.tar.gz。\n启动 Cloudreve # Linux 下，直接解压并执行主程序即可：\n#解压获取到的主程序 tar -zxvf cloudreve_VERSION_OS_ARCH.tar.gz # 赋予执行权限 chmod +x ./cloudreve # 启动 Cloudreve ./cloudreve Cloudreve 在首次启动时，会创建初始管理员账号，请注意保管管理员密码，此密码只会在首次启动时出现。如果您忘记初始管理员密码，需要删除同级目录下的cloudreve.db，重新启动主程序以初始化新的管理员账户。\nCloudreve 默认会监听5212端口。你可以在浏览器中访问http://\u0026lt;服务器IP\u0026gt;:5212进入 Cloudreve。\n以上步骤操作完后，最简单的部署就完成了。你可能需要一些更为具体的配置，才能让 Cloudreve 更好的工作，具体流程请参考下面的配置流程。\nnginx配置反向代理 # 先前往Cloudflare的DNS解析记录添加服务器A记录。 由于我使用的Cloudflare的SSL/TLS完全（严格）加密模式，所以这里我只添加一个443端口的反向代理即可。没有的话请前往Cloudflare的“SSL/TLS -\u0026gt; 源服务器”中进行创建和下载。\n配置文件中的ssl_certificate和ssl_certificate_key需要\nserver { listen 443 ssl http2; server_name yourdomain.com; # 将 yourdomain.com 替换为你的实际域名 ssl_certificate /etc/nginx/ssl/yourdomain.com.cer; # 请替换为你的证书路径 ssl_certificate_key /etc/nginx/ssl/yourdomain.com.key; # 请替换为你的私钥路径 location / { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Range $http_range; proxy_set_header If-Range $http_if_range; proxy_redirect off; proxy_pass http://127.0.0.1:5212; } } 配置进程守护 # Systemd：\n# 编辑配置文件 vim /usr/lib/systemd/system/cloudreve.service 将下文 PATH_TO_CLOUDREVE 更换为程序所在目录：\n[Unit] Description=Cloudreve Documentation=https://docs.cloudreve.org After=network.target After=mysqld.service Wants=network.target [Service] WorkingDirectory=/PATH_TO_CLOUDREVE ExecStart=/PATH_TO_CLOUDREVE/cloudreve Restart=on-abnormal RestartSec=5s KillMode=mixed StandardOutput=null StandardError=syslog [Install] WantedBy=multi-user.target # 更新配置 systemctl daemon-reload # 启动服务 systemctl start cloudreve # 设置开机启动 systemctl enable cloudreve 管理命令：\n# 启动服务 systemctl start cloudreve # 停止服务 systemctl stop cloudreve # 重启服务 systemctl restart cloudreve # 查看状态 systemctl status cloudreve 配置Cloudreve使用R2 # 使用nginx配置反向代理这一步配置的地址（https://yourdomain.com），进入Cloudreve主页\n登录后点击右上角头像，点击“管理面板”\n从左侧菜单栏选择“存储策略”，点击“添加存储策略”按钮，选择“AWS S3”\n对照图片填入配置:\nBucket: 储存桶的名称 空间类型: 阻止全部公共访问权限 Endpoint: R2的域名，格式：\u0026lt;Cloudflare R2账户ID\u0026gt;.com.r2.cloudflarestorage.com S3 Endpoint 地址格式: 强制路径格式 储桶所在的区域: auto 是否要对下载/直链使用 CDN: 否 访问密钥： AccessKey: 访问密钥ID SecretKey: 机密访问密钥 存储策略名: 填写自己喜欢的存储策略名称 接下来一直点击“下一步”即可，如果有想要修改的请自行修改\n到“跨域策略可选”这一步点击“让 Cloudreve 帮我设置”，如果右上角弹出弹出“跨域策略已添加”即为成功\n最后点击“完成”即可，然后去用户组修改你想要使用R2的用户组的存储策略 ","date":"2024 September 2","externalUrl":null,"permalink":"/posts/bulid-own-cloud-drive-on-cloudflare-r2/","section":"Posts","summary":"","title":"使用Clooudflare R2+Cloudreve构建属于自己的云盘","type":"posts"},{"content":"","date":"2024 August 17","externalUrl":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog","type":"tags"},{"content":"","date":"2024 August 17","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"2024 August 17","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2024 August 17","externalUrl":null,"permalink":"/tags/waline/","section":"Tags","summary":"","title":"Waline","type":"tags"},{"content":"上一篇文章教学了如何使用google的firebase作为后端数据库来启用主题Blowfish原生的阅读量和点赞量，这一期教程应该是其他部分主题也能用到的，使用waline前端评论框架和verecel后端服务器来搭建一个自己的评论系统。\nWaline 是一个轻量级的评论系统，可以在你的网站中提供评论与浏览量服务。支持markdown语法评论，评论审查，表情系统，阅读量统计，自定义样式等。\nLeanCloud 设置 (数据库) # 进入LeanCloud 国际版，进行 注册 （推荐国际版是因为国内版的需要域名备案，详情可以去官方文档查看） 进入控制台，点击左上角“创建应用”并起一个你喜欢的名字 (请选择免费的开发版) 直接进入左下角“设置”-\u0026gt;“应用凭证”，将 AppID、AppKey和 MasterKey复制保存下来 Vercel 部署 (服务端) # 进入 Vercel 使用Github登录后进行部署 Git Scope选择自己的Github账号；Repository Name填自己喜欢的名字；Create private Git Repository是选择是否设置为个人仓库，建议选择默认 等待Vercel自动创建和初始化Waline仓库，初始化完毕后点击 Go to Dashboard 跳转到应用控制台。 进入项目的”Settings“-\u0026gt;”Environment Variables“，创建三个值 LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY，分别在对应的 Value填上在LeanCloud获得的 AppID、AppKey和 MasterKey。 点击顶部”Deployments“选项卡，再点击最新一次的部署右边的”···“，选择”Redeploy“。 此时会跳转到”Overview“界面开始部署，等待片刻后STATUS会变成Ready。 再点击”Visit“，即可跳转到部署好的网站地址，此地址即为你的服务端地址。 自定义域名（可选） # 点击顶部的”Settings“-\u0026gt;”Domains“进入域名配置页\n在输入框输入需要绑定的域名然后点击”Add“（假设我添加了一个域名为example.mydomain.com）\n在你所托管的域名服务器商处添加新的 CNAME解析记录，那么我的就是\n类型 记录 值 CNAME example cname.vercel-dns.com 等待DNS生效后就可以通过自定义域名进行访问了\n评论系统：example.mydomain.com 评论管理：example.mydomain.com/ui Html引入 # 现在所有的服务端都搭好了，开始进行前端修改，我这里以我使用的Blowfish为例，对应的主题请寻找对应的添加方式\n在站点根目录下的layouts/partials文件夹下创建一个comment.html文件，并添加以下代码，serverURL记得改为自己的 \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/@waline/client@v2/dist/waline.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import { init } from \u0026#39;https://unpkg.com/@waline/client@v2/dist/waline.mjs\u0026#39;; init({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;https://example.mydomain.com/\u0026#39;, lang: \u0026#39;zh-CN\u0026#39;, locale: { placeholder: \u0026#39;\u0026lt;评论提示语不需要的话直接注释掉本行\u0026gt;\u0026#39; }, wordLimit: 500, search: false, pageview: true, emoji: [ // 表情包，不需要的直接注释或者删除 \u0026#39;//unpkg.com/@waline/emojis@1.2.0/bmoji\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.2.0/tieba\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.2.0/qq\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.2.0/alus\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.1.0/bilibili\u0026#39;, \u0026#39;https://cdn.jsdelivr.net/gh/norevi/waline-blobcatemojis@1.0/blobs\u0026#39;, ], dark: \u0026#39;html[class=\u0026#34;scroll-smooth dark\u0026#34;]\u0026#39;, }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /*日间模式*/ :root { /* 字体大小 */ --waline-font-size: 16px; /* 白色 */ --waline-white: #ffff; /* 浅灰色 */ --waline-light-grey: #999; /* 深灰色 */ --waline-dark-grey: #666; /* 主题色 */ --waline-theme-color: #3b82f6; /* 活动状态的颜色 */ --waline-active-color: #2ecc71; /* 一般文本颜色 */ --waline-color: #222; /* 背景颜色 */ --waline-bgcolor: #fff; /* 较浅的背景颜色 */ --waline-bgcolor-light: #f8f8f8; /* 鼠标悬停时的背景颜色 */ --waline-bgcolor-hover: #2ecc71; /* 边框颜色 */ --waline-border-color: #ddd; /* 禁用状态的背景颜色 */ --waline-disable-bgcolor: rgba(248, 248, 248, 0.4); /* 禁用状态的文本颜色 */ --waline-disable-color:#bbb; /* 代码块的背景颜色 */ --waline-code-bgcolor: #282c34; /* 引用块的颜色 */ --waline-bq-color: #f0f0f0; /* 头像 */ --waline-avatar-size: 3.25rem; /* 移动设备上的头像大小 */ --waline-m-avatar-size: calc(var(--waline-avatar-size) * 9 / 13); /* 徽章颜色 */ --waline-badge-color: #3b82f6; /* ：徽章字体大小 */ --waline-badge-font-size: 12px; /* 信息块的边框 */ --waline-info-border: 1px solid #999; /* 信息块的文本颜色 */ --waline-info-color: #999; /* 信息块的字体大小 */ --waline-info-font-size: 16px; /* 信息块背景颜色 */ --waline-info-bgcolor: rgba(235, 235, 235, 0.4); /* 渲染选择，一般边框样式 */ --waline-border: 1px solid var(--waline-border-color); /* 头像的圆角半径 */ --waline-avatar-radius: 50%; /* 阴影效果 */ --waline-box-shadow: none; } /* 暗黑模式，根据用户设置 ↓ */ html[class=\u0026#34;scroll-smooth dark\u0026#34;]{ /* 这是用于表示白色的CSS变量, 在暗模式下，白色将变为黑色*/ --waline-white: #000; /* 浅灰色的CSS变量, 在暗模式下，变为深灰色 */ --waline-light-grey: #999; /* --waline-light-grey: #666;*/ /* 示深灰色, 在暗模式下，变为浅灰色 */ --waline-dark-grey: #999; /* 一般文本颜色 */ --waline-color: #c2c2c2; /* 背景颜色 */ --waline-bgcolor: #1E293B; /* 较浅的背景颜色 */ --waline-bgcolor-light: #2A354F; /* 边框颜色 */ --waline-border-color: #666; /* 禁用状态的背景颜色 */ --waline-disable-bgcolor: rgba(68, 68, 68, 0.8); /* 禁用状态的文本颜色 */ --waline-disable-color: #888; /* 引用块颜色 */ --waline-bq-color: #1F2D4B; /* 信息块背景颜色 */ --waline-info-bgcolor: rgba(31, 45, 75, 0.8); /* 信息块字体 */ --waline-info-color: #888; /* 信息块的边框 */ --waline-info-border: 1px solid #d3d3d3; } \u0026lt;/style\u0026gt; \u0026lt;/body\u0026gt; 进入站点根目录下的config/_default文件夹，修改params.toml，将需要添加评论的地方的showComments修改为true\n重新部署你的网站，就可以看到评论系统已经成功添加了\n评论管理 (管理端) # 部署完成后，请访问 /ui/register 进行注册。首个注册的人会被设定成管理员。 管理员登陆后，即可看到评论管理界面。在这里可以修改、标记或删除评论。 用户也可通过评论框注册账号，登陆后会跳转到自己的档案页。 总结 # 总体来说其实waline的部署是非常简单的，并且本文只讲了怎样部署。其实waline支持的功能很多，十分推荐进入waline官网查看，做出一个适合自己的评论系统\n","date":"2024 August 17","externalUrl":null,"permalink":"/posts/use-waline-comment-on-hugo/","section":"Posts","summary":"","title":"在博客中使用waline评论","type":"posts"},{"content":"","date":"2024 August 17","externalUrl":null,"permalink":"/series/%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/","section":"Series","summary":"","title":"自建博客","type":"series"},{"content":"","date":"2024 August 10","externalUrl":null,"permalink":"/tags/firebase/","section":"Tags","summary":"","title":"Firebase","type":"tags"},{"content":" 注意 本教程是基于上一篇文章的教程，如果没有看过上一篇文章，建议先进入目录依次阅读文章。 前言 # 我们现在使用了Blowfish和hugo作为自己的博客，Blowfish是原生支持阅读量和点赞的，默认不开启，本篇文章将会指导你如何开启Blowfish的阅读量和点赞功能。\n开启阅读量和点赞量 # 进入站点根目录下的config/_default目录，找到配置文件params.toml，其中有article、list、taxonomy和term拥有showViews和showLikes这两个值\n其中article是文章页面的配置，list是列表页面的配置，taxonomy是分类页面的配置，term是标签页面的配置，请对应选择打开\n使用firebase作为后端数据库 # 按照上述方法打开阅读量和点赞量的配置后你会发现在文章头确实会显示点赞和阅读的图标，但是数值却一直是加载状态，因为我们需要配置firebase作为后端数据库，将数据存储到firebase中，才可以实时获取到点赞和阅读的数值。\n注册并创建firebase项目 # 进入firebase官网 前往firebase官网 登录或者注册后登录Google账号\n点击“开始使用Firebase项目”\n输入项目名字，我这边使用blog-blowfish\n协议全部勾上，选择分析位置的时候按需选择，我这里选择“中国”\n最后点击继续，此时不要关闭浏览器和切换网络环境等，等待1min左右分配资源即可\n获取firebase API等 # 点击“继续”就会直接进入项目配置页面，在“将 Firebase 添加至您的应用即可开始使用”下面选择“网页应用”图标是“ ”\n自己填上想要的应用名字，我这里就直接使用“blog”作为应用名了。“还为此应用设置 Firebase Hosting。”选择开启，因为我们已经使用了Github Pages，所以我不勾选，如果有把网站迁移过来的想法可以勾选。\n此时就会生成一段npm初始化firebase的代码，复制下来，存放到安全的位置，后面会用到\n// Import the functions you need from the SDKs you need import { initializeApp } from \u0026#34;firebase/app\u0026#34;; import { getAnalytics } from \u0026#34;firebase/analytics\u0026#34;; // TODO: Add SDKs for Firebase products that you want to use // https://firebase.google.com/docs/web/setup#available-libraries // Your web app\u0026#39;s Firebase configuration // For Firebase JS SDK v7.20.0 and later, measurementId is optional const firebaseConfig = { apiKey: \u0026#34;AIzaSyCqeh1gtG-KHEbcU4N053JBZ6eM8qaF4rQ\u0026#34;, authDomain: \u0026#34;blog-blowfish-68e82.firebaseapp.com\u0026#34;, projectId: \u0026#34;blog-blowfish-68e82\u0026#34;, storageBucket: \u0026#34;blog-blowfish-68e82.appspot.com\u0026#34;, messagingSenderId: \u0026#34;272654749490\u0026#34;, appId: \u0026#34;1:272654749490:web:15aedf00da71774b7c512b\u0026#34;, measurementId: \u0026#34;G-KFZZ7CMD6V\u0026#34; }; // Initialize Firebase const app = initializeApp(firebaseConfig); const analytics = getAnalytics(app); 配置Cloud Firestore和Authentication # 在项目主页应该就可以看见“Cloud Firestore”选项，没有的话在左边菜单栏的“构建”中\n点击“创建数据库”按钮，然后“下一步”，“创建”\n创建好后从左边菜单栏“构建”一栏中选择“Authentication”，点击“开始”\n顶部选择“登录方法”，选择“匿名”，点击启用即可\n配置Blowfish # 现在firebase已经配置完毕了，回到我们的博客根目录，进入config/_default，找到配置文件params.toml，修改里面的firebase部分\n[firebase] # apiKey = \u0026#34;XXXXXX\u0026#34; # authDomain = \u0026#34;XXXXXX\u0026#34; # projectId = \u0026#34;XXXXXX\u0026#34; # storageBucket = \u0026#34;XXXXXX\u0026#34; # messagingSenderId = \u0026#34;XXXXXX\u0026#34; # appId = \u0026#34;XXXXXX\u0026#34; # measurementId = \u0026#34;XXXXXX\u0026#34; 刚刚配置firebase时那一段代码，依次按照取消注释和修改这一部分的值，修改完成后保存即可\n测试 # 现在重新部署你的博客，进入文章页面，你应该就可以看到点赞和阅读的数值了\n参考 # 官方文档：Firebase: 阅读量 \u0026amp; 点赞量 ","date":"2024 August 10","externalUrl":null,"permalink":"/posts/show-like-and-view-on-blog/","section":"Posts","summary":"","title":"如何为自己的博客开启阅读量和点赞量显示","type":"posts"},{"content":"","date":"2024 August 9","externalUrl":null,"permalink":"/tags/github-page/","section":"Tags","summary":"","title":"Github Page","type":"tags"},{"content":" 前言 # 由于自己买的服务器快过期了，上面搭了很多服务，包括自己的博客，虽然文章不多，但是不想以后再写一遍。想到了 Github Page ，由于踩坑过多，于是想记录一下，说不定能帮上别人呢。\nGitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。\n准备工作 # 一个 Github 账号，这个就不用我多说了吧 一个域名（可选），如果你有自己的域名，搭建好后可以将其指向 Github Page 的地址 一个文本编辑器（如 VSCode） 步骤 # 注意 本教程主要写给有一定计算机基础的人，如果你是小白，建议先去学一下基本的计算机知识，例如如何使用命令行、如何添加环境变量以及 Github 和 Git 的使用等。 创建 Github 仓库 # 登录 Github，点击右上角的 “ + ” 按钮，选择 \u0026ldquo;New repository\u0026rdquo;。 在 \u0026ldquo;Repository name\u0026rdquo; 输入框中输入你的仓库名称，格式为 \u0026lt;username\u0026gt;.github.io，其中 \u0026lt;username\u0026gt; 是你的 Github 用户名。 在 \u0026ldquo;Description\u0026rdquo; 输入框中输入你的仓库描述（可选）。 选择Public 勾选 \u0026ldquo;Initialize this repository with a README\u0026rdquo; 选项，创建一个 README 文件。 点击 \u0026ldquo;Create repository\u0026rdquo; 按钮，创建你的 Github 仓库。 本地安装 Hugo # 前往Hugo的官方Github仓库release，选择对应的版本进行下载，这里我用 Windows 举例，选择hugo_0.131.0_windows-amd64.zip下载。 gohugoio/hugo The world’s fastest framework for building websites. Go 74226 7418 解压hugo_0.131.0_windows-amd64.zip，放在你自己觉得合适的位置，比如D:\\hugo\n然后将hugo.exe所在的路径添加到系统的环境变量中。注意，是存放hugo.exe文件夹路径而不是hugo.exe的路径哦\n安装完成后，输入以下命令验证安装是否成功： hugo version 如果成功安装，会显示 Hugo 的版本信息。\n创建 Hugo 站点 # 在终端或命令提示符中，输入以下命令创建一个新的 Hugo 站点。其中，\u0026lt;site-name\u0026gt; 是你的站点名称，可以根据自己的喜好进行命名。例如我的站点名称为blog，则命令为： hugo new site \u0026lt;site-name\u0026gt; # 示例 hugo new site blog 进入站点目录： cd \u0026lt;site-name\u0026gt; # 示例 cd blog 介绍一下hugo的目录结构，以下就是站点根目录\n. ├─ archetypes # 存放文章的模板文件 ├─ assets # 存放静态资源文件 ├─ content # 存放文章的目录 ├─ i18n # 存放国际化文件的目录 ├─ data # 存放数据文件的目录 ├─ layouts # 存放布局文件的目录 ├─ static # 存放静态文件的目录 ├─ themes # 存放主题的目录 └─ hugo.toml # 站点配置文件 新建一篇文章 hugo new posts/my-first-post.md 此时会在站点目录下的content文件夹中生成posts文件夹，同时在其中生成文件my-first-post.md。使用文件管理器然后用你喜欢的文本编辑器打开这个.md文件\n打开后可以看到已经预生成了一些内容。例如title是标题，date是日期，draft是草稿状态（草稿状态如果设置为true的话后面进行渲染后是看不见的，需要设定参数-D，像这样hugo server -D）。\n+++ title = \u0026#39;My First Post\u0026#39; date = 2024-08-09T20:03:34+08:00 draft = true +++ 启动hugo预览： hugo server 在浏览器中访问 http://localhost:1313，即可看到你的站点。但此时你会发现是Page Not Found。不用急，因为我们还没有装主题。先CTRL+C停止服务器 安装主题 # 这里我就使用我现在正在使用的主题blowfish做演示，其他主题建议去寻找对应的官方文档进行配置\n前往Blowfish官网 进入站点目录，依次使用以下指令： git init -b main git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 进入themes/blowfish目录，找到archetypes和config目录，复制到站点根目录的archetypes和config，提示要替换文件选择”是“ . ├─ archetypes # 复制到这儿 ├─ assets ├─ config # 和这儿 ├─ content ├─ data ├─ i18n ├─ layouts ├─ public ├─ static └─ themes └─ blowfish ├─ .github ... ├─ archetypes # 将这个文件夹 ... ├─ config # 和这个文件夹 ... 进入你刚刚复制的config/_default文件夹中，将languages.en.toml、menus.en.toml两个文件中间的en改为你的默认语言，例如languages.zh-cn.toml、menus.zh-cn.toml\n现在回到你的站点根目录，进入刚刚复制过来的config/_default文件夹中，找到hugo.toml文件，可以在开头看到下面这一段，先添加一句在下面hasCJKLanguage = true，用来后面开启正确的汉字计数。\n取消第五、六行的注释 将your_domain.com替换为你的域名，如果没有域名，可以将其替换为你刚刚创建的git仓库的名字：https://\u0026lt;username\u0026gt;.github.io，其中\u0026lt;username\u0026gt;是你的 Github 用户名 将en替换为你的默认语言，例如zh-cn表示中文简体 1 2 3 4 5 6 7 8 9 10 11 # -- Site Configuration -- # Refer to the theme docs for more details about each of these parameters. # https://blowfish.page/docs/getting-started/ theme = \u0026#34;blowfish\u0026#34; # UNCOMMENT THIS LINE baseURL = \u0026#34;https://your_domain.com/\u0026#34; defaultContentLanguage = \u0026#34;zh-cn\u0026#34; hasCJKLanguage = true # Other configuration options... 现在回到站点根目录，使用以下命令启动 Hugo 服务器： hugo server 在浏览器中访问 http://localhost:1313，可以看到你的站点已经成功运行了。🎉Congratulations! 现在你已经完成了一半了，接下来就是配置你的站点了。 配置站点 # 本节所有配置都是在config/_default文件夹下进行，可以边运行着hugo server边观察修改情况。 本小节建议参照官方文档 在站点根目录下，找到config/_default文件夹，打开languages.zh-cn.toml文件，以下是我自己的文件，请自行修改： languageCode = \u0026#34;zh-cn\u0026#34; languageName = \u0026#34;Simplified Chinese (China)\u0026#34; weight = 1 title = \u0026#34;瞳のBlog\u0026#34; [params] displayName = \u0026#34;简体中文\u0026#34; isoCode = \u0026#34;cn\u0026#34; dateFormat = \u0026#34;2006 January 2\u0026#34; logo = \u0026#34;img/site_logo.png\u0026#34; description = \u0026#34;HeTongRe4per\u0026#39;s website\u0026#34; [author] name = \u0026#34;褐瞳さん\u0026#34; image = \u0026#34;img/avatar.png\u0026#34; headline = \u0026#34;驕る鳥は墜ち 頭垂れて乞い\u0026#34; bio = \u0026#34;Everyone is mania in general\u0026#34; links = [ { bilibili = \u0026#34;https://space.bilibili.com/199364052\u0026#34; }, { 163music = \u0026#34;https://music.163.com/#/user/home?id=541376277\u0026#34; }, { linkedin = \u0026#34;https://www.linkedin.com/in/hetong-re4per/\u0026#34; }, { email = \u0026#34;mailto:zhang_zlf@outlook.com\u0026#34; }, { steam = \u0026#34;https://steamcommunity.com/id/he_tong/\u0026#34; }, ] languageCode：语言代码\nlanguageName：语言名称\nweight：权重，用于排序，数值越小越靠前\ntitle：站点标题，会显示在浏览器标签页上\nparams： 站点参数\ndisplayName：语言显示名称 isoCode：语言ISO代码 dateFormat：日期格式 logo：logo位置，应当存放在themes/blowfish/assets/img下 description：网站描述 author：作者信息，都会显示在文章页和主页\nname：作者名称 image：作者头像位置，应当存放在themes/blowfish/assets/img下 headline：作者标语 bio：作者简介 links：作者链接，可以添加多个 打开menus.zh-cn.toml文件进行修改，此部分请参考官方文档 [[main]] name = \u0026#34;Home\u0026#34; pageRef = \u0026#34;/\u0026#34; weight = 10 [[main]] name = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;/posts\u0026#34; weight = 20 [[main]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;/tags\u0026#34; weight = 30 打开params.toml文件进行修改，请参照官方文档 创建文章 # 注意 如果文章没有实时渲染请先确认文章是否是草稿状态，如果想渲染草稿请使用hugo server -D Blowfish官方简码使用方式：简码 markdown和hugo的格式文档：格式文档 文章缩略图：缩略图 Blowfish官方内容示例：内容示例 还记得我们创建的第一个文章吗posts/my-first-post.md，它的头部和我们以后写的文章可能不太一样，所以推荐删除后创建新的文章，使用以下命令创建新的文章。当然你没有强迫症可以直接在my-first-post.md上修改就行：\nhugo new posts/my-second-post.md 打开新创建的文章，可以看到以下内容： --- title: \u0026#34;My Second Post\u0026#34; date: 2024-08-09T23:24:22+08:00 draft: true description: \u0026#34;\u0026#34; --- 修改文章的标题和内容，保存文件。\n在浏览器中访问 http://localhost:1313，进入Posts一栏可以看到你的文章已经成功创建并显示在页面上。\n部署到Github Pages # 在站点根目录下，使用以下命令生成静态文件： hugo 静态文件都将生成在public内，所以先进入生成的public文件夹，然后依次使用以下命令将文件推送到你的 Github 仓库： git init -b main # 由于我们之前安装主题时已经初始化过了可以不执行这一条 git remote add origin https://github.com/\u0026lt;your-username\u0026gt;/\u0026lt;your-username\u0026gt;.github.io.git git pull --rebase origin main git add . git commit -m \u0026#34;\u0026lt;提交说明\u0026gt;\u0026#34; git push -u origin main 等待一段时间后，你的站点就会部署到 Github Pages 上，你可以在浏览器中访问 https://\u0026lt;your-username\u0026gt;.github.io 来查看你的站点。\n之后新增文章或者修改网站属性需要提交可以使用\ngit add . git commit -m \u0026#34;\u0026lt;提交说明\u0026gt;\u0026#34; git pull --rebase origin main # 可选,如果远端仓库与本地一致，则不需要合并。 git push origin main 如果需要配置自定义域名，请自行上网搜索，非常的简单，不多赘述。\n一些小技巧和提示 # 1. 分享链接和RSS链接错误 # 如果你设置了文章分享链接或者想使用RSS但是发现分享链接中并不是你设定的baseURL，而是localhost:1313，请不要直接使用hugo server后 push 到仓库，而是使用hugo生成静态文件后再 push 到仓库。\n2. 添加自定义图标 # 如果想使用原本主题中不存在的图标，比如 、 等，你可以去寻找对应的.svg矢量图，然后改为\u0026lt;只包含有英文数字的文件名\u0026gt;.svg存放在themes/blowfish/assets/icons中，使用时直接填对应名字。例如我想用Bilibili和网易云音乐的icon，找到后将文件改名为bilibili.svg和163music.svg，然后使用{{\u0026lt;icon \u0026quot;bilibili\u0026quot;\u0026gt;}}和{{\u0026lt;icon \u0026quot;163music\u0026quot;\u0026gt;}}即可，就连主页下面的Links也是同理：\n[author] name = \u0026#34;褐瞳さん\u0026#34; image = \u0026#34;img/avatar.png\u0026#34; headline = \u0026#34;驕る鳥は墜ち 頭垂れて乞い\u0026#34; bio = \u0026#34;Everyone is mania in general\u0026#34; links = [ { bilibili = \u0026#34;https://space.bilibili.com/199364052\u0026#34; }, { 163music = \u0026#34;https://music.163.com/#/user/home?id=541376277\u0026#34; }, { linkedin = \u0026#34;https://www.linkedin.com/in/hetong-re4per/\u0026#34; }, { email = \u0026#34;mailto:zhang_zlf@outlook.com\u0026#34; }, { steam = \u0026#34;https://steamcommunity.com/id/he_tong/\u0026#34; }, ] 如果使用后发现图标颜色不对请使用文本编辑器打开对应.svg图标文件，找到fill=\u0026quot;#xxxxxx\u0026quot;修改为fill=\u0026quot;currentColor\u0026quot;；如果没有就在\u0026lt;path d='xxxxxx'\u0026gt;中间添加，修改为\u0026lt;path fill=\u0026quot;currentColor\u0026quot; d='xxxxxx'\u0026gt;。\n推荐两个svg矢量图图标网址（因为版权问题Simple Icons时常会缺失很多图标，可以使用网页时光机查到自己想要的图标，但请遵守其对应的使用规则）。\nSimple Icons Iconify.Design 3. 代码块Copy失效 # 首先请确认你是否开启了代码块快捷Copy允许，在config/_default/params.toml中的enableCodeCopy设置为true，并且config/_default/markup.toml中的highlight.noClasses设置为了false\n如果设置正确还是不可以使用那就大概率是因为你使用了不标准的Markdown代码块格式，主题作者曾在issue #610中解释。请确认代码块是否声明了对应的语言，可以在此查看，如果不是标准的编码语言可以声明为plaintext或者markdown，例如本文的目录结构表示部分就是声明为了plaintext：\n```plaintext . ├─ archetypes ├─ assets ├─ config ├─ content ├─ data ... ``` 如果还是有问题就有可能是因为结尾换行符的原因了，如果在git时有关于CRLF和LF的警告，就有可能是这个原因。可以参考一下这个issue\n参考 # Hugo官方文档 Hugo主题Blowfish 小绵尾巴 - 如何用 GitHub Pages + Hugo 搭建个人博客 ","date":"2024 August 9","externalUrl":null,"permalink":"/posts/how-bulid-blog-on-github-page/","section":"Posts","summary":"","title":"如何使用Github Page搭建自己的博客","type":"posts"},{"content":"","date":"2024 August 6","externalUrl":null,"permalink":"/tags/neutrino/","section":"Tags","summary":"","title":"NEUTRINO","type":"tags"},{"content":" 前言 # 本人很喜欢听歌，各种风格。而很早的时候使用软件调教的歌让我觉得很有意思，所以也想自己试着调教一首。市面上主流的歌姬调教软件有什么 UTAU、VOCALOID 和 CeVIO AI，其中 UTAU 是免费的调教软件，你在 bilibili 听到的很多人力其实也是 UTAU 调教的。而 VOCALOID 和 CeVIO AI 都是付费软件。（因为我只用过 UTAU，所以本文很多预处理都是使用 UTAU 进行的）\nUTAU 的调教刚开始用时会比较难，要想让歌姬唱的很自然有感情的话需要进行很多修饰和调音，而我只是想听听我喜欢的歌姬唱出来是什么样子，后来突然就兴起了 AIKiritan 让我很感兴趣，Kiritan 的声音很可爱，并且AIKiritan唱出来的歌声音都非常自然。于是我就去了解了一下，知道了 NEUTRINO。\n开始之前 # NEUTRINO是由SHACHI开发的免费歌声合成器。它基于音频合成深度学习模型（例如WaveNet，WaveRNN）与Morise开发的NSF来完成合成唱歌任务\n据官方推特，此软件的名称（软件直译：中微子）来源于一个“希望能开拓未曾听说过的乐曲与流派”的想法。\n引自萌娘百科( https://mzh.moegirl.org.cn )，文字内容默认使用《知识共享 署名-非商业性使用-相同方式共享 3.0 中国大陆》协议。\n提示 本节需要一些上网方法才能访问相关链接 你需要下载 NEUTRINO，官网是 https://studio-neutrino.com/ ，点击“Start Now”就可以前往下载页\n在下载页里找到“ダウンロード（Google Drive）”一节，点击链接“NEUTRINO Diffusion ダウンロード（Google Drive）”就会进入 NEUTRINO 的谷歌网盘\n云盘根目录会有一个文件夹叫NEUTRINO Diffusion - Muon vx.x，这里的x.x是版本号，这个文件夹默认就是 NEUTRINO 的最新版。在这个文件夹里找到NEUTRINO-windows-vx.x.x.zip并下载（这里我就默认你使用的 Windows 系统了，如果你使用的是其他系统请自行选择对应的文件下载）\n同时，在这个文件夹会有很多有人名的压缩文件，格式为\u0026lt;名字\u0026gt;（NEUTRINO-Library）-\u0026lt;版本\u0026gt;.zip，比如 Kiritan 的就是東北きりたん（NEUTRINO-Library）-v2.5.3.zip，选择你想要让其为你而唱的歌姬，也下载下来。\n接下来你就拥有了 NEUTRINO 和歌姬的声音模型，接下来可以先将 NEUTRINO 解压到你想要的位置，解压之后可以看见 NEUTRINO 的文件夹内容为\nNEUTRINO ├── bin/ NEUTRINO 的运行所需文件 ├── license/ NEUTRINO 的相关协议 ├── model/ 存放声音模型 ├── output/ 默认的生成输出位置 ├── score/ 存放生成歌曲的谱子 │ ├── label/ 和生成相关 │ └── musicxml/ 存放 musicxml 谱子 ├── settings/ NEUTRINO 的默认设定 ├── Readme（お読みください）.pdf 使用说明 ├── Run.bat 运行脚本 ├── Run_single_phrase.bat 运行单句 ├── ひらがな・カタカナ・音素一覧表.pdf 平、片假名、音素列表 ├── リリースノート.pdf 发行说明 └── 利用許諾契約書.pdf 最终用户许可协议 接下来将你下载的声音模型放入model文件夹中，model文件夹格式如\nmodel ├── KIRITAN 东北切蒲英的声音模型 ├── MERROW Merrow的声音模型 ├── NAKUMO Nakumo的声音模型 ... 乐谱准备 # 想让歌姬唱出来至少要让ta知道唱什么吧，所以我们需要一个谱子。在 NEUTRINO 中使用的乐谱格式为.musicxml格式，所以我们需要一个格式正确的.muscixml文件。官方推荐的是 MuseScore，一个乐谱编辑软件。如果你是专业的音乐师或者能够看懂五线谱推荐使用 MuseScore。因为我不是音乐系科班出身，所以这里使用了另外的方法来生成乐谱文件。\n以下我就使用 ピフ優 的 警報のあった日 谱子做演示了：\n当然，你如果不想自己从头写谱的话可以去网上搜索你想要听的歌曲的.ust文件，一般都很好搜索到（但如果真的很冷门的话就需要你来当第一人了）\n提示下面使用OpenUTAU部分如果嫌麻烦可以直接下载好需要的.ust后直接跳过，如果你有其他调音之类的需求可以参照 准备工具：\nOpenUTAU UtaFormatix UTAU声源 准备以上工具，你就可以开始创作了。OpenUTAU 是用来创作和调整乐谱的，但 OpenUTAU 只能将乐谱导出为.ust、.ustx或者.midi，所以我们还需要使用 UtaFormatix 来将上述格式转换为.musicxml（注意：不包括.midi，因为该格式不包含歌词）\n在搜索引擎中搜索关键字“\u0026lt;歌名+ust\u0026gt;”比如我是“警報のあった日 ust” 寻找心仪的作者的谱子下载 打开 OpenUTAU，点击左上角菜单栏“文件”，找到导入轨道，选择你的.ust文件。我这里 ピフ優 的 警報のあった日 有三个.ust文件，将其全部导入进去 选择音源，我这里使用了Kiritan（东北切蒲英） 给每个轨道选择好音源后点击左上角播放键▶可以进行试听，如果有觉得不对的地方可以进行调整 将每个轨道导出为.ust格式 乐谱转换 # 上面我们准备好了.ust文件，现在打开UtaFormatix，将你的.ust文件全部放进去，向下翻页，找到MusicXml\n设置部分一般默认即可，最后点击导出，会下载一个压缩包\n使用NEUTRINO生成音乐 # 将上面获得的压缩包文件解压到你的NEUTRINO\\score\\musicxml中（如果文件名有符号尽量修改掉，尽量只用字母、数字、连接符和下划线，不然可能会报错）\n回到NEUTRINO的根目录，右键Run.bat，选择编辑（这里我是用了Microsoft VS Code，完全可以使用记事本进行编辑），主要修改BASENAME（文件名）和ModelDir（模型名），其他参数可以参照这篇文章\n双击Run.bat，便会开始生成声音文件，等待进程结束（如果有多个音轨文件就多次修改和运行Run.bat文件）\n现在在NEUTRINO\\output中就可以看见生成的声音，需要使用的都是.wav格式，带和不带world的哪个效果更好都看你自己的选择\n混音和合成 # 现在有了人声部分，我们还需要伴奏，请自行去寻找，可以通过搜索引擎搜索“\u0026lt;歌名\u0026gt;+off vocal或者instrumental”来搜索\n使用音频编辑软件（例如Adobe Audition、Wave Editor等）进行对轴和混音等，因为我也是菜鸡，所以这里就不进行展开了，可以自行搜索教程等\n希望你可以使用NEUTRINO用自己喜欢的声源创造出属于自己的歌\n","date":"2024 August 6","externalUrl":null,"permalink":"/posts/neutrino/","section":"Posts","summary":"","title":"如何使用 NEUTRINO 让歌姬为你而唱","type":"posts"},{"content":" 前言 # 我相信有很多 MC 玩家在拥有了自己的第一台服务器时都想要搭建一个属于自己的服务器，我买下第一台服务器时就是为了和小伙伴开黑 MC。因为可以说是零基础搭建的服务器，在此期间遇到了很多问题，所以想借此写一篇博客，用来帮那些也是第一次搭 MC 服务器的萌新。 本篇文章主要会说到 Liunx 服务器上 Java 纯净服和 Forge 服的搭建，还会简单说一下如何在服务器上将不同端口上的 MC 服务器分配到不同的三级域名上。 MC 的服务器主要为纯净服，Mod 服和插件服，因为插件服我并没有搭建过，所以就不在这里多做解释了。\n纯净服搭建 # 需要准备的东西：\n一台服务器，云服务器或者自己搭建的本地服务器都可，我的这里使用的是阿里云服务器，系统是 Ubuntu 22.04 纯净服的服务器核心 对应版本的 Java 1.17 及以上使用 Java16，以下使用 Java8，根据自己的服务器版本装对应的 Java 版本 Xshell 和 Xftp，这俩软件的个人版是免费的，如果你的服务器上有安装宝塔，也可以直接使用宝塔 以上都准备好了就可以开始准备搭建你的纯净服服务器了\n首先将你的服务器核心放进你的服务器文件夹，比如我的的核心是 1.12.2 的版本核心，放在了 /home/HeTong/Minecraft/1.12.2文件夹内。\n接下来安装 Java，我第一次开服就在这里卡了很久，首先对应看你下载的 Java 版本是否正确，1.17 及以上的版本都需要 Java16 或者以上的版本，其他的用 Java8，如果你是 1.16.5 及以下的版本启动还有问题试试退到 Java8 更老的版本，比如我使用了 Java8 的 331 版本启动 1.12.2 却报错，换成 Java8 的 251 就好了，请对应版本下载 Jdk，比如我的的服务器就需要的是 jdk-8u251-linux-x64.tar.gz请对照自己的服务器版本下载对应的 Jdk，Java 的安装可以参照这篇文章。\n安装好了正确的 Java 版本后你就可以开始启动你的 MC 服务器啦，纯净服的启动十分的简单，直接输入\njava -Xms**m -Xmx**m -jar \u0026lt;你的核心名字\u0026gt; nogui 就会开始启动了，在这其中，-Xms**m是你的最小分配给 MC 的运行内存，-Xmx**m是你分配给MC的最大运行内存，比如我的的是\njava -Xms1G -Xmx1G -jar server-1.12.2.jar nogui 第一次启动肯定是不会直接启动的，需要你确定协议（EULA），你可以打开你的 Xftp，找到你的服务器核心的位置，里面有一个刚生成的\u0026quot;eula.txt\u0026quot;文件，右键使用记事本编辑，将 false改为 true\n#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula). #Fri Jan 12 18:56:37 CST 2024 eula=false 然后除了eula还有一个文件需要修改，就是 server.properties，里面的参数在这篇文章有详解，一般我们需要改的有\u0026quot;online-mode\u0026quot;这一项，意思是是否启用在线模式，如果是 true，将只有正版玩家可以进入游戏。 现在你已经基本设定好了你的服务器属性了，再次输入\njava -Xms**m -Xmx**m -jar server-*.*.*.jar nogui 你就会发现自己的服务器顺利启动了，ok啦！然后在控制台键入 op \u0026lt;你的ID\u0026gt;来赋予管理员权限给你自己\n接下来你就可以邀请好友进入你的服务器了，如果你打算开一个小服用来开黑一起玩建议开启白名单，在控制台键入 whitelist on便开启了白名单\n然后用 whitelist add \u0026lt;你的好友的ID\u0026gt;来添加白名单\n那想停止服务器怎么办呢？直接在控制台键入 stop 就行了，当然你也可以在游戏内以 op 身份使用指令 /stop 来停止服务器。\n当然我们不想每次启动服务器都输入那么长的指令，那我们可以写个简单的 shell 脚本，文件名为 run.sh，大概的内容是\n#!/bin/bash cd /your/minecraft/path/ screen -dmS \u0026lt;你想要的 screen 名字\u0026gt; java -Xms*G -Xmx*G -XX:+AggressiveOpts -XX:+UseCompressedOops -jar \u0026lt;mc核心文件名\u0026gt; nogui echo \u0026#34;minecraft \u0026lt;MC 的版本\u0026gt; server started successfully\u0026#34; 如果 screen 报错可以先 sudo apt-get install screen -y来安装 screen。\n其中的 screen -dmS是后台启动一个窗口名字就是你设定的名字，-XX:+AggressiveOpts -XX:+UseCompressedOops是用来优化启动的指令，/your/minecraft/path/是你放置服务器核心文件夹的绝对路径，比如我的的脚本就是\n#!/bin/bash cd /home/HeTong/Minecraft/1.12.2/ screen -dmS mc java -Xms2G -Xmx2G -XX:+AggressiveOpts -XX:+UseCompressedOops -jar minecraft_server.1.12.2.jar nogui echo \u0026#34;minecraft 1.12.2 server started successfully\u0026#34; 现在你每次启动都可以使用 ./run.sh来快捷启动 MC 服务器\n但是要记得你的 run.sh的文件位置才行的，比如我将 MC 放在了 /home/HeTong/Minecraft/1.12.2这个文件夹内，并且脚本名称为 1.12.2-run.sh，那么我想在任何地方运行服务器核心的话运行指令就为 bash /home/HeTong/Minecraft/1.12.2/1.12.2-run.sh\n那么如何用 shell 脚本停止 mc 服务器的运行呢？答案就是：\n#!/bin/sh screen -dr \u0026lt;你的screen名字\u0026gt; -X stuff \u0026#34;say 服务器将在10S后关闭！\\n\u0026#34; sleep 10 screen -dr \u0026lt;你的screen名字\u0026gt; -X stuff \u0026#34;stop\\n\u0026#34; ok以上就是纯净服的开服教程了，很简单吧，接下来说说 forge 版开服教程，其实和纯净版差不多，只是细节更多而已。\nForge服的搭建 # 首先需要准备的东西有\n一台服务器 纯净服的服务器核心并重命名为 minecraft_server.*.*.*.jar格式，其中 *.*.*是你纯净版核心的版本号 对应版本的 Java（1.16.5 以下 (包括) 使用 Java 8 以上的使用 Java 11或者更高） Xshell 和 Xftp ，或者宝塔面板 既然是 Forge 服，肯定需要 Forge 核心，对应开服版本下载核心的下载器就行了，如果一直加载不出来可以试试科学上网 首先将你的 Forge 核心的下载器和对应版本的纯净服核心放进你觉得合适的位置，比如我使用了 1.16.5 的 Forge 核心，放在了 /home/HeTong/Minecraft/1.16.5-forge下\n然后安装正确的 Java 版本（不知道为什么，似乎 Forge 对于 Java 版本要求比纯净版要求高许多）\n现在假设你没有 Java 版本的问题，你就可以到你的核心所在文件夹下运行这一段指令\njava -jar forge-***-installer.jar --installServer 其中 forge-***-installer.jar是你的 Forge 核心下载器的文件名称比如我的的是\njava -jar forge-1.16.5-36.2.0-installer.jar --installServer 如果出现了\nA problem occurred running the Server launcher.java.lang.reflect.InvocationTargetException at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:110) at java.base/java.lang.reflect.Method.invoke(Method.java:577) at net.minecraftforge.fml.relauncher.ServerLaunchWrapper.run(ServerLaunchWrapper.java:70) at net.minecraftforge.fml.relauncher.ServerLaunchWrapper.main(ServerLaunchWrapper.java:34) Caused by: java.lang.ClassCastException: class jdk.internal.loader.ClassLoaders$AppClassLoader cannot be cast to class java.net.URLClassLoader (jdk.internal.loader.ClassLoaders$AppClassLoader and java.net.URLClassLoader are in module java.base of loader \u0026#39;bootstrap\u0026#39;) at net.minecraft.launchwrapper.Launch.\u0026lt;init\u0026gt;(Launch.java:34) at net.minecraft.launchwrapper.Launch.main(Launch.java:28) at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) ... 3 more 这种类似的错误大概率是 Java 版本不对，可以多试几个 Java 版本。 现在假设你已经安装了正确的 Java 版本，这时候它第一步会下载 mc 的纯净服的服务器核心和 Forge 的核心，因为 mc 官方的下载服务器在国外，所以你的服务器如果没有下载纯净服核心大概会卡在这一步，如果你按照我说的提前准备好了纯净服的核心就会跳过纯净服核心下载这一步，然后等待下载 libraries 库，有的时候也会因为网络原因卡在某一个下载上，你可以试试在自己电脑上先运行 Forge 安装 Server，将下载的 libraries 库打包到服务器上。 现在你已经装好了 Forge 核心，在你的 forge-***-installer.jar同级文件夹下会有一个名为forge-***.jar的核心，运行\njava -jar forge-***.jar nogui 例如我的是\njava -jar forge-1.16.5-36.2.0 nogui 运行后依旧是 eula 的同意，和 server.properties 的修改，请参照纯净版对应部分。\n最后，依旧是写一个方便运行的脚本 run.sh\n#!/bin/bash cd /your/forge/minecraft/path/ screen -dmS \u0026lt;你的 forge screen 名字\u0026gt; java -Xms*G -Xmx*G -XX:+AggressiveOpts -XX:+UseCompressedOops -jar \u0026lt;forge 核心文件名\u0026gt; nogui echo \u0026#34;minecraft \u0026lt;MC 的版本\u0026gt; server started successfully\u0026#34; 比如我的是\n#!/bin/bash cd /home/HeTong/.minecraft/1.16.5-forge/ screen -dmS forge-1.16.5 java -Xms2G -Xmx2G -XX:+AggressiveOpts -XX:+UseCompressedOops -jar forge-1.16.5-36.2.41.jar nogui echo \u0026#34;minecraft 1.16-forage server started successfully\u0026#34; 和一个停止运行的脚本 stop.sh\n#!/bin/bash screen -dr \u0026lt;你的 forge MC 的 screen 名字\u0026gt; -X stuff \u0026#34;say 服务器将在10S后关闭！\\n\u0026#34; sleep 10 screen -dr \u0026lt;你的 forge MC 的 screen 名字\u0026gt; -X stuff \u0026#34;stop\\n\u0026#34; 取的 screen 名字尽量不要重复\n将不同的mc服务器分配给不同的三级域名 # 现在我的的手上只有一个二级域名，但是我又想将两个 mc 服务器同时启动并分配给我手上的两个三级域名，其实最开始也在网上找了好久没有找到解决方案，后来知道了 SRV 解析，完美的解决了我的疑惑。\n首先在自己的两个 server.properties 中修改 server-port 即端口的值，其中纯净版服务器端口为默认的25565，Forge 服的端口改为25566。\n然后到我的DNS服务商即腾讯 DNS 服务中新添加两条解析，解析类型都为 SRV,主机记录为 _minecraft.tcp.\u0026lt;第三级的名字\u0026gt;其中 \u0026lt;第三级的名字\u0026gt;自己想要实现的三级域名的最前端，比如我想要在 mc.hetong-re4per.com 上运行我的纯净服（端口25565），在 earth.hetong-re4per.com 上运行我的 forge 服（端口26657），就在主记录上填上 _minecraft.tcp.mc，记录值填上 5 0 25565 _mcserver.hetong-re4per.com.，forge 的另起一项分别填上 _minecraft.tcp.earth和 5 0 25567 _mcserver.hetong-re4per.com.。注意，不要直接填服务器 ip，需要填一个提供服务的域名，然后就同下图：\n好了，以上，希望能够帮到萌新，有问题也可以提问，我如果知道的话会尽量帮忙解决。\n","date":"2024 July 10","externalUrl":null,"permalink":"/posts/mcserver-build/","section":"Posts","summary":"","title":"Java MC服务器搭建","type":"posts"},{"content":"","date":"2024 July 10","externalUrl":null,"permalink":"/tags/minecraft/","section":"Tags","summary":"","title":"Minecraft","type":"tags"},{"content":" 前言 # 众所周知，kook 在差不多垄断了国内的语音聊天市场之后就开始搞一些逆天操作了，对于非会员用户几乎可以说是只有一个糊得不能听的语音聊天功能，甚至如果同时使用 B 站的直播姬或者开 OBS 直接没法正常使用。所以我们需要一个可以平替甚至超越 kook 的语音聊天平台\n国外的有 Discord，但是并不支持大陆的网络环境 YY 广告多，后台占用又大 即时聊天软件的语音功能只能说是单纯的通电话，没有降噪和键盘声抑制等功能 当然国内最近又推出了一个新的语音聊天软件。叫 Oopz ，如果你懒得折腾也可以选择使用 Oopz 或者使用结语的方案。\n所以有没有一个可以免费使用、音质好、功能全，甚至你拥有所有的管理权限的语音软件呢，答案当然是有的，就是 Teamspeak（以下简称 ts）\n下载 # 适用 Linux 本教程主要是搭建 Linux 的 ts 服务器，如需 Windows 版本可以参照 bilibili up主 大河李斯特视频工作室 的视频《【看番教程35】无延迟、超稳定、功能强劲，搭建属于你自己的TeamSpeak语音服务器保姆级教程》，但对于一个需要长期运行的服务，我建议使用服务器 Linux 进行搭建 teamspeak3 的官网是 https://teamspeak.com/zh-CN/ ，你可以直接点击进去，找到顶上的“下载”按钮，选择“server”选项卡。\n然后向下找到 Linux，然后下载对应你服务器的版本（一般都是 64-bit），点击右方的像剪切板的按钮来复制下载链接。\n下载好后就可以开始解压了：\n打开你的 ssh 连接你的服务器，使用 curl -O \u0026quot;\u0026lt;你刚刚复制的链接\u0026gt;\u0026quot;来下载 ts 服务器（链接需要加半角双引号） 后使用 tar -xjf \u0026lt;ts 服务器文件名\u0026gt;来解压服务器 解压后 cd到对应文件夹，里面是这个样子的\n启动服务器 # 同意许可：touch .ts3server_license_accepted\n启动服务器：./ts3server_startscript.sh start\n启动后会返回你一个 token，复制下来\n初次启动的输出十分重要，请务必保管好，不要泄露。如果可以还请将 ts 这一次运行输出的全部内容存放在你本地安全的位置 如果你的服务器是使用的云服务器商的 vps 还需要去后台打开 ts 需要的端口，以下是建议打开的端口，所有端口可以在服务器文件中自行修改\n用处 是否必须 端口号 端口协议 默认语音服务器端口 是 9987 UDP ServerQuery raw 端口 否 10011 TCP ServerQuery SSH 端口 否 10022 TCP ServerQuery HTTP 端口 否 10080 TCP ServerQuery HTTPS 端口 否 10443 TCP 文件传输端口 是 30033 TCP TSDNS 否 41144 TCP 连接服务器 # 接下来启动你的 ts 客户端，可以使用 ts3，也可以使用 ts5。因为 ts5 还在 Beta 阶段，这里我使用 ts3 进行演示。如果不知道如何安装 ts3 客户端可以去我的分享站查看并安装。启动 ts3 客户端后如果没有汉化也可以在我的分享站里面进行下载。\n启动后左上角会有一个“连接”的菜单按钮，然后点击“连接服务器”，在“服务器别名或地址”里填上你的服务器地址，然后点击连接，就会进入你的服务器\n这时候会弹出一个小窗口，让你输入 token，就将你刚刚开服时的 token 粘贴进去然后点击“OK”，你就会成为服务器的唯一管理员，拥有服务器的全部权限：\n这里建议创建一个备用权限密钥保存在自己的记事本或者网盘中。教程如下：\n点击 ts3 客户端顶部菜单栏的“权限 -\u0026gt; 权限密钥” 点击左下角“创建”按钮 Type：\u0026ldquo;服务器组\u0026rdquo;，Group：\u0026ldquo;Server Admin\u0026rdquo; 点击“创建”按钮，就会有一串 token 出现在 Generated privilege key 一栏中，点击右边的复制按钮，然后将其存放在你觉得安全的地方 创建服务器开机自启动 # 本部分需要使用 root 用户或者 sudo 创建服务文件 /lib/systemd/system/teamspeak.service\n添加如下内容：\n[Unit] Description=Teamspeak, The most superior online voice communication solution. Wants=network-online.target After=syslog.target network.target network-online.target [Service] User=\u0026lt;你搭建时用的用户名\u0026gt; Group=\u0026lt;你搭建时用的用户组\u0026gt; WorkingDirectory=\u0026lt;你的 ts 服务器文件夹位置\u0026gt; ExecStart=\u0026lt;你的 ts 服务器文件夹位置\u0026gt;/ts3server_startscript.sh start ExecStop=\u0026lt;你的 ts 服务器文件夹位置\u0026gt;/ts3server_startscript.sh stop PIDFile=\u0026lt;你的 ts 服务器文件夹位置\u0026gt;/ts3server.pid Type=forking [Install] WantedBy=multi-user.target 重载 systemd:systemctl daemon-reload\n开启自启动:systemctl enable teamspeak.service\n启动 ts 服务器:systemctl start teamspeak.service\n停止 ts 服务器:systemctl stop teamspeak.service\n重启 ts 服务器:systemctl restart teamspeak.service\n总结 # 以上全部就是 teamspeak 服务器的搭建教程了，希望大家能够成功搭建属于自己的语音服务器，不明白的或者不懂的可以评论询问。实在不想动，不理解或者不容易获得公网 IP 之类的话可以上某宝搜搜，直接一站式解决你的问题\n参考 # Vigorous Pro - TeamSpeak 服务器搭建方法\n","date":"2024 June 6","externalUrl":null,"permalink":"/posts/ts3server-build/","section":"Posts","summary":"","title":"如何搭建自己的ts3服务器","type":"posts"},{"content":"","date":"2024 May 31","externalUrl":null,"permalink":"/tags/openwrt/","section":"Tags","summary":"","title":"OpenWRT","type":"tags"},{"content":"","date":"2024 May 31","externalUrl":null,"permalink":"/tags/%E5%A4%9A%E8%AE%BE%E5%A4%87%E6%A3%80%E6%B5%8B/","section":"Tags","summary":"","title":"多设备检测","type":"tags"},{"content":"","date":"2024 May 31","externalUrl":null,"permalink":"/tags/%E6%A0%A1%E5%9B%AD%E7%BD%91/","section":"Tags","summary":"","title":"校园网","type":"tags"},{"content":" 起因 # 因为去年校园网升级到了千兆网，当时心动办了校园网。虽然校园网的有线网速度很快，但是限制设备数量为两台。而我的设备比较多，两台肯定不够用，并且校园网就只有有线网的速度可以。于是我了解了一下，决定使用红米AC2100路由器然后安装OpenWRT来实现校园网认证并共享网络给我的舍友。买路由器之前看了一些讨论，说他们学校有什么多设备检测之类的，但我当时安装路由器后并没有出现被检测到的现象，当时还在暗暗窃喜。\n于是就在前几天喜提多设备检测。当天刚刚起床，舍友就给我说网没法用了，看了一下，说什么检测到分享网络，冻结30分钟。我人懵了，用了这么久咋突然被检测到了，后来去贴吧里一看才发现是突然加的，我的专业需要使用一些虚拟机，而且一些安卓模拟器也会被误报，真的十分影响体验。之后和吧里一位兄弟讨论得出大概是用的ttl检测（后来似乎加了其他的检测方式，不排除有很逆天的深度包检测）。于是去搜了一下多设备检测的绕过方法，在这里记录一下。\n博主并非科班出身，只是记录自己解决的方式，并不能保证100%成功，也不保准你的路由器按照我的方式不会出现问题甚至损坏。文章中可能会出现错误，还请指正。 大致了解 # 校园的多设备检测方式主要有 TTL 检测和 UA 检测。\n这两种检测方式都是能很快查出来我们的流量是否是一个设备的，服务器只需要解析我们数据的包头就能知道我们的 TTL 值和 UA 了。所以我们要想办法让我们的数据包在到学校服务器的时候 TTL 值和普通的电脑一样（至少看起来一样），还要让我们的UA无法被识别，或者路由器下面所有设备通过路由器后统一成为同一个UA。\nTTL修改 # 存活时间（英语：Time To Live，简写TTL）是电脑网络技术的一个术语，指一个数据包在经过一个路由器时，可传递的最长距离（跃点数）。 每当数据包经过一个路由器时，其存活次数就会被减一。 当其存活次数为0时，路由器便会取消该数据包转发，IP网络的话，会向原数据包的发出者发送一个ICMP TTL数据包以告知跃点数超限。 其设计目的是防止数据包因不正确的路由表等原因造成的无限循环而无法送达及耗尽网络资源。\nTTL 是最简单的多设备检测方式，因为 TTL 每过一个路由值都会 -1，所以只需要抓包然后读出我们的包头里面的 TTL 值是否是一般情况下系统默认的 128 或者 64 就可以判断我们是否共享了网络。但在OpenWRT中我们可以简单的通过添加 iptables 或者 nftables 防火墙规则来实现路由器下所有设备 TTL 值的统一。\n我们需要先确定自己路由器防火墙的类型。一般在 OpenWRT 22.01 版本以后（包括）自带防火墙是 nftables ，以前的为 iptables。可以在网页的路由器管理后台 系统-\u0026gt;概览 看到固件版本。\n确认了防火墙类型后，我们就可以开始设置防火墙了。\nnftables 设置防火墙规则 # 如果你是 nftables，那么你需要进入 ssh 来进行防火墙的修改或者使用 iptables-nft工具，可以自动将 iptable指令转换成 nftable指令，直接在 系统-\u0026gt;软件包 然后搜索 iptables-nft然后安装即可。推荐使用 iptables-nft。\n如果你还是想使用 nftables规则的话，以下是如何进入路由器的 ssh 的简单教程。\n由于 OpenWRT 一般都默认只有root用户，所以本文以下所有命令都是默认以 root 执行的 在自己电脑上利用终端（Windows Terminal）或者 cmd 键入以下命令。也可以使用更专业的ssh工具。\nssh root@\u0026lt;路由器网关地址\u0026gt; 回车后输入路由器管理员账户的密码（这里在输入时不会显示任何值，这是正常的，输入完成后回车即可）。然后就进入了路由器的ssh界面。\n创建用来修改所有流量包头TTL值的规则 12-mangle-ttl-128（128可以改成64，分别对应 windows 和 Linux/Android 默认的 TTL）\n键入 cd /etc/nftables.d回车，该文件夹是 nftables 存档部分防火墙规则的文件 输入 vi 12-mangle-ttl-128.nft回车，以新建一个 nftables 的规则文件 轻敲键盘上字母 I键进入编辑模式 复制以下代码，再通过按 Shift + Insert（Insert在有的键盘上写的是Ins）来将代码粘贴进去 chain mangle_postrouting_ttl128 { type filter hook postrouting priority 300; policy accept; counter ip ttl set 128 } chain mangle_prerouting_ttl128 { type filter hook prerouting priority 300; policy accept; counter ip ttl set 128 } 完成后先按键盘上的 Esc退出编辑模式，再输入 :wq回车就可以退出并保存文件了。 完成后在命令行使用 service firewall restart来重启防火墙即可。效果如图（图是之前截的，所以设置的值并不是128）。\niptables设置防火墙规则 # 进入 OpenWRT 网页后台管理页的防火墙设置，在 自定义设置 中填入以下内容，然后点击右下角保存并退出即可。\niptables -t mangle -A POSTROUTING -j TTL --ttl-set 128 UA 隐藏 # User-Agent 请求标头是一个特征字符串，使得服务器和对等网络能够识别发出请求的用户代理的应用程序、操作系统、供应商或版本信息。\n学校可以通过多次抓包检测我们的数据包然后查找 UA 是否有同时出现两种不同的设备来判定我们是否有共享网络，所以我们需要消除可以识别设备类型的字段，或者统一所有设备的 UA 都是同一个设备的。\n我这里使用的是 Zxilly 的 UA2F\nZxilly/UA2F Change User-Agent to F-string on OpenWRT router to prevent being detected. C 351 76 先去 Releases 找到对应你路由器架构的 .ipk包，下载后通过 OpenWRT 中的 系统-\u0026gt;软件包 中的 上传软件包，然后点击安装。路由器的架构依旧可以在网页的路由器管理后台 系统-\u0026gt;概览 看到 cpu 架构。当然你还是不知道你的路由器是什么架构的话可以去 系统-\u0026gt;软件包 ，找到 配置opkg\u0026hellip; 按钮，点击后在 /etc/opkg/distfeeds.conf项中的镜像源地址会有 packages/的字样，后跟的就是的路由器 cpu 架构，比如我的就是 mipsel_24kc。\nsrc/gz openwrt_core https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/targets/ramips/mt7621/packages src/gz openwrt_base https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/packages/mipsel_24kc/base src/gz openwrt_luci https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/packages/mipsel_24kc/luci src/gz openwrt_packages https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/packages/mipsel_24kc/packages src/gz openwrt_routing https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/packages/mipsel_24kc/routing src/gz openwrt_telephony https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/packages/mipsel_24kc/telephony 下载并安装后需要进行一些设置，请参考 UA2F 的 uci command 部分进行设置。\n然后就是需要关掉软件分流和全锥型NAT，有 TurboACC的话也请尽量不要使用，不然 rkp-ipid和 ua2f可能会失效。\n最终效果如图。\n最终 # 网络开发出来就是让我们来使用的，学校总是会以一些很让人不可理喻的理由来限制我们上网，这次加了检测的理由是去年有人使用学校的 IP 被诈骗了（说实话我猜不到是怎么用 IP 被骗了的），然后就来限制我们的网络自由。就算是限制成4台设备我可能都不会为了这个东西搞这么久。希望校园网越来越好吧。\n参考 # 知乎 鶴唳 的文章《适用于 Nftables 的 TTL 修改》 博客园 夜读春秋 的文章《iptables对报文中TTL的操作》 Zero\u0026rsquo;s Record博客站 zero 的文章《校园网多设备检测绕过》 ","date":"2024 May 31","externalUrl":null,"permalink":"/posts/multi-device-detection/","section":"Posts","summary":"","title":"校园网防止多设备检测指北","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" 👋 Hi there # 👩‍💻 关于我 # 我是 HeTongRe4per，就读于长沙的大四学生，对编码和技术充满热情。目前，我正在磨练自己在 Java、C#、Python 和 C++ 方面的技能，并对后端运维有着浓厚的兴趣。我有长期使用 Linux、配置 Nginx 和 Docker 的经验，我一直在寻找新的挑战和学习成长的机会。这是我的博客站点，我将在这里分享我的学习笔记和项目经验。\n📝 简介 # 🔭 我目前正在使用 Java、C#、Python 和 C++ 进行各种项目。 🌱 我目前正在学习软件开发和后端运维。 👯 我希望在开源项目和有趣的编码挑战中开展合作。 🤔 我希望在掌握软件开发高级概念方面得到帮助。 💬 向我咨询任何与我的项目或兴趣相关的问题。 😄 代词：他 ⚡ 有趣的事实：我喜欢玩游戏和听音乐，还喜欢探索新的技术和框架。 🛠️ 语言和工具 # \u0026nbsp;Java \u0026nbsp;C# \u0026nbsp;python \u0026nbsp;C++ 💻 关于本站 # 本站创建于2024年8月6日，由于之前服务器过期所以转到Github Page上。主要用于记录自己平时的一些笔记和经验分享。\n","externalUrl":null,"permalink":"/about/","section":"瞳のBlog","summary":"","title":"关于","type":"page"},{"content":"\r樱木の碎碎念\rStraight ahead of him, noboady can go very far.\r","externalUrl":null,"permalink":"/friends/","section":"瞳のBlog","summary":"","title":"友链","type":"page"}]