[{"content":"","date":"2025 年 2 月 27 日","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025 年 2 月 27 日","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025 年 2 月 27 日","externalUrl":null,"permalink":"/tags/svc/","section":"Tags","summary":"","title":"SVC","type":"tags"},{"content":"","date":"2025 年 2 月 27 日","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025 年 2 月 27 日","externalUrl":null,"permalink":"/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/","section":"Categories","summary":"","title":"技术教程","type":"categories"},{"content":" 开始之前 # so-vits-svc 是一个可以将声音训练成为一个可以唱歌的模型并且通过这个模型转换歌声的项目，svc 即 Singing Voice Conversion（歌声转换）的缩写。而 GPT-SoVITS 是属于 tts （文本转语音），开始之前请注意两者区别。\n本教程使用 bilibili@羽毛布団 的整合包，依据 GitHub 上的项目：\nsvc-develop-team/so-vits-svc SoftVC VITS Singing Voice Conversion Python 26616 4916 该项目现在已经存档，只能访问和克隆等，最新版本是 4.1。之前 GitHub 上的 5.0 版并非官方的后续版本，该项目作者通过偷取成果、碰瓷甚至开盒 So-VITS 开发者的方式为自己赚取名声，行径极其恶劣，任何为其贡献热度的行为都是在损害开源社区生态，因此不建议任何人使用该项目。\n使用 svc 请自行注意数据集的授权问题，禁止使用非授权数据集进行训练！任何由于使用非授权数据集进行训练造成的问题，需自行承担全部责任和后果！与仓库、仓库维护者、svc develop team 、本文作者无关！详情请参照官方仓库说明。 许可证声明作品简介模板 # So-VITS 项目使用 AGPL-3.0 许可证，任何基于 So-VITS 项目和本整合包产出的作品必须遵循以下协议条款：\n未经授权同意，禁止在音视频网站发布的作品中标注项目仓库地址、仓库作者、贡献者、整合包作者的信息。 必须在作品中标注免责声明，免去仓库作者、贡献者、整合包作者对该作品一切后果的责任。 无论以任何形式二次发布基于该项目的软件，都必须同时开放源代码。 准备 # 最好在开始之前准备好想要制作模型的声音文件，尽量不要包含背景音，电流音，杂音等等，声音越干净越好。语音时长最好大于 10min，30min为最佳。\n电脑要求：\n显卡显存至少在 6G 或以上； 显卡支持 NVIDIA-CUDA； python 版本 \u0026gt;= 3.1（官方在自述文件中告诉Python 3.8.9能够稳定地运行该项目） 当然，以上以上条件不满足可以自己租赁云计算服务，我在本教程使用的是 AutoDL 你可以使用其他的平台，操作类似。\n开始安装 # 如果是在自己电脑上进行部署可以直接前往下载（Windows 版）\n如果是使用云计算服务可以尝试在社区镜像中寻找，关键词为so-vits-svc。\n显卡选择便宜的并且显存大于 6G 即可。\n运行 WebUI # 成功开机后选择「JupyterLab」，打开 JupyterLab 界面。\n接下来如果你不懂 python 可以按照你的镜像中告诉你的信息进行运行即可，下面使用使用的镜像进行示例。\n请注意，以下指令都是在我使用 AutoDL 下的社区镜像svc-develop-team/so-vits-svc/so-vits-svc-4.1-Stable / v14.2进行的操作。仅仅作为参考，镜像不同请不要直接进行使用，具体请根据自己使用的镜像进行操作。 首先运行移动文件到自己数据盘：\n选择\n#移动项目文件夹到数据盘以节约系统盘空间 %mv /root/workdir /root/autodl-tmp 再点击编辑器左上角「▶（运行指定单元格并向前移动）」，以下步骤类似；\n然后再让工作区进入到项目文件夹中：\n#进入项目文件夹 %cd /root/autodl-tmp/workdir/so-vits-svc 接下来的步骤可以直接使用 WebUI 进行操作，跳到启动 WebUI 步骤：\n#使用webui进行推理,也可以进行训练，不过用笔记本会多两个编码器 #运行后会生成两条链接，一条是本地端口6006，通过自定义服务访问或者通过ssh隧道访问(强烈建议通过ssh隧道，关于如何使用请看 BV1oh4y1n7Nv ) # 另一条是公共端口，可以直接在其他电脑上打开，貌似只能用于推理 !python app.py 然后就会有运行结果，点击Running on public URL后的链接：\n进入到 WebUI 后就可以开始进行数据预处理等了。\n数据预处理 # 数据预处理主要有提炼人声和音频切割两部分。\n提取人声 # 首先将在准备过程准备好的音频进行降噪和去除背景音，如果你的音频已经非常干净就不需要了。\n降噪和去除背景噪音十分推荐使用 UVR5。但是 UVR5 也对显卡有一定性能要求。如果电脑实在不够可以尝试将 GPT-SoVITS 克隆到机器上单独使用其中的 UVR5 WebUI 版本。\nRVC-Boss/GPT-SoVITS 1 min voice data can also be used to train a good TTS model! (few shot voice cloning) Python 41387 4620 当然，音频切割也可以在 GPT-SoVITS 中完成。\n音频切割 # 这里如果你使用了 GPT-SoVITS 可以在预处理工具中找到音频切割 WebUI 工具，如果没使用 GPT-SoVITS 其实在 so-vits-svc 中也有包括音频切割工具。\n将原音频放在云机器上在「原始音频文件夹」一项键入正确的文件夹路径，输出文件夹也键入想要输出的路径，然后点击「加载原始音频」。没有想要更改的设定的话加载完毕后点击「开始切片」即可。\n生成底模 # 在dataset_raw文件夹下创建一个角色名称目录，我这里就叫做Mushnine，让后将切出来的所有音频放入这个你创建的文件夹中。请注意是dataset_raw再新建一个文件夹。\n回到 WebUI，选项卡选择「训练」。点击「识别数据集」，查看是否有你刚刚创建的文件夹名字，没有的话确认一下是不是在dataset_raw下新创建文件夹再将音频切片放进去的。如果发现还有一个ipynb_checkpoints不用在意。\n如果你是萌新接下在这些参数都不用动，直接点击「数据预处理」。然后会在预处理输出信息的框中显示预处理的输出，等待显示 100% 后可以先清空一下输出信息。\n模型训练 # 接下来就可以进行模型训练了：\n「当前使用显卡信息」： 确认是否是自己的显卡型号；\n「多卡用户请指定希望训练使用的显卡ID」： 字面意思；\n「每隔多少步(steps)生成一次评估日志」： 填入想要多少步打印一次训练的评估日志，例如我填了 200\n2025-02-19 02:15:29,695\t44k\tINFO\tTrain Epoch: 20 [90%]\r2025-02-19 02:15:29,696\t44k\tINFO\tLosses: [2.5530827045440674, 2.2724742889404297, 8. 821123123168945, 14.801704406738281, 1.3729219436645508], step: 200, lr: 9. 976276699833672e-05, reference_loss: 29.821304321289062 「每隔多少步(steps)验证并保存一次模型」： 字面意思，期望每多少步保存一次模型，你可以通过观察评估日志决定到哪一步可以中断训练\n下面的参数都不用动了，观察「说话人列表」是否为在dataset_raw文件夹中新建的文件夹名称。\n点击「写入配置文件」后点击「从头开始训练」即可，然后回到 JupyterLab，可以看到训练模型的输出，到了你觉得合适的时候就可以点击左上角「⏹（中断内核）」。（一般训练到 5000 步可以进行测试，训练到 10000 步可以进行使用）。\n你可以将训练到合适的模型下载下来修改成自己方便认识的名称保存在本地，记同时将对应的config.json下载下来。训练出来的模型一般在logs/44k/文件夹下。\n推理 # 终于可以开始推理了。顶部选择「推理」选项卡。（如果使用的是外部下载的模型config请存放在config文件夹下，模型存放在logs/44k/文件夹下。）\n首先选择你想要使用的模型，等加载完毕后再选择对应的配置文件（config）。\n如果之前没有训练浅扩散模型下面浅扩散模型相关的就不用管了，到下面选择「加载模型」即可。（需要浅扩散模型可以到「训练」中自行训练一份）\n下面的选项都在项目名后面有介绍，按需选择，一般默认即可。\n接下来将想要唱出来的纯人声进行上传，如果有多份可以先上传到机器上然后在「批量音频上传」选择音频文件夹（如果没有纯人声可以通过 UVR5 将想要唱的歌人声提炼出来）。接下来点击「音频转换」，等待推理结束就可以听到你想要的结果了。\n参考和鸣谢 # so-vits-svc 项目组和项目 bilibili@羽毛布団 和制作的整合包及对应使用文档 ","date":"2025 年 2 月 27 日","externalUrl":null,"permalink":"/posts/use-so-vits-svc-to-train-your-own-voice-model/","section":"Posts","summary":"","title":"使用 so-vits-svc 训练和使用属于自己的模型","type":"posts"},{"content":"","date":"2025 年 2 月 15 日","externalUrl":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog","type":"tags"},{"content":"","date":"2025 年 2 月 15 日","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"Github","type":"tags"},{"content":"","date":"2025 年 2 月 15 日","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"2025 年 2 月 15 日","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":" 前言 # 在部分的文章评论中有读者告诉我部分内容按照文章的进行操作有问题，所以我发现可能需要一个提醒读者文章很久没有更新过了的提示。\n经过搜索发现 hugo 本身有一个方法LastMod，可以获取到文章上次更新的时间，于是就使用这个方法做了Partial。\nConfig 部分 # 在hugo.toml或者config.toml需要添加两个新的项：\nenableGitInfo= true [frontmatter] lastmod = [\u0026#39;:git\u0026#39;, \u0026#39;lastmod\u0026#39;, \u0026#39;:fileModTime\u0026#39;, \u0026#39;date\u0026#39;] enableGitInfo可以启用对 git 代码库的访问； lastmod用来指定获取最后文章更新时间的方法，这里我将:git放在最前，优先级最高。 文章过期的 Partial # 这里需要你按照自己的博客主题进行自由发挥。新建一个partial为layouts/partials/articleexpired.html。\n我是使用的 Blowfish 的alert简码进行修改而来的：\n注意，这一段代码只适用于 Blowfish 主题，其他主题需要自行编写。 \u0026lt;div id=\u0026#34;update-info\u0026#34; style=\u0026#34;display: none;\u0026#34; {{ if not ($.Scratch.Get \u0026#34;cardColor\u0026#34;) }} class=\u0026#34;flex max-w-prose py-1 mt-2 px-4 rounded-lg bg-primary-100 dark:bg-primary-900\u0026#34; {{ else }} class=\u0026#34;flex max-w-prose py-1 mt-2 px-4 rounded-lg\u0026#34; style=\u0026#34;background-color: {{ $.Scratch.Get \u0026#34;cardColor\u0026#34; }}\u0026#34; {{ end }}\u0026gt; \u0026lt;span {{ if not ($.Scratch.Get \u0026#34;iconColor\u0026#34;) }} class=\u0026#34;text-primary-400 ltr:pr-3 rtl:pl-3 flex items-center\u0026#34; {{ else }} class=\u0026#34;ltr:pr-3 rtl:pl-3 flex items-center\u0026#34; style=\u0026#34;color: {{ $.Scratch.Get \u0026#34;iconColor\u0026#34; }}\u0026#34; {{ end }}\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; (\u0026#34;circle-info\u0026#34;) }} \u0026lt;/span\u0026gt; \u0026lt;span {{ if not ($.Scratch.Get \u0026#34;textColor\u0026#34;) }} class=\u0026#34;dark:text-neutral-300\u0026#34; {{ else }} style=\u0026#34;color: {{ $.Scratch.Get \u0026#34;textColor\u0026#34; }}\u0026#34; {{ end }}\u0026gt; \u0026lt;p style=\u0026#34;margin-top: 0px; margin-bottom: 0px;\u0026#34; id=\u0026#34;update-text\u0026#34;\u0026gt;上次更新于 loading... 前，部分内容可能已经过期。\u0026lt;/p\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { // 获取 Hugo 渲染的时间，并转换为标准的 ISO 8601 格式 const lastModifiedStr = \u0026#34;{{ .Lastmod }}\u0026#34;; // 使用正则将时间转换为 ISO 格式 const lastModified = new Date(lastModifiedStr.replace(/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2}) ([\\+\\-]\\d{4}) (CST)/, \u0026#39;$1-$2-$3T$4:$5:$6$7\u0026#39;)); const now = new Date(); const duration = now - lastModified; const days = Math.floor(duration / (1000 * 60 * 60 * 24)); const years = Math.floor(days / 365); const remainingDays = days % 365; let updateText = \u0026#34;\u0026#34;; let updateInfoDiv = document.getElementById(\u0026#34;update-info\u0026#34;); // 当天数大于等于 30 时显示 div if (days \u0026gt;= 30) { updateInfoDiv.style.display = \u0026#34;flex\u0026#34;; // 显示 div if (years \u0026gt;= 1) { updateText = `上次更新于 ${years} 年 ${remainingDays} 天前，部分内容可能已经过期。`; } else { updateText = `上次更新于 ${remainingDays} 天前，部分内容可能已经过期。`; } } // 更新提示文本 document.getElementById(\u0026#34;update-text\u0026#34;).textContent = updateText; }); \u0026lt;/script\u0026gt; 添加进入文章 # 你需要知道自己使用的主题的single存放位置，然后将其复制一份到你自己 hugo 站点目录下，例如 Blowfish 的参照下面的：\n./ ├── layouts/ │ ├── _default/ │ │ └──single.html # 复制到这儿 │ ├── partials/ ↑ │ ├── robots.txt │ │ └── shortcodes/ │ ... │ └── themes/ │ └── blowfish/ │ ├── layouts/ │ │ ├── _default/ │ │ │ ├── single.html # 这个文件 │ │ ... │ ... ... 然后在section的{{ partial \u0026quot;series/series.html\u0026quot; . }}前面添加下面这一段：\n{{ if .Params.articleexpired | default true}} {{ partial \u0026#34;articleexpired.html\u0026#34; . }} {{ end }} 像下面一样：\n修改 workflow # 因为如果在这个时候直接提交你可能会发现文章并不会显示文章过期提示，其实是因为 Github Action 中的actions/checkout@v2默认每次在工作流里克隆的仓库不包括文件修改日期，所以我们需要修改使用actions/checkout@v2的这一步添加一个fetch-depth: 0，像下面一样：\nsteps: - name: Checkout repository uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 参考 # 小球飞鱼 的博客 - Hugo | 以正确姿势自动添加文章最后更新时间 zhixuan​​ 的博客 - Stack主题 + GitHub Action ","date":"2025 年 2 月 15 日","externalUrl":null,"permalink":"/posts/article-content-expiration-reminder/","section":"Posts","summary":"","title":"为自己的 Hugo 文章添加一个文章过期提示","type":"posts"},{"content":"","date":"2025 年 2 月 15 日","externalUrl":null,"permalink":"/series/%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/","section":"Series","summary":"","title":"自建博客","type":"series"},{"content":"","date":"2025 年 1 月 24 日","externalUrl":null,"permalink":"/tags/wsl/","section":"Tags","summary":"","title":"WSL","type":"tags"},{"content":" 起因 # 昨天重置了电脑的网络，然后今天启动 WSL 就连不上网络了，上网上找了一堆教程，结果后面直接无法启动 WSL 了。所以有了这一篇博客。\n无法启动的表现 # 尝试启动 WSL 时会直接卡着，如果是通过 Windows Terminal 启动就会一直是空白的；如果直接启动 Ubuntu22.04.5 LTS 也会一直是一个黑框。\n如果想尝试使用 wsl 指令，例如wsl --shutdown、wsl -v、wsl --status等等指令也都会直接卡住。\n修复过程 # 大致过程其实就是先备份虚拟磁盘，然后重装 WSL，同时将虚拟磁盘放回去。非常的简单，对吧。\n备份虚拟磁盘 # 我们需要备份一下磁盘，防止后面重装 WSL 后数据丢失。\n你可以先尝试使用使用 WSL 自带的磁盘导出指令：\n# 先查询发行版的名称 wsl -l -v # 再导出磁盘到你想要的路径 # 例如：wsl --export Ubuntu-22.04 E:\\wsl-ubuntu22.04.tar wsl --export \u0026lt;虚拟机名称\u0026gt; \u0026lt;保存路径\u0026gt;\\\u0026lt;导出文件名\u0026gt;.tar 如果你和我一样这些都没法使用，那么你需要知道你的 WSL 的虚拟磁盘（ext4.vhdx）的位置，如果你没有移动过默认的位置就在%USERPROFILE%/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu22.04LTS_79rhkp1fndgsc/LocalState下。（复制到资源管理器地址栏回车可以直接打开）\n如果你之前修改或者迁移过磁盘位置请在自己修改的位置下寻找，例如我存放在E:\\WSL\\Ubuntu-22.04\\下。\n将这个虚拟磁盘复制或者移动出来，存放在你想要的位置。\n重装 WSL # 首先尝试完全卸载 WSL：\n前往设置（ +I）的应用-\u0026gt;应用和功能中，找到你的发行版对应的 App，然后点击「卸载」。如果你有安装过 WSL 升级包「Windows Subsystem for Linux Update」也请一起卸载。\n在控制面板-\u0026gt;程序-\u0026gt;程序和功能找到「启用或者关闭 Windows 功能」，找到「适用于 Linux 的 Windows 子系统」，取消勾选。接下来会提示你重启电脑，重启即可。\n接下来我们在重启过后重新安装 WSL 即可（其实就是将卸载的步骤倒过来进行一次）：\n在重新安装前先放一张流程图：\ngraph TD\rR1[重新启用 wsl 功能]\rR2[安装需要的发行版]\rS[wsl --shutdown]\rI[导入磁盘]\rJ1{何种方式卸载}\rE[wsl --import 导入]\rJ2{想要安装在什么地方}\rD1[复制 ext4.vhdx 到默认路径]\rD2[wsl --export]\rD3[wsl --import]\rD4[覆盖 ext4.vhdx]\rA[设置默认账户]\rR1 --\u003e R2 --\u003e S\rS --\u003e I\rI --\u003e J1\rJ1 --\u003e|通过 wsl --export 重装| E\rJ1 --\u003e|通过直接复制 ext4.vhdx| J2\rJ2 --\u003e|安装到默认位置| D1\rJ2 --\u003e|安装到其他位置| D2\rD2 --\u003e D3 --\u003e D4\rE --\u003e A\rD1 --\u003e A\rD4 --\u003e A\r在控制面板-\u0026gt;程序-\u0026gt;程序和功能找到「启用或者关闭 Windows 功能」，找到「适用于 Linux 的 Windows 子系统」，勾选。重启电脑。\n前往 Microsoft Store 安装你想要的 WSL 发行版。此时先不急着启动 WSL（「Windows Subsystem for Linux Update」似乎不需要再安装，因为我在wsl --version中发现没有安装我的 WSL 也是 WSL2）。\n安装虚拟磁盘：\n首先确认 WSL 关闭：wsl --shutdown\n导入磁盘：\n如果你是通过wsl --export重装WSL：\n导入磁盘备份：wsl --import \u0026lt;发行版名称\u0026gt; \u0026lt;目标文件夹\u0026gt; \u0026lt;备份磁盘路径\u0026gt;\\\u0026lt;备份磁盘文件名\u0026gt;.tar，例如：wsl --import Ubuntu-22.04 E:\\WSL\\Ubuntu-22.04 E:\\wsl-ubuntu22.04.tar.（如果你还是想安装在默认位置自己指定目标位置为默认的位置，在备份虚拟磁盘小节有提到）；\n如果是直接复制虚拟磁盘（ext4.vhdx）出来的话：\n先启动一次 WSL，再wsl --shutdown\n想放在默认位置的话先启动 WSL，在wsl --shutdown后直接将你复制备份的ext4.vhdx覆盖到默认位置就不用下面的导出再导入的操作了（默认磁盘位置备份虚拟磁盘小节有提到），直接跳到下一步；如果想指定安装位置就先启动一次 WSL 将新生成的磁盘在导出到你想要的 WSL 磁盘位置 # 先查询发行版的名称 wsl -l -v # 再导出磁盘到你想要的路径 # 例如：wsl --export Ubuntu-22.04 E:\\wsl-ubuntu22.04.tar wsl --export \u0026lt;虚拟机名称\u0026gt; \u0026lt;保存路径\u0026gt;\\\u0026lt;导出文件名\u0026gt;.tar # 导入到新位置 # 例如：wsl --import Ubuntu-22.04 E:\\WSL\\Ubuntu-22.04 E:\\wsl-ubuntu22.04.tar wsl --import \u0026lt;发行版名称\u0026gt; \u0026lt;目标文件夹\u0026gt; \u0026lt;备份磁盘路径\u0026gt;\\\u0026lt;备份磁盘文件名\u0026gt;.tar 然后直接将你自己复制在外面的ext4.vhdx覆盖到你的\u0026lt;目标文件夹\u0026gt;下。\n启动后你会发现使用的是默认的用户是 root，可以通过\u0026lt;发行版exe名\u0026gt; config --default-user \u0026lt;用户名\u0026gt;指定默认登录用户，例如：ubuntu2204 config --default-user he_tong\n结语 # 以上就是主要步骤了，重新启动 WSL 就会发现还是我们自己的 WSL，不用重新配置环境等等。\n","date":"2025 年 1 月 24 日","externalUrl":null,"permalink":"/posts/fixing-wsl-startup-issues/","section":"Posts","summary":"","title":"记录一下修复 WSL 无法启动的过程","type":"posts"},{"content":"","date":"2025 年 1 月 15 日","externalUrl":null,"permalink":"/tags/wepe/","section":"Tags","summary":"","title":"WePE","type":"tags"},{"content":"","date":"2025 年 1 月 15 日","externalUrl":null,"permalink":"/tags/windwos/","section":"Tags","summary":"","title":"Windwos","type":"tags"},{"content":" 开始之前 # 昨天帮小伙伴重装了一次系统，所以想着写（水）一篇博客。\n进入正题，其实重装系统有很多种方式，本篇使用的是最简单的重装方式，即使用 PE 系统进行重装系统，而 PE 选择的是比较广泛使用的 WePE。\n准备工作 # 重装系统需要格式化 C:\\ 盘，所以请务必在重装之前备份好自己 C:\\ 盘上的数据和资料，将这些数据放在 C:\\ 盘以外的盘即可。 在备份好自己的重要数据后就可以开始着手准备重装系统了，需要准备的有：\n已经备份好了的数据，请务必备份好数据，请务必备份好数据，请务必备份好数据 WePE（这是官网） Windwos 的 ISO包（这是 Windows 11 的下载官网、这是 Windows10 的下载官网，其他版本可以尝试在 MSDN 找到） 如果可以，有个 U 盘最好（可选） 如果使用 U 盘需要额外准备磁盘管理软件，这里我使用 DiskGenius（官网） 注意：WePE 下载下来不用急着运行，Winodws 下载选择下载ISO，Windows 11 下载的地方见下图， 如果 Windows 10 官网找不到ISO下载链接可以在 MSDN 下载\n安装 WePE（二选一） # 本教程大部分步骤都分为在 U 盘上安装 WePE 和直接在电脑上安装 WePE，请按照需求选择。如果是只是想给自己电脑重装一下建议选择直接在电脑上安装 WePE；而如果想帮助别人安装系统，或者有需要频繁重装系统的话建议选择安装 WePE 到 U 盘。小白请选择直接在自己电脑上安装即可 一）直接在电脑上安装 WePE # 直接在自己电脑上安装的话直接双击WePE_64_\u0026lt;版本号\u0026gt;.exe运行即可，如果有特殊需求请点击「立即安装到系统」按钮右边的展开，然后进行配置。\n点击「立即安装到系统」按钮后等待安装成功即可。\n二）安装 WePE 到 U 盘上 # 首先还是请备份 U 盘数据，放在其他存储介质或者除 C:\\ 盘以外的盘就行，在安装 WePE 前会格式化 U 盘，所以请务必备份好数据。\n打开 DiskGenius，在备份了 U 盘数据之后就可以直接选择清除 U 盘的分区和格式化等，文件格式什么的都无所谓\n直接修改分区大小，这里我使用的是 5GB，不知道最低需求，尽量空闲空间留 6GB 以上。\n分区完成后就可以开始安装 WePE 了，直接双击WePE_64_\u0026lt;版本号\u0026gt;.exe运行即可。\n运行后请不要直接点击「立即安装到系统」，在右下角「其他安装方式」有一个 U 盘标志的按钮，放在上面会有「安装 PE 到 U 盘」的提示，点击按钮。\n「安装方法」不用修改； 「待写入 U 盘」选择你自己的 U 盘即可，如果平时有移动硬盘或者其他 U 盘插在电脑上的话请仔细确认盘符和 U 盘型号是否正确； 「格式化」请勾选，后面选项不用，（如果不勾选大概率安装会失败）；U 盘卷标随喜爱修改，也可以默认； 「PE壁纸」可选修改，如果想修改建议选择和自己屏幕比例相同的图片，否则可能会有图片拉伸的情况； 其他三项除了「个性化盘符图标」随喜爱勾选，其他不用动，除非有特殊需求等。 配置结束后直接点击「立即安装 PE 到 U 盘」即可，此时会提醒你将格式 U 盘，确认自己已经备份好 U 盘中的数据后就可以直接点击「开始制作」，可以关闭安全软件，有的安全软件不关会有提示，允许即可。\n等待一小段时间后可以发现我们的 U 盘已经变成了一个 PE 启动盘，进入 DiskGenius 会发现我们的 U 盘还有一大部分空闲，直接格式化进行分区，接下来有用\n准备系统包（按照上一步二选一） # 一）直接在电脑上安装 # 将下载的系统ISO包放在非 C:\\ 盘的位置，并且自己能够记住和找到即可。\n二）使用 U 盘进行安装 # 上一步我们分配了空闲的空间，这个空间就是我们用来放系统的，可以多放几个常用的系统，你就可以当重装系统大师了😝\n开始安装系统（无论 U 盘还是自己电脑上的 WePE） # 以上工作全部完成了后就可以重启电脑了（使用 U 盘的记得插上 U 盘）。\n重启后就会看到这个选系统的页面，选择「微 PE 工具箱」即可。\n接下来就会进入 WePE 的主界面，找到「Windows 安装器」，双击运行。\n运行了后在顶部先选择准备安装的系统版本，Win10 和 Win11 选择右侧的「Windwos Vista/7/8/10/11/2008/20XX」\n「选择安装映像位置」点击右侧「选择」按钮，选择你上一步准备的系统ISO包的位置即可； 「选择可引导驱动器位置」和「选择安装驱动器的位置」都选择 C:\\ 盘即可； 下面选项我可以选择系统类型是因为我的包有所有版本的系统，请按需进行选择 「启动模式」请选择有绿灯的选项即可，其余选项按需选择，不知道的选项不要动。 点击右下角「安装」开始安装，等待安装结束。\n重装系统之后 # 重启 WePE，然后正常进入系统即可，和第一次进入系统一样进行系统配置，例如登 Microsoft 帐号、连接网络等等。\n接下来请自行更新驱动和创建软件链接等，部分强制安装在 C:\\ 盘的软件需要重新安装，在设置中就可以更新大部分驱动。\n如果你是直接安装 WePE 在系统中的，觉得系统ISO包太大占空间的话可以自行删除ISO。\n","date":"2025 年 1 月 15 日","externalUrl":null,"permalink":"/posts/windows-reinstallation/","section":"Posts","summary":"","title":"使用 WePE 重装 Windows 系统","type":"posts"},{"content":"","date":"2025 年 1 月 15 日","externalUrl":null,"permalink":"/tags/%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85/","section":"Tags","summary":"","title":"系统重装","type":"tags"},{"content":"","date":"2025 年 1 月 12 日","externalUrl":null,"permalink":"/tags/steamcmd/","section":"Tags","summary":"","title":"SteamCMD","type":"tags"},{"content":"","date":"2025 年 1 月 12 日","externalUrl":null,"permalink":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/","section":"Tags","summary":"","title":"服务器","type":"tags"},{"content":"","date":"2025 年 1 月 12 日","externalUrl":null,"permalink":"/tags/%E6%B8%B8%E6%88%8F/","section":"Tags","summary":"","title":"游戏","type":"tags"},{"content":" 前言 # 本文是在 Ubuntu 22.04 LTS 上面进行的，其他 Linux 发行版可以大致参考 最近闲得没事搭了 Rust 和幻兽帕鲁的服务器，再加上之前还搭过僵尸毁灭工程的服务器，所以在这里总结着写一下 Steam 上面的 部分支持玩家自己搭建服务器的通用方法。\n大致的思路就是通过安装 SteamCMD，然后在 SteamCMD 上面安装自己需要的游戏服务器，再运行对应的服务器。就类似于我们在 Steam 上玩游戏的过程。\n你可以先在 SteamDB 上寻找你想要搭建的服务器是否有 Linux 版本，例如 幻兽帕鲁：搜索后可以看到「Palworld Dedicated Server」这一项，鼠标放在上面就会显示「System」后面有一个 Linux 的标志。\n创建新 Linux 用户 # 游戏服务器十分推荐在非 root 用户下搭建，所以我们先创建一个新的用户（root 用户下），当然如果你有自己的用户可以直接在你的用户下进行，而不用新建用户：\n创建新用户：useradd -m -s /bin/bash \u0026lt;用户名\u0026gt;，例如：useradd -m -s /bin/bash Steam\n修改用户密码：passwd \u0026lt;用户名\u0026gt;，例如：passwd Steam\n接下来直接转到这个新的用户就行：su \u0026lt;用户名\u0026gt;，例如：su Steam\n安装 SteamCMD # 接下来我们需要安装 SteamCMD，Ubuntu 的安装比较简单。\n更新软件包\nsudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade -y 尝试直接安装 SteamCMD：sudo apt install steamcmd\n接下来会有两种情况：\n① 安装失败，提示没找到 SteamCMD 包（Ubuntu 22.04 和以上大概率是这个）那么继续下面步骤；\n② 直接安装成功，那么可以直接跳到下一节了\n如果安装失败就需要安装依赖环境\nsudo add-apt-repository multiverse sudo dpkg –add-architecture i386 sudo apt update sudo apt install lib32gcc-s1 libcurl4-gnutls-dev:i386 lib32stdc++6 lib32z1 -y 环境安装成功后再次尝试安装 SteamCMD：sudo apt install steamcmd\n安装游戏服务器 # 在 SteamDB 上找到你需要的游戏服务器的 Steam App ID，例如幻兽帕鲁的 ID 就是2394010，记下来。\n运行 SteamCMD，直接输入steamcmd然后回车运行就行，国内服务器第一次运行需要时间可能比较长（我用了将近一个小时）。\n接下来匿名登录 SteamCMD：login anonymous\n下载游戏服务器：app_update \u0026lt;steam_app_id\u0026gt;，例如安装幻兽帕鲁：app_update 2394010，等待安装结束\n大部分游戏需要Steamworks SDK，直接输入app_update 1007回车等待安装结束\n没有别的需求或者想要安装其他游戏的话就可以直接输入quit退出 SteamCMD 了\n运行服务器 # 和我们在 Steam 上安装的游戏一样，游戏默认都安装在~/Steam/steamapps/common/这个文件夹里。\n进入后找到你的游戏对应的二进制或者脚本文件运行即可\n记得配置你的游戏对应的配置文件和开启游戏需要的端口防火墙～\n最后欢迎大家来我 HXD 搭的 Rust 服务器来玩：「汇率」寒假开荒服 | 萌新 | 禁抄家」，IP 连接：150.138.92.107:38815\n","date":"2025 年 1 月 12 日","externalUrl":null,"permalink":"/posts/install-steamcmd-on-your-linux-server-and-setup-game-server/","section":"Posts","summary":"","title":"在你的 Linux 服务器上安装 SteamCMD 并搭建游戏服务器","type":"posts"},{"content":"","date":"2024 年 12 月 23 日","externalUrl":null,"permalink":"/tags/cdn/","section":"Tags","summary":"","title":"CDN","type":"tags"},{"content":"","date":"2024 年 12 月 23 日","externalUrl":null,"permalink":"/tags/github-page/","section":"Tags","summary":"","title":"Github Page","type":"tags"},{"content":"","date":"2024 年 12 月 23 日","externalUrl":null,"permalink":"/tags/%E5%A4%9A%E7%BA%BF-dns/","section":"Tags","summary":"","title":"多线 DNS","type":"tags"},{"content":"","date":"2024 年 12 月 23 日","externalUrl":null,"permalink":"/tags/%E5%BB%BA%E7%AB%99/","section":"Tags","summary":"","title":"建站","type":"tags"},{"content":" 前言 # 这个博客是托管于 Github Page 的，所以在国内的一些地区访问速度很慢甚至直接没法正常访问，所以我尝试了使用一些方法来解决这个问题。\n介绍 # 我使用的方法中最核心的东西就是 CDN (Content Delivery Network) 即内容分发网络。大致原理就是将我们的源网站的内容给分发到许多地区的许多服务器上面（所以 CDN 也可以防止自己网站的源 IP 被发现）。那么我们就可以通过 CDN 将我们的 Github Page 的内容分发到国内的服务器上面。\n思路大致就是将国内外的 DNS 解析线路分为两条——国内和国外。国内解析到 CDN 上面，而国外直接访问 Github Page\n当然你也可以选择直接使用 Cloudflare 的解析代理来实现，但是 Cloudflare 在国内的访问速度也不是很理想。这里可以看看下面几张对比图：\nGithub Page直连 Cloudflare 双线 DNS + CDN 从上面对比可以明显看出使用双线 DNS + CDN 是几乎全球都解析最快的方案。而直接访问 Github Page 在很多地区出现了访问超时的问题。Cloudflare 虽然只有个别地区访问超时但是国内大部分地区访问速度很慢。\n准备 # 你的 Github Page 地址（例如我的：hetongre4per.github.io） 一个国内的 CDN （因为我加入了又拍云联盟，所以使用的是免费的又拍云 CDN） DNSPod 帐号（或者其他的 GeoDNS） 另一个 DNS 服务商（我这里是 Cloudflare，并没有 GeoDNS 功能。你也可以只使用 DNSPod） 一个已经备案的域名（似乎国内 CDN 都需要，我的就是本站的域名 hetong-re4per.com） 开始 # 配置 CDN # 因为我使用的是又拍云 CDN ，所以这里使用又拍云作为演示。如果你使用的是其他品牌的 CDN 可以在互联网上查找对应的教程。 首先我们需要配置好自己的 CDN。打开又拍云的控制台，在主界面（总览）中可以找到「CDN」这个基础产品，直接选择「创建服务」（点击这里直接跳转）。\n服务名称随意，加速域名填入你自己的已经备案的域名，应用场景选择「全站加速」。\n源站配置这里需要注意，你需要知道你的 Github Page 给你分配的 IP，你可以使用 ITDog 的多地 Ping 工具来获取。例如我的就可以看出来 Github 给我分配的 IP 是 185.199.108.153、185.199.109.153、185.199.110.153和 185.199.111.153。然后回到又拍云，回源协议选择「https」，源站证书校验「关」。接下来直接将你的四个 IP 分别填入源站地址就行。\n创建完毕后进入到对应的 CDN 控制台，找到「回源管理」，然后在下面的「回源 Host」中填入你的 Github Page 地址。（注意：如果你修改了Github Page 地址就填你修改后的这个地址，例如我在 Page 中填的www.hetong-re4per.com这里也要填这个）\n接下来你需要为你的 CDN 申请 SSL 证书（似乎是必须的，不然访问会一直有问题）。在又拍云的「总览」-「增值服务」中找到「SSL 证书服务」（点击这里直接跳转）。选择「申购证书」：\n证书品牌 证书类型 有效期限 证书域名类型 域名数量 Let\u0026rsquo;s Encrypt 域名型(DV) 自动续签 单域名证书 1 个 然后按照要求补全信息并添加 CNAME 验证后等待证书审核和颁布。\n颁布下来之后在你的 CDN 的管理面板中找到「HTTPS」，在「HTTPS配置」项点击「管理」。开启 https 访问并强制 https 访问即可。\n回到 CDN 的「域名管理」，复制「CNAME」备用。\n配置多线 DNS # 因为我的网站是托管在 Cloudflare 上面的，所以想要使用 DNSPod 的多线解析需要将域名解析到 DNSPod 上。但是 DNSPod 支持解析子域名，所以我用了一个小技巧可以不用将我的整个域名解析到 DNSPod 上。\n首先在 DNSPod 中添加你的子域名，例如我的「www.hetong-re4per.com」。然后进入域名的管理面板，找到「解析设置」，这里面会给你两个 DNS 服务器地址，复制下来为下一步准备。\n打开你自己根域名的 DNS 托管商，添加以下解析规则（DNSPod 给的两个都加上）：\n类型 名称 名称服务器 TTL NS www (这里填你自己的第三级) 你在 DNSPod 上给你分配的 DNS 服务器 默认 (自动) 添加完后刷新 DNSPod 的网页就可以发现成功开始解析了。（如果没成功等几分钟点击一下状态这一项的「暂停」然后按要求验证就行）\n成功后就在 DNSPod 中添加两条规则：\n注意线路类型，是不同的两条线 主机记录 记录类型 线路类型 记录值 TTL @ CNAME 境内 填入你在你的 CDN 服务商拿到的 CNAME 地址 默认（600） @ CNAME 境外 填入你的 Github Page 地址。例如我的 hetongre4per.github.io 默认（600） 接下来等待解析记录生效即可，你可以使用 ITDog 的多地 Ping 工具来检查是否生效。\n这个就是我的最终成果，希望你也可以成功配置自己的 CDN。\n","date":"2024 年 12 月 23 日","externalUrl":null,"permalink":"/posts/cdn-for-your-github-page/","section":"Posts","summary":"","title":"使用双线 DNS 和 CDN 加速你的 GitHub Page","type":"posts"},{"content":"","date":"2024 年 11 月 28 日","externalUrl":null,"permalink":"/tags/%E4%B8%B2%E6%B5%81/","section":"Tags","summary":"","title":"串流","type":"tags"},{"content":"","date":"2024 年 11 月 28 日","externalUrl":null,"permalink":"/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/","section":"Categories","summary":"","title":"实用教程","type":"categories"},{"content":" 前情 # 因为对象买了个投影仪，平时会使用投影仪看看视频之类的。有一天突发奇想想用投影仪 + 手柄一起玩游戏，于是尝试了系统自带的 miracast。这个 miracast 非常神奇，在桌面静止不动的时候会糊，但是在有动态内容的时候反而会变的清晰。而使用安卓手机或者苹果的 AirPlay 进行投屏时就不会有这种问题。于是果断放弃了使用 miracast 的想法。\n然后转去了解无线 HDMI 投屏器了，但是这个价格让人望而却步。于是还是想使用软件来解决这个问题，找到了 Sunshine + Moonlight 的方案。\n简单介绍 # 其实这个方案并不是使用标准的 WHDI 或者Wireless HD 协议，而是通过串流的形式进行的。所以，你可以在你的被投端插上手柄或者键鼠进行远程操控（没错，和向日葵或者 Pasec 一样），甚至还可以使用公网 IPv6 或者内网穿透实现远程串流。\n准备 # Sunshine 本体 LizardByte/Sunshine Self-hosted game stream host for Moonlight. C\u0026#43;\u0026#43; 23023 1097 Moonlight 本体（电视或者安卓设备有 root 权限的选择app-root-release.apk\r，没有的选择app-nonRoot-release.apk\r）（可以在 Moonlight Game Streaming Project 这个项目组查看其他系统的） moonlight-stream/moonlight-android GameStream client for Android C 4735 753 电视或者投影仪需要安卓系统并且可以安装第三方软件\n投屏端和被投端在同一个局域网下，或者服务端有公网 IP\nSunshine 配置 # 安装好 Sunshine，在任务栏的小抽屉中找到 Sunshine 的图标，右键选择「Open Sunshine」。\n首次启动需要设定用户名和密码，设置好后点击「Login」按钮进行登录，成功会有提示。然后等待网页刷新后就会进入面板。\n在顶部找到「Configuration」选项，然后在「General」中找到「Locale」选择「简体中文」，点击底部「Save」保存后重启 Sunshine 即可。\n接下在重新进入 Sunshine 面板后可能会提示Fatal: ViGEmBus is not installed or running. You must install ViGEmBus for gamepad support，其实不用特别在意，但是如果想要解决的话可以前往下面仓库选择合适的版本进行下载安装然后再重启 Sunshine 即可。\nnefarius/ViGEmBus Windows kernel-mode driver emulating well-known USB game controllers. C\u0026#43;\u0026#43; 3395 312 其余的设置你可以自己在「配置」中进行设置。但先不要关闭浏览器（配置好 Moonlight 后就可以关了，浏览器的页面只是一个面板，实际运行不依赖浏览器）。\nMoonlight 配置 # 如果你想要在智能电视上使用可以通过 U 盘将安装包传输到电视（有的电视需要开启允许未经授权的应用安装）。\n安装好后启动应用会发现自己的电脑有一个锁的标志，点击后就会让你在 Sunshine 上输入 Pin 码，在电脑上的 Sunshine 控制面板找到「Pin」然后输入电视提示的 Pin 码然后点击「发送」即可。\n成功连接后就可以选择启动的项目了，你还可以在 Sunshine 的「应用程序」中添加自己想要可以快捷启动的项目。\n其次，如果你觉得串流画面很卡或者声音卡顿可能是你的路由器遇到了瓶颈，可以通过在 Moonlight 的设置中修改修改码率。\n如果想要串流时被投端也可以同时播放声音请在设置中勾选「在电脑上播放声音」，当然如果想要更高画质或者帧率或者其他设置也可以在设置中找到。\n","date":"2024 年 11 月 28 日","externalUrl":null,"permalink":"/posts/computer-to-tv-wireless-cast-with-sunshine-and-moonlight/","section":"Posts","summary":"","title":"使用 Sunshine + Moonlight 进行电脑到电视无线投屏","type":"posts"},{"content":"","date":"2024 年 11 月 28 日","externalUrl":null,"permalink":"/tags/%E6%97%A0%E7%BA%BF%E6%8A%95%E5%B1%8F/","section":"Tags","summary":"","title":"无线投屏","type":"tags"},{"content":"","date":"2024 年 11 月 28 日","externalUrl":null,"permalink":"/tags/%E6%99%BA%E8%83%BD%E7%94%B5%E8%A7%86/","section":"Tags","summary":"","title":"智能电视","type":"tags"},{"content":" 前因 # 之前写过一个艾尔登法环的无缝联机 MOD 工具，可以快捷转换在线版和 MOD 版存档，还可以修改一些 MOD 的设定。后来有一个小伙伴发邮件寻问我是否可以在软件中添加一个功能：因为 MOD 物品在在线版中算作弊物品，所以想在 MOD 版转为在线版存档时通过直接修改存档数据删除其中的 MOD 物品，从而实现可以无缝转换存档。\nHeTongRe4per/EldenRingSeamlessCoopTool 一个艾尔登法环无缝联机Mod工具 C# 4 0 因此我在网上搜索了一下一些资料，找到了一些项目有类似的功能，知道了例如查物品数据和修改的大概实现方式。但是在互联网上没有什么人详细写过，所以想写这篇希望能帮到人。\n准备 # 只适用于单机游戏，请不要在线上游戏中尝试作弊。 如果你能找到这篇文章我就默认你是有一定基本知识了，例如 16 进制是什么，你想要修改的物品 ID 是多少等等。\n需要准备的工具和文件：\nHex 修改工具，例如常用的 HxD 或者 VS Code 搭配 Hex Editor 插件（十分推荐使用 HxD） 游戏存档 游戏存档备份（最好进行一下备份，防止修改后出现问题无法逆转） 一份物品 ID 表（你需要知道你修改的物品的 ID 是多少） 本文将以埃尔登法环的存档作为示例，使用到的修改器是 HxD。\n确定物品 ID # 首先找到物品的 ID，例如我需要修改的是 MOD 添加的物品，它们本来不属于游戏内容，所以我在 MOD 的 FAQ 中找到了 MOD 添加的几个物品的 ID。\n我这里 MOD 作者物品的 ID 给的是 10 进制，需要将其转为 16 进制备用。\n物品名称 10 进制 ID 16 进制 ID 袖珍大壶 8380001 7FDE61 玛莲妮亚雕像 8380002 7FDE62 挑战者之针 8380003 7FDE63 离别迷雾 8380004 7FDE64 判官的法典 8380005 7FDE65 卢恩之酒 8380006 7FDE66 使用编辑器寻找物品 # 上一步我们已经知道了物品的 16 进制 ID，现在需要在存档中找到物品对应的位置。\n在这里我们需要知道一个小常识，一般的游戏存档为了方便计算机的读取、编辑和兼容性，存档多以小端序存储，所以我们拿到的 16 进制 ID 并不能直接使用，需要按小端序排列。例如袖珍大壶的 ID 7FDE61，在搜索时应该搜索61DE7F。\n现在我们搜索到了4 个有袖珍大壶 ID 的位置，分别在11219、1604D、16A15和218F1处。一个小知识：艾尔登法环人物数据包括人物的背包数据是存储在310 - 28030F这一段中的，其他位置请不要随意修改。\n那么我这里这 4 个数据都是有效的。那就继续下一步。\n开始修改 # 接下来我们又需要知道一个小知识，艾尔登法环的物品 ID 后面会有一位添加一个随机值为间隔，后面就为物品数量。\n示例：\n所以如果想要修改物品数量那么直接修改从 ID 往后数两位的位置的值就行。但是我需要删除这些物品，那么直接将这一部分，即61 DE 7F B0 01这一部分全部置零即可。\n修改校验和 # 继续一个小知识：艾尔登法环会将人物的数据整合计算一个 MD5 值，并存放在300 - 30F这一段。\n所以我们需要将修改后的310 - 28030F这一段数据计算并修改 MD5。\nCtrl + E，起始位置和终止位置分别输入310和28030F 在顶部菜单栏选择「分析」-\u0026gt;「检验和」 可用算法翻到最下面，选择「MD-5」 从底部「校验和」中右键复制 MD5 校验和\nCtrl + E，起始位置和终止位置分别输入300和30F，确认后右键选择「覆盖式粘贴」\n进入游戏验证 # 最后进入存档文件夹，删除所有存档（记得先备份）。将我们修改好的存档放进去，发现 MOD 物品消失了！（这里删的时候漏了一个）\n修改前 修改后 参考与鸣谢 # 艾尔登法环无缝联机 MOD - ER Seamless Coop Reddit r/PiratedGames 下 u/Danger_Fox_ 的帖子 - Elden Ring cracked game save to Steam 哔哩哔哩 幸运锦兰 的专栏 - 血源存档修改器的简单应用（物品修改篇） ","date":"2024 年 11 月 1 日","externalUrl":null,"permalink":"/posts/how-to-modify-game-data-by-modifying-game-save-hex/","section":"Posts","summary":"","title":"艾尔登法环通过修改游戏存档 16 进制值来修改游戏数据","type":"posts"},{"content":"","date":"2024 年 11 月 1 日","externalUrl":null,"permalink":"/tags/%E5%AD%98%E6%A1%A3%E4%BF%AE%E6%94%B9/","section":"Tags","summary":"","title":"存档修改","type":"tags"},{"content":"","date":"2024 年 10 月 30 日","externalUrl":null,"permalink":"/tags/obs/","section":"Tags","summary":"","title":"OBS","type":"tags"},{"content":" 前因 # 因为平时会给对象直播玩彩虹六号或者黎明杀机，但是这两个游戏都是没法直播的，所以直播都是使用的腾讯会议。但是腾讯会议有一些问题，例如在游戏内会显示很多影响操作的小工具栏或者是画质不好或者是有时游戏声音无法录到直播中。\n而使用 OBS 直播自定义程度高，可以布置直播场景等等等等了，并且没有腾讯会议的小工具箱，不会误触了。\n原理说明 # 因为腾讯会议无法直接使用 OBS 进行推流，所以是使用虚拟摄像头推送视频配合 VB-CABLE 虚拟声卡推送声音的方式推送到腾讯会议中，因此理论上所有无法直接使用 OBS 推流但是可以使用摄像头的软件都可以使用这个方式进行屏幕共享。\n而你的会议中需要说话就集成在了 OBS 中。\n以下为图示：\nflowchart TD\rA(屏幕) --\u003e D[OBS]\rB(麦克风) --\u003e D[OBS]\rC(游戏声音等) --\u003e D[OBS]\rD[OBS] --\u003e|视频| E(OBS 虚拟摄像头)\rD --\u003e|声音| F(VB-CABLE 虚拟声卡)\rE --\u003e G(腾讯会议摄像头)\rF--\u003e H(腾讯会议麦克风)\rG --\u003e I[腾讯会议推流]\rH --\u003e I\r准备 # 你需要下载以下软件：\nOBS Studio（Steam 版或者官网版）（两个版本都是官方的版本，按需选择。不知道选哪个就选官网） OBS 虚拟摄像头插件（原版或者维护版，因为原来的版本已经有两年以上没有更新了，所以推荐使用维护版。另外，请下载直接安装版，名称含有Installer字样） VB-CABLE 虚拟声卡软件，进入官网后直接选择「Download」按钮即可。 腾讯会议（或者其他无法直接使用 OBS 推流的应用） 配置 OBS 场景 # 安装 OBS Studio，无论从 Steam 上安装或者直接从官网下载安装。\n安装完成后按需布置 OBS，如果完全不会 OBS 可以参考这一篇文章来配置自己的直播场景。以下是我的 OBS 配置\n配置好直播场景后就可以开始配置虚拟摄像头和虚拟声卡了。\n虚拟摄像头 # 打开你刚刚下载的虚拟摄像头插件安装软件。首先是使用协议，下一步即可；接下来是选择安装几个虚拟摄像头，我只需要一个故选择「1」；然后是选择安装位置，请务必选择 OBS Studio 所在的文件夹，注意是 OBS Studio 所在的文件夹，不是 OBS 插件文件夹；最后点击「安装」即可。\n如果你的 OBS 版本较新并且安装的是原版插件（还在维护那个版本没有这个问题），可能启动 OBS 后会弹出「插件载入出错，以下 OBS 插件加载失败:obs-virtualoutput」的警告，不需要管。你只需要看看控制按钮中有没有「启用虚拟摄像机」这个按钮就行。如果你觉得每次弹出这个警告很烦可以去 OBS 插件的文件夹中找到obs-virtualoutput.dll然后删除。\n但是如果没有找到「启用虚拟摄像机」这个按钮就需要进行完整性验证。\nSteam 版直接右键 OBS Studio 选择「属性」，选择「已安装文件」菜单，点击「验证软件文件完整性」按钮 官网版直接再安装一次 OBS Studio 虚拟声卡 # 打开你刚刚下载的 VB-CABLE 虚拟声卡软件压缩包，解压到需要的位置，然后双击其中的VBCABLE_Setup_x64.exe，再点击「Install」。安装结束后重启一次电脑。\n接下来进入 OBS，右键混音器选项卡，有一个「高级音频设置」。打开后将「音频监听」全部选择或者将你需要的设备选择「监听并输出」。\n打开 OBS 设置，在「音频」菜单中找到「高级」这一大项，将「监听设备」选择为「CABLE In 16ch (VB-Audio Virtual Cable)」。\n腾讯会议设置 # 接下来尝试在腾讯会议中进行直播。\n首先在 OBS 中选择「启动虚拟摄像机」\n进入腾讯会议，创建会议，打开视频，摄像头选择「OBS Virtual Camera」；\n打开麦克风，选择「CABLE Output (VB-Audio Virtual Cable)」\n如果不确定声音是否正常可以在腾讯会议的「设置」-\u0026gt;「音频」找到麦克风进行「检测麦克风」。如果没有画面只有一个 OBS 的 Logo 请检查是否在 OBS 中开启了虚拟摄像头。\n其他可能的问题 # 如果发现视频很模糊，像有一层模糊图层请在腾讯会议的「设置」-\u0026gt;「虚拟背景及特效」中将虚拟背景选择为「不使用」。\n如果被告诉人的声音太大，软件或者游戏声音太小请在腾讯会议「设置」-\u0026gt;「音频」中将「音频降噪与增强」选择为「音乐与专业音频」，然后在会议顶部选择为「音乐模式：已开启」。\n","date":"2024 年 10 月 30 日","externalUrl":null,"permalink":"/posts/shared-screencasts-with-obs-and-voov-meeting/","section":"Posts","summary":"","title":"使用 OBS 和腾讯会议实现屏幕共享直播","type":"posts"},{"content":"","date":"2024 年 10 月 30 日","externalUrl":null,"permalink":"/tags/%E8%99%9A%E6%8B%9F%E6%91%84%E5%83%8F%E5%A4%B4/","section":"Tags","summary":"","title":"虚拟摄像头","type":"tags"},{"content":"","date":"2024 年 10 月 30 日","externalUrl":null,"permalink":"/tags/%E7%9B%B4%E6%92%AD/","section":"Tags","summary":"","title":"直播","type":"tags"},{"content":"","date":"2024 年 10 月 6 日","externalUrl":null,"permalink":"/tags/openwrt/","section":"Tags","summary":"","title":"OpenWrt","type":"tags"},{"content":" 前言 # 我的这一篇文章说到了如何使用 hugo + github page 搭建自己的静态网站，但是每次都需要我们手动生成一次然后手动推送。而我又是用的源文件和生成文件分离的仓库，所以每次推送需要进行两次。在尝试使用 Github Actions 自动云编译 OpenWrt 的时候就想到还可以用来自动直接使用 Action 生成 Hugo 静态文件然后推送到我的 HeTongRe4per/HeTongRe4per.github.io 这个仓库中。\n简单了解 # Github Actions 是一个集成了许多操作的工具，可以帮助你实现自动化部署，测试，消息通知，定时任务 etc. 。实现方式是通过在一个或者多个虚拟机中按流程运行制定的指令。而 workflow 文件就相当于 Action 运行的脚本，哪一步改做什么，运行什么指令都是由你写在这个文件中的，你可以借助 ChatGPT 等人工智能来帮助你编写 workflow 文件。但十分建议看看这个视频：GitHub Actions工作流自动化的入门核心\nTL;DR # 直接跳转到 我的 workflow 这一步复制下来我的 workflow 然后创建一个 workflow 在.github/workflow/文件夹下创建一个deploy.yml，将我的文件粘贴进去； 确认自己主题和public/文件夹是否已经引入.gitmodules文件； 跳转到 创建和导入密钥 这一步创建密钥； Push 到源仓库。 开始 # 首先我们要清楚我们在使用 hugo 建站时的基本步骤：\n安装 hugo 安装主题 调整页面，编写文章等 使用hugo指令生成静态页 进入生成的静态页文件夹public/推送到 Github Page 仓库中 现在我们知道了基本的步骤，而使用 Github Actions 实现自动化就是按照这个思路来撰写 workflow 文件。\n整篇文章我将使用我自己的博客源代码仓库和 Page 仓库作为示例。 例如我网页的源代码存放在HeTongRe4per/Blog这个private仓库，而我实际的网页存放在HeTongRe4per/HeTongRe4per.github.io这个public仓库。\nHeTongRe4per/HeTongRe4per.github.io HTML 0 0 我想要实现的效果是每次只需用将我修改的网站源文件直接 Push 到HeTongRe4per/Blog这个源文件仓库中，然后源文件仓库的 Action 就开始下载 hugo，然后获取主题。获取到主题后就直接使用hugo指令生成静态页面到public/这个文件夹。接着将这个文件夹的内容全部 Push 到HeTongRe4per/HeTongRe4per.github.io这个仓库中就行了。因为使用\u0026lt;***.github.io作为仓库名时 Github 会自动将仓库中的文件自动进行发布当然也是使用的 Action，就不用我们自己编写 workflow 了。\n撰写 workflow # YML 或者说 YAML 对格式的要求十分严格，可以参照 维基百科 - YAML 或者直接使用 YAML 格式检查工具 进行格式检查 创建 workflows 文件 # 首先我们需要在需要进行 Action 的仓库中创建一个文件夹.github/workflows/，这个文件夹专门用来存储运行 Action 的脚本，放在别的地方都是不能生效的。然后创建文件\u0026lt;文件名\u0026gt;.yml，其中文件名自己使用一个有辨识度的名字就行，但文件格式必须为.yml。\nworkflow 基本属性 # 接下来我们就需要告诉 Action 它的名字、运行条件和使用的仓库分支等了：\nname: \u0026lt;运行的时候显示的 Action 名字\u0026gt; on: push: branches: - \u0026lt;分支名，一般为 main\u0026gt; 其中name后填运行时的 Action 名字；on后接运行条件，这里的条件就是接受到push时运行；运行的分支branches填入需要进行 hugo 的分支，一般都是main。\n添加 Jobs # 填入了基本的内容后就需要创建 Job 了，填入作业名字，然后选择运行的平台：\njobs: \u0026lt;job名字\u0026gt;: runs-on: \u0026lt;运行平台\u0026gt; 作业步骤 # 接下来就需要告诉 Action 这一个 Job 的作业流程了：\njobs: \u0026lt;作业名字\u0026gt;: runs-on: \u0026lt;运行平台\u0026gt; steps: - name: \u0026lt;步骤名字-1\u0026gt; uses: \u0026lt;使用的工作流模版-1\u0026gt; run: \u0026lt;需要运行的指令-1\u0026gt; with: \u0026lt;工作模版的额外参数-1-1\u0026gt; \u0026lt;工作模版的额外参数-1-2\u0026gt; - name: \u0026lt;步骤名字-2\u0026gt; uses: \u0026lt;使用的工作流模版-2\u0026gt; run: \u0026lt;需要运行的指令-2\u0026gt; with: \u0026lt;工作模版的额外参数-2-1\u0026gt; \u0026lt;工作模版的额外参数-2-2\u0026gt; 以模块形式导入主题文件和 public 文件夹 # 如果你是按照我的搭建 Github Page 的教程进行搭建的话就只需要将public/导入子模块就行，如果不是的话就需要你将以前的主题文件夹先删除，然后使用下面指令以子模块形式导入主题。\ngit submodule add \u0026lt;仓库地址\u0026gt;.git themes/\u0026lt;主题名\u0026gt; 例如我的：\ngit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 接下来添加public/文件夹，修改站点根目录下的.gitmodules添加以下这一段就行：\n[submodule \u0026#34;public\u0026#34;] path = public url = \u0026lt;你 Page 的仓库地址\u0026gt; 例如我的.gitmodules：\n[submodule \u0026#34;themes/blowfish\u0026#34;] path = themes/blowfish url = https://github.com/nunocoracao/blowfish.git branch = main [submodule \u0026#34;public\u0026#34;] path = public url = https://github.com/HeTongRe4per/HeTongRe4per.github.io 创建和导入密钥 # 因为我们如果想要跨仓库推送，而 Action 本身只有自己仓库的操作权限，所以我们需要给 Action 一个可以跨仓库推送的token。\n前往 GitHub 的 个人访问令牌设置页面 点击「生成新令牌」（Generate new token），选择「生成新 Token（classic）」 「Token name」自己填一个有辨识度的即可，「Expiration」选择「No expiration」，「Select scopes」勾选「repo」和「workflow」 点击最底下的「Generate token」按钮，将会显示里的token，点击右边的复制按钮复制下来。注意，这个token只会显示一次，请务必复制下来保存好 打开源文件的仓库「Settings」-\u0026gt;「Secrets and variables」-\u0026gt;「Actions」，点击 「New repository secret」 将「NAME」设为你希望的名称 将第四步生成的个人访问令牌粘贴到「Value」字段中。 我的 workflow # 那么按照以上步骤，就可以写出来我们自己的 workflow 了，注意，第 30 行和 32 行肯定需要修改的，第 30 行的密钥名称PUBLIC需要修改为创建和导入密钥这一步中最后设定的名字；第 32 行仓库地址改为自己的 Page 页的仓库地址：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 name: Deploy to GitHub Pages on: push: branches: - main jobs: build: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v2 with: submodules: true # 使用子模块 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true # 使用 extended 版 hugo - name: Build the website run: hugo --gc --minify --cleanDestinationDir # 这里我加了附加参数，可以不需要 - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PUBLIC }} # PUBLIC 请改为你设置的 Secret 名称 publish_dir: ./public external_repository: HeTongRe4per/HeTongRe4per.github.io # 改为你自己的仓库 publish_branch: main # push 的仓库的分支 最后 # 以上全部完成后直接进行 push 就行：\n# 添加所有文件到 git 缓存 git add . # 添加提交描述 git commit -m \u0026#34;\u0026lt;提交说明\u0026gt;\u0026#34; # 进行推送 git push -u origin \u0026lt;分支名，一般是main\u0026gt; 然后进入你的仓库 Action，就可以看见运行情况了。橙色是在运行中，蓝色的勾代表成功，红色的小叉代表失败。\n当然你可以使用这个方法给你的 OpenWrt 实现自动云编译，不需要服务器，不需要外网环境。\nHeTongRe4per/OPi-R1-Plus-LTS-OpenWrt For OrangePi R1 Plus LTS C 0 0 我就直接放我的脚本吧（肯定不能直接照抄，里面很多参数都是我有部分个性化的）：\nname: Build OpenWrt on: push: branches: - openwrt-21.02 pull_request: branches: - openwrt-21.02 workflow_dispatch: jobs: build: runs-on: ubuntu-22.04 permissions: contents: write steps: - name: Checkout repository uses: actions/checkout@v3 with: submodules: true - name: Show git config run: | git config --list git branch -a - name: Set up Build Environment run: | sudo apt-get update sudo apt-get install -y gcc binutils bzip2 flex python3 perl make grep unzip swig gawk subversion libz-dev libc-dev rsync libncurses5-dev libncursesw5-dev libpam0g-dev liblzma-dev libsnmp-dev libnetfilter-queue-dev liblzma-dev libpam0g-dev - name: Modify CMakeLists.txt for UA2F run: | sed -i \u0026#39;s/set(CMAKE_C_STANDARD 17)/set(CMAKE_C_STANDARD 11)/\u0026#39; package/build-ext/UA2F/CMakeLists.txt - name: Compile OpenWrt run: | ./scripts/feeds update -a ./scripts/feeds install -a make defconfig make -j$(nproc) - name: Upload Build Artifacts uses: actions/upload-artifact@v3 with: name: openwrt-build path: | bin/targets/rockchip/armv8/** if-no-files-found: error exclude: | bin/targets/rockchip/armv8/packages/** - name: Set Tag Prefix run: echo \u0026#34;TAG_PREFIX=$(date +\u0026#39;%Y%m%d%H%M\u0026#39;)\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV - name: Create Release id: create_release uses: actions/create-release@v1 env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} with: tag_name: openwrt-build-${{ env.TAG_PREFIX }} release_name: OpenWrt Build ${{ github.run_number }} draft: false prerelease: false - name: Upload files to release env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} run: | RELEASE_TAG=\u0026#34;openwrt-build-${{ env.TAG_PREFIX }}\u0026#34; find ./bin/targets/rockchip/armv8 -maxdepth 1 -type f | while read file; do gh release upload \u0026#34;$RELEASE_TAG\u0026#34; \u0026#34;$file\u0026#34; --clobber done ","date":"2024 年 10 月 6 日","externalUrl":null,"permalink":"/posts/compile-openwrt-with-github-action/","section":"Posts","summary":"","title":"使用 Github Action + Hugo 实现推送仓库自动生成静态文件并推送到 Page 仓库","type":"posts"},{"content":"","date":"2024 年 10 月 2 日","externalUrl":null,"permalink":"/tags/orangepi/","section":"Tags","summary":"","title":"OrangePi","type":"tags"},{"content":"","date":"2024 年 10 月 2 日","externalUrl":null,"permalink":"/tags/%E5%BC%80%E5%8F%91%E6%9D%BF/","section":"Tags","summary":"","title":"开发板","type":"tags"},{"content":" 开始之前 # 本文主要是教学给 OrangePi R1 Plus LTS 的教程，但是为硬路由编译完全可以参考 上学期研究了防止校园网的多设备检测，为自己的红米 AC2100 硬路由装了 OpenWrt，但是用的的第三方的版本。如果直接使用硬路由的话不知道为什么似乎绿厂的手机连接 WIFI 后就会被检测到。其次是硬路由使用 UA2F 和 SmartDNS 等插件很容易出现性能瓶颈，所以我选择了 OrangePi R1 Plus LTS 作为软路由，然后将红米 AC2100 接在软路由后面，只作为一个无线发射器了。\n准备 # Linux 环境 可以随意git的网络环境 Linux 环境这里推荐一下上一篇文章说到的阿里云按量付费服务器，一个通用计算型 4C4G + 东京地区直接完全够用了，不然准备编译这一步就需要很久。当然也可以选择使用 WSL 来进行编译。\n开始 # 进入 Linux 主机，首先进行更新和安装必要的软件包。\n# 更新软件包 sudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade -y # 安装必要的软件 sudo apt-get install gcc binutils bzip2 flex python3 perl make grep unzip swig gawk subversion libz-dev libc-dev rsync libncurses5-dev libncursesw5-dev libpam0g-dev liblzma-dev libsnmp-dev libnetfilter-queue-dev liblzma-dev libpam0g-dev 安装完毕后将所需要的 OpenWrt 源克隆下来，以下是常用的 OpenWrt 版本：\nimmortalwrt LEDE OrangePi-xunlong OpenWrt 官方 这里我使用从 OrangePi-xunlong fork 下来的仓库进行了（只适用于 OrangePi R1 Plus LTS）。\nHeTongRe4per/OPi-R1-Plus-LTS-OpenWrt For OrangePi R1 Plus LTS C 0 0 # 后台启动 ssh-agent eval \u0026#34;$(ssh-agent -s)\u0026#34; # 添加密钥 ssh-add ~/.ssh/github.pem # 克隆仓库 git clone --branch origin/openwrt-21.02 git@github.com:HeTongRe4per/OPi-R1-Plus-LTS-OpenWrt.git # 进入项目文件夹 cd OPi-R1-Plus-LTS-OpenWrt 这里不会使用 ssh 密钥克隆仓库等可以在网上搜搜。\n准备编译 # 进入项目文件夹后先进行更新和安装 feed 包（这里下的包大部分都是国外资源，下载慢的话请使用合适的网络环境）：\n# 更新 feed 包 ./scripts/feeds update -a # 安装 feed 包 ./scripts/feeds install -a 然后可以通过make menuconfig选择对应的芯片、平台和软件包等。\n可以使用箭头进行选择，可以使用热键：按 Y 包括、N 排除、M 模块化、 按 Esc * 2 退出，按? 用于帮助、/搜索。 图例：[*] 内置、[ ] 排除、\u0026lt;M\u0026gt; 模块化。 可以将自己需要的包先克隆到packages文件夹中，然后再进入make menuconfig找到对应的包选择就行，选择后在底部选择「SAVE」保存设定。\n# 选择想要编译的包 make menuconfig 如果找不到键入/然后输入想找的包的名字，其中Location所指的就是包的位置。例如我搜索 UA2F：\nLocation: -\u0026gt; Network (2) -\u0026gt; Routing and Redirection 那么进入Network -\u0026gt; Routing and Redirection就能找到 UA2F。\n开始编译 # 选择好所有需要的包后就可以开始编译了，可以先提前下载好需要的 feed 包，其中-j4是使用多少线程进行下载，建议不要超过 8 线程：\n# 下载 feed 包 make download -j4 然后开始正式编译，其中-j4是编译使用的线程，推荐多少核的 CPU 使用多少线程；V=s是显示详情编译信息（编译需要的时间非常长，建议使用screen，然后在 screen 中进行编译）：\n# 正式编译 make -j4 V=s # 编译出错的话 make -j1 V=s # 不想看一大堆编译日志输出的 make -j4 编译结果 # 最后编译出来的成品放在\u0026lt;仓库文件夹\u0026gt;/bin/下，其中有两个目录：\ntargets文件夹：包含了针对特定硬件平台（Target）的固件镜像和相关文件。这些文件用于将 OpenWrt 安装到目标设备上。具体内容包括固件镜像文件（例如 .bin 或 .img 格式）、内核、设备树文件等。 packages文件夹：包含了编译后的软件包（例如你选择的模块化的包），通常是都.ipk文件。 现在就只需要将编译出来的openwrt-rockchip-armv8-xunlong_orangepi-r1-plus-lts-ext4-sysupgrade.img.gz下载到自己电脑上，然后按照这篇文章安装到开发板上就行了。祝成功！！\n","date":"2024 年 10 月 2 日","externalUrl":null,"permalink":"/posts/build-own-openwrt-for-orangepi/","section":"Posts","summary":"","title":"为 OrangePi 编译属于自己的 OpenWrt","type":"posts"},{"content":"","date":"2024 年 9 月 28 日","externalUrl":null,"permalink":"/tags/%E9%98%BF%E9%87%8C%E4%BA%91/","section":"Tags","summary":"","title":"阿里云","type":"tags"},{"content":"","date":"2024 年 9 月 28 日","externalUrl":null,"permalink":"/categories/%E5%A5%BD%E7%89%A9%E6%8E%A8%E8%8D%90/","section":"Categories","summary":"","title":"好物推荐","type":"categories"},{"content":" 前言 # 这篇文章主要是推荐一下这两天发现的一个好东西，就是阿里云的高校计划——云工开物。其实很早之前就已经加入了这个计划，其中包括一个默认 1 个月的 2C2G 1Mbps 带宽 ECS 服务器，可以通过完成续费任务进行免费续费，可以续 6 个月。另一个就是 300 的无门槛优惠券，这篇文章主要就是教学如何利用这一张券进行最大化利用。\n学生认证 # 进入「云工开物」的官网注册阿里云帐号（可以使用支付宝进行注册）\n阿里云高校计划\r注册登录后点击领取权益就会开始学生身份认证，使用支付宝扫码进行认证。\n认证成功后就会可以领取一张通用学生权益的 300 无门槛券，还可以领取一台云服务器，服务器领取后可以直接进行实验任务免费续费 6 个月服务器。\n300 元券怎么用 # 如果直接在云工开物的页面向下翻页会看见一个用券专区，我们不是在这里买，所以不用在意（听说这里买的服务器需要自己额外掏钱购买带宽，不要买，否则无法在外网访问）。\n在最右上角进入阿里云「控制台」，进入 ECS 概览页，点击「创建实例」。\n首先在最顶部选择「自定义购买」（似乎默认就是选择自定义购买），付费类型为「按量付费」。接下来在下面选择你想要的地区（似乎可以选则大陆地区之外的服务器，但是我不知道是否也可以使用券进行扣费）。\n「按量付费」模式十分适合一些需要不连续短期使用的情况。例如编译一些比较大的软件等，编译时间长又需要一些环境。又或者是偶尔和朋友玩某些游戏搭建服务器，每天都只是玩一会儿就会关闭。\n接下来你可以按需选择自己想要的服务器类型，例如我想开一个 MC 的 MOD 服务器，众所周知 MC 是一个吃单核性能的游戏，而加载 MOD 需要的内存又比较大，那么我就选择一个 2C8G 的ecs.e-c1m4.large规格服务器。\n镜像选择自己需要的镜像，我平时在服务器上使用 Ubuntu，所以我这里也还是选择了 Ubuntu。\n带宽和硬盘大小也请按需选择，带宽也推荐选择「按使用流量」计费，公网 IP 请务必勾选，硬盘快照服务由于我不知道是否也可以使用券进行抵扣所以没选。\n管理设置请按需选择，如果你知道如何正确使用密钥对登录服务器 SSH 推荐使用密钥登录，当然你也可以选择先使用密码登录，后续自己创建密钥对进行登录（毕竟默认密钥是是用的 RSA 加密，何不如自己创建 ed25519 的密钥呢）。其次就是如果你选择的镜像是「Linux」请务必打开22端口，3389可以关闭，相反「Windows」请务必开启3389，而22端口可以关闭。\n以上全部完毕在右侧可以确认自己选择的规格等信息，还可以看见大概的费用。然后阅读并同意《云服务器 ECS 服务条款》就可以直接点击「确认下单」按钮了。\n如何节省费用 # 使用按量付费的话结束使用后如果不需要服务器了（例如编译完毕后）就可以直接在 ECS 服务器的管理面板页右上角找到可以展开的「停止」或者「启动」按钮，展开后里面有一个「释放」，确认信息后就可以释放服务器了，扣费也会停止。\n如果你只是想临时停止这个服务器，但是后面可能还会需要重新启动（例如开的游戏服务器，后面还会和小伙伴一起玩）。可以在右上角找到「停止」按钮，停止的形式选择「节省停机（原停机不收费）」。确认信息后就可以停止服务器并且减少很多费用。\n但是请注意，这样停止不是指完全不收费了，在停机的这段时间中你会按照你选择的磁盘大小收费（如果你开启了磁盘快照也会有收费）。如果完全不想在停机后有任何支出只能选择释放服务器，释放会清除服务器上所有数据，释放之前请务必将自己需要的数据下载到本地。 卡券使用情况可以在阿里云右上角找到「费用」一项，点开后在左边侧边栏找到「账户」，展开后的「卡券」就可以看见使用情况了。\n我的使用情况 # 可以看看我在使用阿里云按量付费进行 OpenWRT 编译和运行 MC 服务器的消费，其中 6 月是进行了一次 OpenWRT 编译使用完毕后直接释放了服务器；9 月是在开 MC 服务器，使用后是在 2 点备份并下载了一次数据然后使用了「节省停机」，因为下载到自己本地消耗了较多流量，所以有一次 2 毛的费用突增。\n处理时间 交易说明 处理金额 当前余额 Sat Sep 28 10:40:48 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.01458 292.009903 Sat Sep 28 09:42:47 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.01458 292.024483 Sat Sep 28 08:39:13 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.01458 292.039063 Sat Sep 28 07:47:28 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.01458 292.053643 Sat Sep 28 06:39:31 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.01458 292.068223 Sat Sep 28 05:40:59 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.01458 292.082803 Sat Sep 28 04:53:12 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.219 292.097383 Sat Sep 28 04:38:48 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.01458 292.316383 Sat Sep 28 03:39:55 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.16176 292.330963 Sat Sep 28 03:39:52 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.007881 292.492723 Sat Sep 28 03:31:41 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.166 292.500604 Sat Sep 28 02:40:29 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.35208 292.666604 Sat Sep 28 02:32:34 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.165 293.018684 Sat Sep 28 01:40:56 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.35208 293.183684 Sat Sep 28 01:38:16 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.185 293.535764 Sat Sep 28 00:59:25 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.35208 293.720764 Sat Sep 28 00:31:12 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.184 294.072844 Fri Sep 27 23:59:59 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.191 294.256844 Fri Sep 27 23:38:40 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.35208 294.447844 Fri Sep 27 23:00:52 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.218 294.799924 Fri Sep 27 22:39:33 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.35208 295.017924 Fri Sep 27 21:41:05 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.35208 295.370004 Fri Sep 27 21:33:17 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.003 295.722084 Fri Sep 27 20:41:19 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.001172 295.725084 Fri Sep 27 20:41:19 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.081955 295.726256 Mon Jun 03 00:47:26 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.020088 295.808211 Mon Jun 03 00:47:25 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.001952 295.828299 Sun Jun 02 23:42:53 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.927184 295.830251 Sun Jun 02 22:41:09 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.927184 296.757435 Sun Jun 02 21:45:18 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.927184 297.684619 Sun Jun 02 20:41:50 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.927184 298.611803 Sun Jun 02 19:41:55 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.003089 299.538987 Sun Jun 02 19:41:55 CST 2024 阿里云高校云上成长计划——云工开物活动专享 -0.457924 299.542076 ","date":"2024 年 9 月 28 日","externalUrl":null,"permalink":"/posts/aliyun-student-programming/","section":"Posts","summary":"","title":"如何白嫖高性能阿里云服务器搭建自己的游戏服务器","type":"posts"},{"content":" 前言 # 很多企业给我们学生了很多优惠和免费服务。其中包括 GitHub Education，它里面包括了很多服务，最常用的两个分别是 Github Copilot 和 JetBrains 学生订阅，其余的可以在 GitHub Student Developer Pack 查看。本文主要会告诉你如何使用自己的学校给的教育邮箱来激活这个 Github 学生包。\n企业的这些免费服务或者优惠是方便学生进行开发等的，而不是一些人敛财的工具 准备 # 你需要以下项目才可以继续进行下面的步骤\n教育邮箱（.edu.cn或者.edu的顶级域名，国内一般是.edu.cn，没有的话可以在自己学校官网查找注册入口） 学信网在线学籍在线验证报告（进入学信网学信档案获取 PDF，再转为 PNG 格式备用） Github 帐号 人在学校或者是手机定位在学校 Microsoft Edge 浏览器 开始 # 全程请不要使用网络工具，否则一定会失败；十分建议使用 Microsoft Edge 进行操作 首先进入 Github 邮箱设置，添加自己的教育邮箱为候选邮箱。\n然后进入 GitHub Education benefits，选择「Student」，此时向下翻，会有一个提示，告诉你你的绑定的邮箱对应的学校，点击「Select this school」按钮可以直接选择，此时下面的输入框就会直接选择你的学校。（如果没有显示这个小提示的话先确定上一小步完成没，没有的话就手动填上自己的学校英文全名吧）点击「Continute」（如果这个时候按钮一直是灰的或者卡住了不动就请使用 Microsoft Edge 浏览器）。\n提交认证资料 # 接下来会进入新的网页（进入这里后这个网址就不会消失了，如果想要拍照或者上传其他文件你可以将地址复制到手机上进行操作）。\n点击「Upload an image」，然后将你准备好的学信网在线验证的图选择并上传上去（如果不放心可以选择使用翻译工具先将从学信网下载的 PDF 翻译成英文版再转换为 PNG）。\n上传完毕后点击「Process my application」然后等待，祝成功！\n一些其他增加验证成功的方式 # 完善自己的 Github Profile，据体方式可以在网上找找，在其中表明自己是就读于xx大学的学生，这是我的 Github Profile； 个人信息中的 Company 可以填自己的学校英文名； 使用自己学校的校园网环境 使用 Microsoft Edge 浏览器 成功验证 # 成功验证学生身份的话回到 GitHub Education benefits 会在右侧有一个绿色的「Approved」，表示已经确认你的学生身份了。此时还不用急，因为你的权益其实还没有到帐，需要等待最多 5 个工作日。5 个工作日内如果 GitHub Education benefits 中的「Approved」变为了紫色则表示你的学生权益已经到帐了，同时 GitHub Education 发送一封祝贺邮件到你的教育邮箱中。\n如果五个工作日还没收到邮件或者「Approved」变为紫色你就需要进入 Github Community Discussions 提交讨论进行询问了，请尽量使用英语。\n获得学生包后 # Github Copilot # 你可以前往 Github Copilot 直接点击「Start a free trial」进行激活，然后你就可以在你的 IDE 或者 Github Mobile 进行使用了。\nJetBrains # 你可以前往 JetBrains 社区计划注册帐号然后申请学生资格，在选择时选择「Github」即可。\n其他的免费服务可以前往 GitHub Student Developer Pack 发现。\n","date":"2024 年 9 月 26 日","externalUrl":null,"permalink":"/posts/how-students-get-github-student-pack/","section":"Posts","summary":"","title":"学生如何使用邮箱及学信网在线验证获取 Github 学生包","type":"posts"},{"content":"","date":"2024 年 9 月 13 日","externalUrl":null,"permalink":"/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/","section":"Categories","summary":"","title":"日常记录","type":"categories"},{"content":"","date":"2024 年 9 月 13 日","externalUrl":null,"permalink":"/tags/%E8%BE%93%E5%85%A5%E6%B3%95/","section":"Tags","summary":"","title":"输入法","type":"tags"},{"content":"","date":"2024 年 9 月 13 日","externalUrl":null,"permalink":"/tags/%E5%B0%8F%E7%8B%BC%E6%AF%AB/","section":"Tags","summary":"","title":"小狼毫","type":"tags"},{"content":" 前言 # 之前用的微信输入法，然后就被报隐私问题和用户协议疑似留后门，果断转小狼毫了。小狼毫需要的配置又比较多，于是本文主要是记录一下自己的中州韵 - 小狼毫输入法的配置过程，防止后面出现变故又忘记了一些配置。\n本文所有操作都需要在输入法右键菜单里面「重新部署」才能生效 输入方案 # 输入方案使用的是「🍀️四叶草简体拼音」，Github 地址如下\nfkxxyz/rime-cloverpinyin 🍀️四叶草拼音输入方案，做最好用的基于rime开源的简体拼音输入方案！ Python 1871 129 使用方式：\n进入 release 下载最新的输入方案，然后右键任务栏输入法图标，弹出的菜单选择「用户文件夹」，将输入方案的压缩包全部解压进去\n模糊拼音配置 # 新建文件名为clover.custom.yaml，填入以下内容\npatch: speller/algebra: # 模糊音 - derive/([ei])n$/$1ng/ # ing = in; eng = en - derive/([ei])ng$/$1n/ # in = ing; en = eng - derive/^([zcs])([^h])/$1h$2/ # z, c, s =\u0026gt; zh, ch, sh - derive/^n/l/ # n =\u0026gt; l - derive/^l/n/ # l =\u0026gt; n # 基础 - abbrev/^([a-z]).+$/$1/ - abbrev/^([zcs]h).+$/$1/ # 补全 - derive/([dtngkhrzcs])o(u|ng)$/$1o/ # o = ou; o = ong - derive/ong$/on/ # on = ong - derive/^ding$/din/ # din = ding # 处理 v 和 u - derive/^([nl])ue$/$1ve/ # nve = nue; lve = lue - derive/^([jqxy])u/$1v/ # v = u; v = u # 智能纠错 - derive/ao$/oa/ # oa = ao - derive/([iu])a(o|ng?)$/a$1$2/ # aio = iao; aing = iang; aung = uang - derive/([aeiou])ng$/$1gn/ # gn = ng - derive/un$/uen/ # uen = un - derive/ui$/uei/ # uei = ui - derive/iu$/iou/ # iou = ui - derive/ie$/ei/ # ei = ie - derive/i$/ii/ # ii = i # i 不小心按两下 - derive/u$/uu/ # ui = u # u 不小心按两下 导入微软输入法的自学习词库 # 先进入微软输入法的的设置界面，导出自学习词库。\n下载「深蓝词库转换」\nstudyzy/imewlconverter ”深蓝词库转换“ 一款开源免费的输入法词库转换程序 C# 8358 652 词库位置选择导出的微软自学习词库。然后左边词库源选择「Win10微软拼音（自学习词汇）」；右边选择「Rime 中州韵」，导出后命名为微软输入法自学习词库.dict.yaml，前面的微软输入法自学习词库可以改成别的，保存到用户文件夹下。\n保存后打开微软输入法自学习词库.dict.yaml，在最前面添加下面这一段\nname: 微软输入法自学习词库 version: \u0026#34;1.0.0\u0026#34; sort: by_weight ... 然后打开用户文件夹下面的clover.dict.yaml文件，最后面按照yaml格式添加刚刚的词库。\n当然还可以用这个方式可以用来导入其他词库。\n自定义部分符号输入 # 还是在「用户文件夹」下，打开clover.schema.yaml文件。\n找到punctuator下的half_shape修改\u0026quot;{\u0026quot;、\u0026quot;}\u0026quot;和\u0026quot;'\u0026quot;后面分别为\u0026quot;{\u0026quot;、\u0026quot;}\u0026quot;和{ pair: [ \u0026quot;「\u0026quot;, \u0026quot;」\u0026quot; ] }这样的话在中文下按键盘上的[、]和\u0026rsquo;分别会输入{、}和「」\npunctuator: half_shape: \u0026#34;{\u0026#34;: \u0026#34;{\u0026#34; \u0026#34;}\u0026#34;: \u0026#34;}\u0026#34; \u0026#34;\u0026#39;\u0026#34;: { pair: [ \u0026#34;「\u0026#34;, \u0026#34;」\u0026#34; ] } 更改水平显示和候选词数 # 右键输入法，弹出的菜单选择「程序文件夹」，找到data/文件夹，里面有两个文件，分别是default.yaml和weasel.yaml\ndefault.yaml中找到menu: page_size: 5将5修改为你想要的候选词数量\n打开weasel.yaml，找到horizontal: false，修改为true\n24-10-07 更新\n后来发现如果直接改程序文件夹更新小狼毫后全都会失效，所以以下才为正确的修改候选词数量和候选框的方法：\npatch: \u0026#34;menu/page_size\u0026#34;: 10 # 候选词数量为 10 个 \u0026#34;style/horizontal\u0026#34;: true # 候选框为 横版 speller/algebra: # 模糊拼音 # 模糊音 - derive/([ei])n$/$1ng/ # ing = in; eng = en - derive/([ei])ng$/$1n/ # in = ing; en = eng - derive/^([zcs])([^h])/$1h$2/ # z, c, s =\u0026gt; zh, ch, sh - derive/^n/l/ # n =\u0026gt; l - derive/^l/n/ # l =\u0026gt; n # 基础 - abbrev/^([a-z]).+$/$1/ - abbrev/^([zcs]h).+$/$1/ # 补全 - derive/([dtngkhrzcs])o(u|ng)$/$1o/ # o = ou; o = ong - derive/ong$/on/ # on = ong - derive/^ding$/din/ # din = ding # 处理 v 和 u - derive/^([nl])ue$/$1ve/ # nve = nue; lve = lue - derive/^([jqxy])u/$1v/ # v = u; v = u # 智能纠错 - derive/ao$/oa/ # oa = ao - derive/([iu])a(o|ng?)$/a$1$2/ # aio = iao; aing = iang; aung = uang - derive/([aeiou])ng$/$1gn/ # gn = ng - derive/un$/uen/ # uen = un - derive/ui$/uei/ # uei = ui - derive/iu$/iou/ # iou = ui - derive/ie$/ei/ # ei = ie - derive/i$/ii/ # ii = i # i 不小心按两下 - derive/u$/uu/ # ui = u # u 不小心按两下 本文所有操作都需要在输入法右键菜单里面「重新部署」才能生效 ","date":"2024 年 9 月 13 日","externalUrl":null,"permalink":"/posts/weasel-configuration-memo/","section":"Posts","summary":"","title":"中州韵 - 小狼毫输入法配置备忘录","type":"posts"},{"content":"","date":"2024 年 9 月 12 日","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"2024 年 9 月 12 日","externalUrl":null,"permalink":"/tags/koishi/","section":"Tags","summary":"","title":"Koishi","type":"tags"},{"content":"","date":"2024 年 9 月 12 日","externalUrl":null,"permalink":"/tags/qq-%E6%9C%BA%E5%99%A8%E4%BA%BA/","section":"Tags","summary":"","title":"QQ 机器人","type":"tags"},{"content":" 开始之前 # 初中的时候看见有的群会有一个聊天机器人，当时 AI 还没发展起来，很多机器人都只是有几个小游戏功能，然后可以通过关键词进行回复。在大学闲暇时间终于有时间来研究这些东西了，刚好手头有一块开发板，很适合用来搭建聊天机器人，于是就有了这篇文章。\n本教程主要使用 Koishi 机器人框架，利用 Docker 进行搭建（Docker 9.9 日国内恢复使用了🎉）。搭建平台是 Arm64 Linux，理论其他平台通用，Windows 更推荐直接使用官方直装版，Docker 在 Windows 上适配也不完全，没有必要使用 Docker 版。本文是适用于 Linux 的版本。 好的，接下来直接开始吧。\n安装 Docker # 首先进行一次软件包更新\nsudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade -y 安装必须的软件包\nsudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release 添加 Docker 官方的 gpg 密钥\nsudo mkdir -m 0755 -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg 设置 Docker 密钥的储存库\necho \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null 配置新的 Docker 密钥后更新 apt list ，安装Dockerc Engine、containerd 和 Docker Compose\nsudo chmod a+r /etc/apt/keyrings/docker.gpg sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 安装apparmor（强制访问控制系统）\nsudo apt-get install apparmor 验证安装\nsudo docker run hello-world 出现以下字样表示 Docker 安装成功\nPS： 使用以下命令方便以后docker运行(需要重启才能生效)\nsudo usermod -aG docker $USER reboot 安装 Portainer （Docker 管理器） # 拉取portainer并启动容器\ndocker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name prtainer portainer/portainer 命令解释：\n-d 后台运行容器，并返回容器ID -p 指定端口映射，格式为：主机(宿主)端口:容器端口 –restart=always 主机重启后自动运行该容器 -v /var/run/.sock:/var/run/docker.sock：运行Docker的目录映射，必须要有才能用Portainer操作Docker命令 –name 自定义容器名称 portainer/portainer 容器所使用的镜像名称 打开portainer界面\n\u0026lt;你的服务器ip\u0026gt;:9000 首先会让你设置密码，设置后进入就行，界面如下:\n首先会让你设置密码，设置后进入就行，界面如下\nQ: 我看不懂 A: 请使用浏览器自带的翻译器\n安装 Docker Koishi # 拉取 Koishi 镜像\ndocker pull koishijs/koishi 启动 Koishi\n#首先修改服务器时区以及时间 tzselect cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 容器数据本地化\nmkdir /home/koishi docker run -p 5140:5140 -v /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime -v /home/koishi:/koishi --restart=always --name koishi koishijs/koishi 进入 Koishi 界面\n\u0026lt;你的服务器ip\u0026gt;:5140 界面如下（我这里已经有过配置了）\n如果你想停止或重启 Koishi\n你也可以选择使用命令进行\n# docker start 容器名字或者容器id docker start koishi # docker stop 容器名字或者容器id docker stop koishi # docker restart 容器名字或者容器id docker restart koishi 请不要使用创建容器时的命令，那样将会报错（你改了容器名字当我没说，但是你的数据会“消失”） 也不要使用官网的命令[docker run -p 5140:5140 koishijs/koishi],这样你的数据也会“消失” PS: \u0026ldquo;数据消失\u0026quot;并不是数据丢失，而是因为你创建了新的容器，你的数据在旧的容器中。 以上部分引用自 Koishi 论坛 - \u0026lt;docker系列\u0026gt;koishi 安装与docker全程指导（基于Ubuntu server 搭建24小时机器人 适合小白）\n连接 QQ 前建议先更新好所有的插件，然后在「插件市场」搜索安装“echo”插件，安装好后进入「沙盒」，创建一个用户，使用echo 你好！查看 Koishi 是否正常工作。\n连接 QQ # 创建 QQ 开放平台帐号 # 前往QQ开放平台注册帐号并登录\n创建机器人 # 在 QQ 开放平台主界面中选择「创建机器人」，依次配置好需要的信息，成功创建机器人后即可进入机器人后台。直接点击页面左侧的「开发设置」。\n在这里，你可以得到：机器人 QQ 号、ID、Token 和 Secret。记下这些数据，千万不要泄漏它们。 Koishi 连接 QQ 机器人 # 进入 Koishi 后台面板，左侧选择「插件配置」，选择“adapter-qq”，在 id, screct, token 上分别填入上一步获得的数据。在 机器人类型 （type）栏选择你的机器人对应的公域或者私域。\n接下来，翻到下方的「intents」配置项。\n如果你准备在 QQ 群中使用，勾选USER_MESSAGE。 如果你准备在 QQ 频道的 频道私信 列表中使用，勾选DIRECT_MESSAGES。 如果你准备在 QQ 频道中使用，且你的机器人是公域机器人，勾选PUBLIC_GUILD_MESSAGES。 勾选MESSAGE_AUDIT。 最后，点击右上角播放图标的「启动」按钮。插件会输出一条成功连接的日志，同时，Koishi 窗口的右下角已点亮绿灯。\n在 QQ 群中测试机器人 # 进入 QQ 机器人的网页管理后台，点击左侧的「沙箱配置」，翻到页面最下方，在「在 QQ 群配置」一栏选择你为管理员的群或者创建一个专门的测试群。\n接着，在手 Q 中打开测试群，点击右上角的菜单图标，向下翻动找到「群机器人」选项，进入并添加刚刚创建的机器人。现在，你已可以在 QQ 使用自己的机器人。输入「@」并选择机器人，然后在后面输入「help」并发送。你可以看到机器人正常工作。\n如果正常回复，恭喜，你刚刚创建了自己的机器人。\n配置/指令 # QQ 机器人的斜杠指令功能使你可以直接点选需要使用的指令，而无需手动输入。\n首先，在 Koishi 中点击左侧栏的「插件配置」，接着选择插件列表中最上方的「全局配置」。\n向下翻动到「prefix」配置项，并按照图中填写。第一项为「/」，第二项不填。 这使得你的机器人在带斜杠和不带斜杠的情况下都能正确触发指令。\n最后，点击右上角的「对勾」图标，重启 Koishi。\n接下来，回到 QQ 机器人后台，点击左侧的「发布设置」，然后点击「功能配置」右侧的「配置」按钮。选择「指令」选项卡，点击右上角的「配置」，并在这里配置机器人的可用指令。配置完毕后，点击「保存」。现在，你已经可以使用斜杠指令。\n提测与上线 # 机器人准备完毕后，你可以开始进行提测与上线步骤。\n在提测前，你应当完成上方的「配置斜杠指令」步骤，并确保你的机器人已经有可用的指令。\n打开 QQ 机器人后台，点击左侧的「发布设置」，然后点击「自测报告」内的「下载模板」，下载一份自测报告模板。\n认真自测并填写此模板。自测完毕后，上传自测报告，并点击「上线机器人」。腾讯将会人工审核你的机器人，并准许上线。\n以上内容主要来自 Koishi 论坛 - QQ/QQ 频道 登录指南\n最后 # 非常推荐有什么疑问或者问题可以前往 Koishi 官方论坛寻找答案，没有的话可以自己提问。\n","date":"2024 年 9 月 12 日","externalUrl":null,"permalink":"/posts/use-docker-and-koishi-to-build-your-own-chatbot/","section":"Posts","summary":"","title":"使用 Docker + Koishi 搭建一个属于自己的聊天机器人","type":"posts"},{"content":"","date":"2024 年 9 月 6 日","externalUrl":null,"permalink":"/tags/teamspeak3/","section":"Tags","summary":"","title":"Teamspeak3","type":"tags"},{"content":" 前言 # 在如何搭建自己的 ts3 服务器这一篇文章中教学了如何搭建属于自己的 ts3 服务器，现在我想放一个音乐机器人在 ts3 里面常驻，可以用来活跃频道，还可以分享自己喜欢的歌。\n于是找到了 TS3AudioBot 这个项目，它十分符合预期，不需要公网，只需要一个可以联网的机器就行。而香橙派十分符合作为搭建的机器，有着极低的功耗，还可以 24h 都在线。\nSplamy/TS3AudioBot Advanced Musicbot for Teamspeak 3 C# 720 143 下载及安装 # 首先确认自己的系统，在 TS3AudioBot Releases 中下载最新的程序包。因为我是 arm 开发板，所以下载的是arm64架构版本。请按照自己的系统和架构选择对应的版本。\n可以选择下载到电脑上然后使用 FTP 传到开发板上；还可以复制文件的地址然后在开发板上使用curl -jLO \u0026quot;\u0026lt;文件地址\u0026gt;\u0026quot;将文件直接下载到开发板（下载慢的话注意网络环境）；当然你也可以选择使用SCP指令。这里就不赘述了，不会用SCP的话请查看菜鸟教程 - Linux scp 命令。\n将程序包准备好后进行解压tar -zxvf \u0026lt;压缩包文件名\u0026gt; -C \u0026lt;指定解压到的文件夹\u0026gt;，\n解压好后进入文件夹，可以看到以下内容：\n先不急着运行，因为没有对应的库和环境肯定会报错，需要先使用sudo apt-get install libopus-dev ffmpeg安装需要的库。因为我是 Arm Ubuntu 22.04，所以还需要安装旧版本的libssl1.1，所使用的镜像源中也没有，所以需要手动下载安装：\n请注意，我是因为自己是 Arm 开发板才需要进行旧版本libssl安装，你是否也需要请按实际情况进行操作，不知道的话可以直接运行 TS3AudioBot 来观察是否有对应报错 前往 ubuntu - ports 官方库搜索libssl1.1_1.1.1，然后选择对应自己系统架构和版本的进行下载。例如我的下载是libssl1.1_1.1.1-1ubuntu2.1~18.04.23_arm64.deb这一个 下载到开发版后sudo dpkg -i \u0026lt;软件包名\u0026gt;进行安装，例如我的sudo dpkg -i libssl1.1_1.1.1-1ubuntu2.1~18.04.23_arm64.deb 运行及配置 # 接下来./TS3AudioBot运行TS3AudioBot，依次进行下面操作：\n会让问你是否需要设定管理员，建议选择「是」； 选择「是」的话接下来就会让你输入管理员的 uid，可以在 ts3 中「权限 -\u0026gt; 所有客户端列表」找到自己名字，后面的「唯一标识符」就是你的 uid，粘贴上去就行； 会问你加入的服务器的 IP 、地址或者别名，输入你的服务器地 IP 或者地址或者别名就行； 输入服务器密码，没有的话直接回车即可； 接下来就会有一个名为「TS3AudioBot」的机器人进入你服务器的默认频道。私聊发送!api token即可开启 web 面板，浏览器输入http://{机器人地址}:58913/进行登录后可以进行一些基本的修改。\n配置服务（开机自启动等） # 使用 root 用户或者使用sudo创建一个文件：/usr/lib/systemd/system/ts3audiobot.service，填入以下内容：\n[Unit] Description=TS3AudioBot After=teamspeak.service [Service] Type=simple User={运行TS3AudioBot的用户名} Group={运行TS3AudioBot的用户名} KillSignal=SIGINT Restart=on-failure RestartSec=10 WorkingDirectory={TS3AudioBot文件夹绝对路径} ExecStart={TS3AudioBot文件夹绝对路径}/TS3AudioBot [Install] WantedBy=multi-user.target systemd 服务使用方式（新加服务或者修改过.service文件需要重载生效）：\n# 重载 systemctl daemon-reload # 开启自启动 systemctl enable ts3audiobot.service # 启动 ts3audiobot systemctl start ts3audiobot.service # 停止 ts3audiobot systemctl stop ts3audiobot.service # 重启 ts3audiobot systemctl restart ts3audiobot.service 接下来你就可以开始进机器人配置了。\n配置歌单 # 在自己电脑上下好自己想让机器让播放的歌，压缩成.tar.gz格式，上传到开发板，解压到和TS3AudioBot同级的文件夹下面，例如我的TS3AudioBot在/home/he_tong/ts3audiobot-test文件夹下面，所有的音乐文件就在/home/he_tong/ts3audiobot-test/music下面。\n进入音乐文件夹，创建一个export_music_list.py文件，输入以下内容，其中，第 27 行的「title」需要注意，可以改为你想要最终在网页中显示的名字，可以为中文：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 import os import json # 支持的音频文件扩展名 supported_extensions = [\u0026#39;.mp3\u0026#39;, \u0026#39;.flac\u0026#39;, \u0026#39;.wav\u0026#39;, \u0026#39;.m4a\u0026#39;] def is_music_file(filename): # 检查文件扩展名是否是音频文件 ext = os.path.splitext(filename)[1].lower() return ext in supported_extensions def get_music_files(path): music_files = [] # 遍历指定目录下的所有文件 for root, _, files in os.walk(path): for file in files: if is_music_file(file): full_path = os.path.join(root, file) music_files.append((file, full_path)) return music_files def create_playlist(music_files): count = len(music_files) # 生成歌单文件内容 playlist_content = [] playlist_content.append(f\u0026#39;version:3\u0026#39;) playlist_content.append(f\u0026#39;meta:{{\u0026#34;count\u0026#34;:{count},\u0026#34;title\u0026#34;:\u0026#34;Music\u0026#34;}}\u0026#39;) for title, path in music_files: playlist_content.append(f\u0026#39;rsj:{{\u0026#34;type\u0026#34;:\u0026#34;media\u0026#34;,\u0026#34;resid\u0026#34;:\u0026#34;{path}\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;{title}\u0026#34;}}\u0026#39;) return \u0026#39;\\n\u0026#39;.join(playlist_content) def save_playlist(content, filename=\u0026#34;music_list\u0026#34;): # 使用 surrogateescape 来处理代理字符问题 with open(filename, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;surrogateescape\u0026#39;) as f: f.write(content) if __name__ == \u0026#34;__main__\u0026#34;: # 获取当前运行位置的路径 current_dir = os.getcwd() # 获取所有音频文件 music_files = get_music_files(current_dir) # 创建歌单内容 playlist_content = create_playlist(music_files) # 保存到文件 save_playlist(playlist_content) print(f\u0026#34;歌单已生成，包含 {len(music_files)} 首歌曲。\u0026#34;) 然后使用python export_music_list.py来运行这个 Python 脚本（没有 python 的话请先使用sudo apt-get install python3安装 python），就会生成一个文件，名叫「music_list」，将其复制到{TS3AudioBot_Path}/bots/default/playlists文件夹中，就会有一个播放列表\n配置机器人行为 # 启动机器人后会在TS3AudioBot同级目录生成一个名为ts3audiobot.toml的文件，这个文件就是机器人的配置文件（不过这个配置是全局的，因为我这只有一个机器人，也只会生成一个，所以修改它就行了，如果你想只修改一个机器人的配置可以进入/bots下对应机器人文件夹下修改bot.toml文件）\n以下我只说一些我自己修改的项目参数（你可以使用 Extended Client Info 主题包查看频道 id）：\n[bot.connect] # 服务器密码。如果没有，则留空。 server_password = { pw = \u0026#34;\u0026#34;, hashed = false, autohash = false } # 默认频道密码。如果没有，则留空。 channel_password = { pw = \u0026#34;\u0026#34;, hashed = false, autohash = false } # 覆盖 ts3 客户端显示的版本。留空表示默认。 client_version = { build = \u0026#34;\u0026#34;, platform = \u0026#34;\u0026#34;, sign = \u0026#34;\u0026#34; } # TeamSpeak3 服务器的地址、IP 或昵称（以及端口；默认：9987） address = \u0026#34;{服务器地址}\u0026#34; # 连接时的默认频道。使用频道路径或「/\u0026lt;id\u0026gt;」。 # 例如 「Home/Lobby「, 」/5「, 」Home/Afk\\/ Not Here\u0026#34;。 channel = \u0026#34;{频道地址，或者\u0026#34;/频道 id\u0026#34;}\u0026#34; # 徽章展示架。您可以设置一个逗号分隔的字符串，最多包含三个 GUID。下面是一个列表： http://yat.qa/ressourcen/abzeichen-badges/ badges = \u0026#34;\u0026#34; # 连接时的客户端昵称。 name = \u0026#34;{机器人名字}\u0026#34; [bot.events] # 当机器人连接服务器时调用。 onconnect = \u0026#34;!list play music_list (!repeat all)\u0026#34; # 作用是连接服务器时使用全部循环播放\u0026#34;music_list\u0026#34;这个文件的播放列表 # 机器人断开连接时调用。 ondisconnect = \u0026#34;\u0026#34; # 当机器人在一定时间内未播放任何内容时调用。 onidle = \u0026#34;\u0026#34; # 指定机器人闲置多长时间，直到 「onidle 」事件被触发。 # 您可以使用 ISO-8601 格式 「PT30S 」或类似格式指定时间： 15s、1h、3m30s idletime = \u0026#34;0s\u0026#34; # 当最后一个客户端离开机器人频道时调用。可指定延迟时间 onalone = \u0026#34;!pause\u0026#34; # 作用是在最后一个人退出机器人所在频道后暂停播放 # 指定机器人在 「onalone 」事件被触发前的独处时间。 # 您可以使用 ISO-8601 格式 「PT30S 」或类似格式指定时间： 15s、1h、3m30s alone_delay = \u0026#34;10s\u0026#34; #结合上一项，作用是最后一个人退出机器人后 10s 触发上一条的暂停播放 # 当机器人独自一人时，有客户端加入他的频道时调用。可以指定延迟时间。 onparty = \u0026#34;!play\u0026#34; # 作用是原本机器人一个人在频道后有人进入频道就继续播放 # 指定机器人在 「onalone 」事件被触发前的独处时间。 # 您可以使用 ISO-8601 格式 「PT30S 」或类似格式指定时间： 15秒、1小时、3分30秒 party_delay = \u0026#34;0s\u0026#34; # 新歌开始时调用。 onsongstart = \u0026#34;\u0026#34; 参考 # 埃苯泽の小窝 - 埃苯泽 的文章《解决 ARM Ubuntu 22.04 缺少 libssl1.1 的问题》 知乎 - 一杯浊酒笑风尘​ 的专栏《Ubuntu下安装TS3AudioBot》 Github - Splamy 的 TS3AudioBot 项目 Wiki ","date":"2024 年 9 月 6 日","externalUrl":null,"permalink":"/posts/use-orangepi-zero3-to-build-ts3audiobot/","section":"Posts","summary":"","title":"使用 OrangePi Zero3 搭建 TS3AudioBot","type":"posts"},{"content":" 起因 # 最开始使用 Linux 是使用的云服务器，后来就想着自己也能够拥有一个实体的机器，能够随时在线。然后就知道了开发板这种产品，因为钱包有限，精挑细选后选择了香橙派 Zero3。\n起初是在上面搭了很多的东西，但是随着时间和一些其他原因就没再怎么维护了。暑假时知道了 QQ 放开了群机器人的权限，于是想再试试用这一块板子搭建群聊机器人。\n介绍 # 这一块板子是昨年发布的，使用的是全志的 H618 处理器；内存采用了 LPDDR4，拥有 1GB/1.5GB/2GB/4GB 几种规格可选；自带蓝牙和 Wifi 模块；拥有 26 + 13 个 pin 针脚；以太网接口使用的是 RJ45 千兆网口，供电使用 5V3A ，支持 Micro HDMI 的 HDMI 输出。\n在当时来说是性价比很高的一块板子。特别是 1G 内存版 99 元，当时有很多人都在讨论。虽然生态不如国外的树莓派，但是树莓派价格被炒起来后有越来越多人转向使用这种所谓的“山寨派”，生态只会越来越好。对我而言就只是一台小型的 Linux 服务器，不需要对硬件进行什么更改，官方也提供了 Ubuntu 的系统镜像，这就已经足够。\n开始之前 # 需要准备以下东西\n香橙派本体 5V3A 电源和一根 type-c 电源线（电源最好就是 5V3A，2A 也行，太高板子有几率烧掉） 一个 TTL 转 USB 模块和三根杜邦线（如果你有 Mico HDMI 线和一个支持 HDMI 的屏幕也可以不用） 一张闪迪的 TF 卡（官方推荐的是闪迪，所以我也一直使用的是闪迪的卡，并没有试过其他的） 一个读卡器 一根网线（可选） 有线或者无线网络环境 一台电脑 这一块板子以前是使用过的，但是由于 TF 卡用到了别处，所以需要先将卡进行格式化，所有常见的文件系统都可以使用，后面烧录的时候都会统一成 EXT4 的。\n烧录 TF 卡 # 开发板本身只有一个板载的微型 Linux ，只能用来检查板子有没有坏掉，所以需要烧录一个系统到 TF 卡上然后插到开发板上面。\n首先下载并安装官方推荐的烧录工具 balenaEtcher，或者使用 SD Card Formatter。\n下载并解压官方的 Ubuntu 镜像。\n将 TF 卡使用读卡器连接到电脑上，启动 balenaEtcher，选择镜像文件，需要烧录的存储介质，然后点击「Flash!」 。\n等待烧录，烧录结束后会进行验证，可以跳过，但我还是乖乖等一会儿吧，不急这一时。\n烧录结束后直接叉掉 balenaEtcher 的窗口然后拔出读卡器即可。\n开机！ # 将 TF 卡插入开发板后使用杜邦线连接开发板和 TTL 转 USB 模块，然后将 TTL 转 USB 模块插在电脑上。TTL 转 USB 模块一般有 5 个针脚，其中 3.3V 和 5V 的供电不需要插任何东西，其余三个针脚使用杜邦线进行链接。杜邦线的连接方式如下：\nUSB 转 TTL 模块的 GND 接到开发板的 GND 上 USB 转 TTL 模块的 RX 接到开发板的 TX 上 USB 转 TTL 模块的 TX 接到开发板的 RX 上 小TIP： 串口的TX和RX是需要交叉连接的，如果不想仔细区分TX和RX的顺序，可以把串口的TX和RX先随便接上，如果测试串口没有输出再交换下TX和RX的顺序，这样就总有一种顺序是对的。 下载并安装支持串口通信的终端软件，我使用了 Tabby Terminal。安装好后打开 Tabby Terminal ，点击右上角小齿轮进入设置。配置和连接中点击「 + 新建」按钮，选择「新配置」。弹出的基本配置菜单选择「串口连接」。名称我填了「Orange_Pi_Zero3 (Serial)」，设备的话哪个亮了选哪个，我这里是COM3，波特率填115200，其他看选择更改，我直接点击保存了。\n现在新建一个窗口，选择 「Orange_Pi_Zero3 (Serial)」 ，然后接通香橙派的电源。此时会开始系统初始化，3 分钟左右就会进入系统。（我这里已经是修改之后了）\n进行基本配置 # 连接网线，或者使用nmtui进入图形化无线网络连接界面连接无线网。\n连接好网络后首先进行一次apt-get update -y \u0026amp;\u0026amp; apt-get upgrade -y来更新系统基础软件。然后配置ssh。\n配置 SSH # 使用sudo vim /etc/ssh/sshd_config来编辑 sshd （默认sudo密码为orangepi）按照自己的需求进行配置，主要修改的有：\n# ssh 端口 Port 22 # 是否允许 Root 直接连接 PermitRootLogin yes # 是否允许密钥验证登录 PubkeyAuthentication yes # 是否允许密码验证登录 PasswordAuthentication yes # 是否允许空密码 PermitEmptyPasswords no 因为我的香橙派是在宿舍这个小内网中使用，不会放在公网上，所以我就就只修改了端口并且允许 Root 直接连接和使用密码验证登录，在公网上建议使用密钥登录并不允许 Root 直接连接。\n完成修改后使用Esc进入 vim 的命令模式，然后输入:wq来保存并退出sshd_config，然后使用systemctl restart sshd就生效了。\n更改默认用户 # 接下来是更改默认用户为我自己常用名he_tong，有两种方式可以实现，一个是直接将原本的默认用户orangepi修改为he_tong，另一个方案是删除orangepi，新增用户he_tong。\n两种方式都需要用户orangepi中没有进程在运行，所以需要使用 ssh 连接 root用户：\n在串口连接中使用ifconfig查看香橙派的地址，例如我的192.168.1.181 在电脑上新建终端，使用下面指令连接香橙派的 ssh： ssh -p \u0026lt;端口\u0026gt; root@\u0026lt;香橙派IP\u0026gt; # 示例 ssh -p 5114 root@192.168.1.181 此时会让你输入密码，默认密码orangepi，成功连接 ssh 后就可以断掉串口连接了。\n切换到root后顺带使用passwd root修改root的密码。然后使用top查看进程。进入top后输入u（小写）筛选用户，输入用户名orangepi就可以查看orangepi下面的所有进程了，使用上下选择，使用k（小写）就可以结束对应的进程。\n成功结束orangepi下的所有进程后就可以开始进行更改或者删除了。\n更改： 更改用户名：usermod -l \u0026lt;新用户名\u0026gt; \u0026lt;旧用户名\u0026gt; 更改用户home目录名：usermod -d /home/\u0026lt;新用户名\u0026gt; -m \u0026lt;新用户名\u0026gt; 更改用户组名：groupmod -n \u0026lt;新用户名\u0026gt; \u0026lt;旧用户名\u0026gt; 删除后新建： 删除用户：userdel -r \u0026lt;旧用户名\u0026gt; 新建用户：useradd -m \u0026lt;新用户名\u0026gt; 修改命令提示符 # 我想将root和he_tong的命令提示符都修改掉，并且root使用默认的 bash 作为解析器，而he_tong使用 zsh。\n首先修改 root 的：\n先将完整地.bashrccopy 到root的家目录：cp /etc/skel/.* ~ 修改命令提示行部分，我想使用 KALI 的命令提示样式，修改完成保存后后source ~/.bashrc即可生效： # # 默认的： # if [ \u0026#34;$color_prompt\u0026#34; = yes ]; then PS1=\u0026#39;${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ \u0026#39; else PS1=\u0026#39;${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ \u0026#39; fi unset color_prompt force_color_prompt # # KALI的： # # The following block is surrounded by two delimiters. # These delimiters must not be modified. Thanks. # START KALI CONFIG VARIABLES PROMPT_ALTERNATIVE=twoline NEWLINE_BEFORE_PROMPT=yes # STOP KALI CONFIG VARIABLES if [ \u0026#34;$color_prompt\u0026#34; = yes ]; then # override default virtualenv indicator in prompt VIRTUAL_ENV_DISABLE_PROMPT=1 prompt_color=\u0026#39;\\[\\033[;32m\\]\u0026#39; info_color=\u0026#39;\\[\\033[1;34m\\]\u0026#39; prompt_symbol=@ if [ \u0026#34;$EUID\u0026#34; -eq 0 ]; then # Change prompt colors for root user prompt_color=\u0026#39;\\[\\033[;94m\\]\u0026#39; info_color=\u0026#39;\\[\\033[1;31m\\]\u0026#39; # Skull emoji for root terminal prompt_symbol=💀 fi case \u0026#34;$PROMPT_ALTERNATIVE\u0026#34; in twoline) PS1=$prompt_color\u0026#39;┌──${debian_chroot:+($debian_chroot)──}${VIRTUAL_ENV:+(\\[\\033[0;1m\\]$(basename $VIRTUAL_ENV)\u0026#39;$prompt_color\u0026#39;)}(\u0026#39;$info_color\u0026#39;\\u\\[\\033[0;1m\\]\u0026#39;$prompt_symbol\u0026#39;\u0026#39;$info_color\u0026#39;\\h\u0026#39;$prompt_color\u0026#39;)-[\\[\\033[0;1m\\]\\w\u0026#39;$prompt_color\u0026#39;]\\n\u0026#39;$prompt_color\u0026#39;└─\u0026#39;$info_color\u0026#39;\\$\\[\\033[0m\\] \u0026#39;;; oneline) PS1=\u0026#39;${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV)) }${debian_chroot:+($debian_chroot)}\u0026#39;$info_color\u0026#39;\\u@\\h\\[\\033[00m\\]:\u0026#39;$prompt_color\u0026#39;\\[\\033[01m\\]\\w\\[\\033[00m\\]\\$ \u0026#39;;; backtrack) PS1=\u0026#39;${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV)) }${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ \u0026#39;;; esac unset prompt_color unset info_color unset prompt_symbol else PS1=\u0026#39;${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ \u0026#39; fi unset color_prompt force_color_prompt esac 接下来修改he_tong的命令解释器为 ZSH\n切换到用户he_tong运行oh-my-zsh安装脚本（二选一）： # 境外： sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; # 境内： sh -c \u0026#34;$(curl -fsSL https://install.ohmyz.sh/)\u0026#34; 安装主题「Powerlevel10k」： # 境外： git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k # 境内： git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k 使用主题： vim ~/.zshrc # 修改 ZSH_THEME 这一项 ZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; 安装插件： # zsh-autosuggestions git clone https://github.com/zsh-users/zsh-autosuggestions.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions # zsh-history-substring-search git clone https://github.com/zsh-users/zsh-history-substring-search.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-history-substring-search # zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting # zsh-you-should-use git clone https://github.com/MichaelAquilina/zsh-you-should-use.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-you-should-use 启用插件： vim ~/.zshrc # 修改 plugins 这一项 plugins=(git copypath zsh-you-should-use zsh-autosuggestions zsh-syntax-highlighting zsh-history-substring-search sudo) # 使 .zshrc 生效 source ~/.zshrc 最后 # 以上就是我配置香橙派的主要历程了，写篇文章还是为了备份一些东西，如果对你有什么启发那更好不过了。😘\n参考 # OrangePi Zero3官方Wiki 知乎 Dream 的专栏 - Oh My Zsh, 『 Powerlevel10k 安装 \u0026amp; 配置 』 知乎 tongysh​​ 的专栏 - 程序员必备终端神器ohmyzsh的安装与配置过程（保姆级） ","date":"2024 年 9 月 4 日","externalUrl":null,"permalink":"/posts/documenting-an-opizero3-use/","section":"Posts","summary":"","title":"记录一下香橙派 Zero3 的使用","type":"posts"},{"content":" 前言 # 本文用于教电脑小白如何安装 Windows 的 teamspeak3，如果是想搭建自己的 teamspeak 服务器请跳转到如何搭建自己的 ts3 服务器\n由于是主要教小白，所以本文主要只说怎么做，大部分地方不会说为什么\n准备 # 一台能够正常连接网络的电脑 解压软件（推荐使用 Bandzip） teamspeak3 的安装包（前往我的网站下载，打不开的话可以使用网络代理，或者前往官网下载） teamspeak3 的汉化文件（上一条压缩包中包含，或者在这里单独下载） 开始之前 # 安装解压软件 # 你需要检查自己电脑有没有解压软件，例如Bandzip、WinRAR、7zip或者360压缩。有的话直接跳过到下一条，如果没有或者不确定的话请回到上一条中第二小条「解压软件」下载「Badnzip」\n下载好后双击安装文件，如果弹出 UAC 提示请选择「是」 版本类型选择「评价版」 阅读协议，自动发送报告可选可不选，决定不了就不选，然后点击「同意并安装」按钮 等待进度条结束后点击关闭 接下来会弹出 Bandzip 的设置界面，直接点击左下角确定即可 弹出的 Badnzip 主界面直接右上角叉掉即可，桌面和底部任务栏生成的快捷方式可以删掉（桌面快捷方式拖动到「回收站」即可，底部任务栏的可以右键后点击「从任务栏取消固定」） 安装完成后可以删掉下载的安装包 进行解压 # 双击下载的 teamspeak3 压缩包，名称为TeamSpeak3-Client-win64-\u0026lt;版本号\u0026gt;.zip 将左边的文件夹TeamSpeak3-Client-win64-\u0026lt;版本号\u0026gt;.zip拖动到桌面上的空白位置（如果你是用的其他解压软件可以找到「解压」按钮，然后解压位置选择桌面即可） 开始安装 # 双击进入刚刚解压的压缩包，可以看到有两个文件TeamSpeak3-Client-win64-\u0026lt;版本号\u0026gt;.exe和Chinese_Translation_zh-CN.ts3_translation，先双击TeamSpeak3-Client-win64-\u0026lt;版本号\u0026gt;.exe这个文件 如果弹出 UAC 提示请选择「是」，点击「Next」按钮 将协议拉到最下面，然后勾选「I accept the terms of the License Agreement」，再点击「Next」 询问安装给谁可以自行选择，不知道就直接选择第一个「Install for anyone using this computer」，然后点击「Next」 安装路径默认是在C:\\盘，如果想更改到其他盘可以直接修改文字内容「C:\\Program Files」为自己想改到的盘。（例如我想改到E:\\盘，就将C:\\Program Files改为E:\\即可，文本框内文本就变为了E:\\TeamSpeak 3 Client。）然后点击「Next」 数据保存位置默认即可，直接点击「Next」 游戏内覆盖可选，如果你想在游戏内看到是谁在讲话就勾选「Install the offcial TeamSpeak overlay, by Overwolf」，效果同示例图一样。不需要的话直接点击「Install」即可（如果此时出现运行库安装窗口不用慌，这是在安装运行 Teamspeak3 所必须的运行库） 安装结束，直接点击「Finish」按钮 叉掉 teamspeak3，接下来进行汉化 安装汉化 # 刚开始解压出来的文件夹中的另一个文件Chinese_Translation_zh-CN.ts3_translation就是汉化文件，直接双击，会弹出插件介绍\n如果双击后让你选择打开方式或者没有反应可以先启动一下 Teamspeak3 再试试 直接点击「Install」，提示是否启用直接选择「Yes」\n至此安装完毕，可以直接删掉下载的压缩包TeamSpeak3-Client-win64-\u0026lt;版本号\u0026gt;.zip和解压出来文件夹TeamSpeak3-Client-win64-\u0026lt;版本号\u0026gt;\n进入ts3并添加标签 # 此时重启 Teamspeak3，会发现界面变为了中文\n如果弹出了使用协议先将右边滑条拖动到最底部，然后勾选同意即可 安装时勾选安装了游戏内覆盖会弹出 Overwolf 介绍，直接叉掉或者点击「Continue」按钮即可 初次使用会弹出 myTeamSpeak 账号登录界面，直接点击左下角「跳过登录」即可 弹出选择昵称请输入自己的昵称再点击「OK」就行 点击顶部「书签」菜单栏，选择「书签管理器」\n点击左下角「新增书签」按钮\n点击下面的「进阶选项」，依次修改书签属性\n书签名：HeTong的ts3服务器 昵称：填入自己昵称即可（如果刚刚弹出的昵称输入框填了会直接显示刚刚填的昵称） 服务器别名或地址：ts3.hetong-re4per.com 勾选「启动时连接此服务器」 音频输入配置和输出配置选择「Default」 其他几项都为空或默认即可 点击「OK」按钮 此时可以选择点击顶部「书签」菜单栏，选择「HeTong的ts3服务器」来进入我的服务器；或者直接叉掉「Teamspeak3」，然后再启动以进入我的服务器 优化语音 # ts3提供了降噪和回声消除等功能，接下来教学如何开启\n在顶部「工具」菜单栏中选择「设置」 在左边选择「音频输入」 配置文件选择Default（否则不要问为何不生效）在「激活」这一栏中「语音检测」一项找到「模式」，选择「Volume Gate」，下面的滑条就激活了，拖动到合适的位置（你可以点击下面的「开始测试」按钮，边说话边测试，直到背景噪音不影响自己说话为止。“-20”时可能效果比较好，但实际请自己测试，不同耳机性能不同）（当然你也可以选择使用按键激活，需要选择「按键说话」，然后点击「未分配快捷键」来分配按键说话的快捷键） 数字信号处理这一栏除了「回声抑制[闪避]」不选其他全部勾选即可，「消除背景噪音」直接拉满，然后点击右下角「OK」按钮即可 回到主界面找到顶部菜单栏中「个人」-\u0026gt;「音频输入配置」，选择「Default」 最后 # 以上就是 ts3 的安装以及配置方法了，还有疑问的话欢迎评论区或者邮箱提问\n","date":"2024 年 9 月 3 日","externalUrl":null,"permalink":"/posts/how-to-install-teamspeak3/","section":"Posts","summary":"","title":"如何安装 Teamspeak3","type":"posts"},{"content":"","date":"2024 年 9 月 2 日","externalUrl":null,"permalink":"/tags/cloudflare/","section":"Tags","summary":"","title":"Cloudflare","type":"tags"},{"content":"","date":"2024 年 9 月 2 日","externalUrl":null,"permalink":"/tags/cloudreve/","section":"Tags","summary":"","title":"Cloudreve","type":"tags"},{"content":"","date":"2024 年 9 月 2 日","externalUrl":null,"permalink":"/tags/%E4%B8%AA%E4%BA%BA%E4%BA%91%E7%9B%98/","section":"Tags","summary":"","title":"个人云盘","type":"tags"},{"content":" 前言 # 请合理使用这些免费资源，不要滥用，大家都不想失去这些免费工具和资源。 由于我有一些分享文件的需求，而市面上的大部分云盘都不符合我的预期。在使用 CDN 过程中了解“赛博活佛” Cloudflare 后知道了他们提供的免费的对象储存 R2，发现这个十分符合我的需求。它有 10G/mon 的免费存储额度，并且我分享的范围很小，所以对我来说是一个免费的存储对象。\n开始之前 # R2介绍 # Cloudflare R2 Storage allows developers to store large amounts of unstructured data without the costly egress bandwidth fees associated with typical cloud storage services.\nCloudflare R2 Storage 允许开发人员存储大量非结构化数据，而无需支付与典型云存储服务相关的昂贵的出口带宽费用。\n选择它主要是因为它对于我来说是免费的，很适合我们这些个人开发者和小型企业。不像国内的一些 OSS 方案提供商，看着每个月使用 OSS 费用很便宜，但是使用后才发现出站的流量和存储空间是独立与使用费的。每个月只要存的有东西就需要支付一定存储数据或者有外网访问就需要额外支付。而 Cloudflare R2 储存数据量小于 10G/mon ，每个月数据修改量小的话就是免费的，向外网传送数据也是免费的。官方有一个价格计算器，用来比较R2和亚马逊S3对象存储价格。以下是 Cloudflare R2 的免费套餐定价规则：\n项目 免费额度 存储 10 GB / 月 A 类操作 100 万个请求 / 月 B 类操作 1000 万个请求 / 月 出口（数据传输到 Internet） 免费 Cloudreve介绍 # Cloudreve 是一个可以自定义存储策略、虚拟文件系统、离线下载、分享等功能的网盘系统。您可以通过多种设备和应用访问您的文件，也可以创建分享链接来控制文件的访问权限。\n选择 Cloudreve 的主要原因是它支持 S3 协议，并且支持几乎完整地 Cloudflare R2 API，还有丰富的插件，可以满足大部分需求。\n准备工作 # 一个可以正常访问 Cloudflare dash 的网络环境 一个域名，并且需要将域名托管到 Cloudflare 上 一张外币卡（支持 visa、万事达、运通其中任意一个） 一个用来搭建 Cloudreve 的 VPS（我用的是白嫖的一年 Amazon AWS） 搭建 Clourflare R2 # 准备 Cloudflare 账号 # 首先你需要一个 Cloudflare 账号、一个域名，并且域名需要托管到 Cloudflare 上。如果没有域名的话在后面的 R2 部分公网访问资源就只能使用 CF 提供的子域名，但是会有一定限制，所以不建议使用。\n启用 r2.dev 访问时，Internet 上的任何人都可以使用公共 r2.dev URL 查看此存储桶中的对象。但在使用时有速率限制，因此，不建议用于生产。此外，访问和缓存等 Cloudflare 功能无法再使用。\n你可以直接点击下面按钮前往 R2 创建界面，如果没有 Cloudflare 账号请先注册并登录，拥有 Cloudflare 账号的话可以直接登录。\n开始使用Cloudflare R2\r创建订阅 # 登录 Cloudflare 账号后就会直接进入 R2 订阅界面，点击「进入付款详细信息」 添加自己的支付方式，然后点击「保存付款信息」 接下来会进行卡的验证，请确认自己卡中至少有 $1，点击「继续转到仪表板」进入下一步 创建 R2 储存桶 # 在左侧菜单栏找到「R2 -\u0026gt; 概述」 在右边面板点击「创建储存桶」按钮 输入储存桶名称，其他选项默认，然后点击「继续创建储存桶」 这个时候你就已经成功创建储存桶了，接下来转入下一步设置 API tokrn\n获取 R2 储存桶的API密钥 # 回到 R2 主界面，在右侧找到「管理 R2 API 令牌」 点击「创建 API 令牌」按钮 输入API 密钥名称，默认也行，权限请务必选择选择「管理员读和写」，TTL 选择「永久」 点击右下角「创建 API 令牌」 此时会弹出你的 token 等，此页面内容不会再次显示，请务必复制下来保存好 搭建 Cloudreve # 本部分主要按照 Cloudreve 官方搭建教程进行进行搭建 获取 Cloudreve # 你可以在 GitHub Release 页面获取已经构建打包完成的主程序。其中每个版本都提供了常见系统架构下可用的主程序，命名规则为cloudreve_版本号_操作系统_CPU架构.tar.gz。比如，普通 64 位 Linux 系统上部署 3.0.0 版本，则应该下载cloudreve_3.0.0_linux_amd64.tar.gz。\n启动 Cloudreve # Linux 下，直接解压并执行主程序即可：\n#解压获取到的主程序 tar -zxvf cloudreve_VERSION_OS_ARCH.tar.gz # 赋予执行权限 chmod +x ./cloudreve # 启动 Cloudreve ./cloudreve Cloudreve 在首次启动时，会创建初始管理员账号，请注意保管管理员密码，此密码只会在首次启动时出现。如果您忘记初始管理员密码，需要删除同级目录下的cloudreve.db，重新启动主程序以初始化新的管理员账户。\nCloudreve 默认会监听5212端口。你可以在浏览器中访问http://\u0026lt;服务器IP\u0026gt;:5212进入 Cloudreve。\n以上步骤操作完后，最简单的部署就完成了。你可能需要一些更为具体的配置，才能让 Cloudreve 更好的工作，具体流程请参考下面的配置流程。\nNginx 配置反向代理 # 请先前往 Cloudflare 的 DNS 解析记录添加服务器A记录。 由于我使用的 Cloudflare 的 SSL/TLS 完全（严格）加密模式，所以这里我只添加一个 443 端口的反向代理即可。配置文件中的ssl_certificate和ssl_certificate_key为证书和私钥没有的话请前往 Cloudflare 的「SSL/TLS -\u0026gt; 源服务器」中进行创建和下载。\nserver { listen 443 ssl http2; server_name yourdomain.com; # 将 yourdomain.com 替换为你的实际域名 ssl_certificate /etc/nginx/ssl/yourdomain.com.cer; # 请替换为你的证书路径 ssl_certificate_key /etc/nginx/ssl/yourdomain.com.key; # 请替换为你的私钥路径 location / { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Range $http_range; proxy_set_header If-Range $http_if_range; proxy_redirect off; proxy_pass http://127.0.0.1:5212; } } 配置进程守护 # Systemd：\n# 编辑配置文件 vim /usr/lib/systemd/system/cloudreve.service 将下文 PATH_TO_CLOUDREVE 更换为程序所在目录：\n[Unit] Description=Cloudreve Documentation=https://docs.cloudreve.org After=network.target After=mysqld.service Wants=network.target [Service] WorkingDirectory=/PATH_TO_CLOUDREVE ExecStart=/PATH_TO_CLOUDREVE/cloudreve Restart=on-abnormal RestartSec=5s KillMode=mixed StandardOutput=null StandardError=syslog [Install] WantedBy=multi-user.target # 更新配置 systemctl daemon-reload # 启动服务 systemctl start cloudreve # 设置开机启动 systemctl enable cloudreve 管理命令：\n# 启动服务 systemctl start cloudreve # 停止服务 systemctl stop cloudreve # 重启服务 systemctl restart cloudreve # 查看状态 systemctl status cloudreve 配置Cloudreve使用R2 # 使用 Nginx 配置反向代理这一步配置的地址（https://yourdomain.com），进入Cloudreve主页\n登录后点击右上角头像，点击「管理面板」\n从左侧菜单栏选择「存储策略」，点击「添加存储策略」按钮，选择「AWS S3」\n对照图片填入配置:\nBucket: 储存桶的名称 空间类型: 阻止全部公共访问权限 Endpoint: R2 的域名，格式：\u0026lt;Cloudflare R2 账户ID\u0026gt;.com.r2.cloudflarestorage.com S3 Endpoint 地址格式: 强制路径格式 储桶所在的区域: auto 是否要对下载/直链使用 CDN: 否 访问密钥： AccessKey: 访问密钥 ID SecretKey: 机密访问密钥 存储策略名: 填写自己喜欢的存储策略名称 接下来一直点击「下一步」即可，如果有想要修改的请自行修改\n到「跨域策略可选」这一步点击「让 Cloudreve 帮我设置」，如果右上角弹出弹出「跨域策略已添加」即为成功\n最后点击「完成」即可，然后去用户组修改你想要使用R2的用户组的存储策略 ","date":"2024 年 9 月 2 日","externalUrl":null,"permalink":"/posts/bulid-own-cloud-drive-on-cloudflare-r2/","section":"Posts","summary":"","title":"使用 Clooudflare R2 + Cloudreve 构建属于自己的云盘","type":"posts"},{"content":"","date":"2024 年 8 月 17 日","externalUrl":null,"permalink":"/tags/waline/","section":"Tags","summary":"","title":"Waline","type":"tags"},{"content":"上一篇文章教学了如何使用 google 的 firebase 作为后端数据库来启用主题 Blowfish 原生的阅读量和点赞量，这一期教程应该是其他部分主题也能用到的，使用 waline 前端评论框架和 verecel 后端服务器来搭建一个自己的评论系统。\nWaline 是一个轻量级的评论系统，可以在你的网站中提供评论与浏览量服务。支持 markdown 语法评论，评论审查，表情系统，阅读量统计，自定义样式等。\nLeanCloud 设置 (数据库) # 进入 LeanCloud 国际版，进行\r注册\r（推荐国际版是因为国内版的需要域名备案，详情可以去官方文档查看） 进入控制台，点击左上角「创建应用」并起一个你喜欢的名字 (请选择免费的开发版) 直接进入左下角「设置」-\u0026gt;「应用凭证」，将 AppID、AppKey和 MasterKey复制保存下来 Vercel 部署 (服务端) # 进入\rVercel\r使用 Github 登录后进行部署 Git Scope 选择自己的 Github 账号；Repository Name 填自己喜欢的名字；Create private Git Repository 是选择是否设置为个人仓库，建议选择默认 等待Vercel自动创建和初始化 Waline 仓库，初始化完毕后点击 Go to Dashboard 跳转到应用控制台。 进入项目的「Settings -\u0026gt; Environment Variables」，创建三个值 LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY，分别在对应的 Value填上在 LeanCloud 获得的 AppID、AppKey和 MasterKey。 点击顶部「Deployments」选项卡，再点击最新一次的部署右边的「···」，选择「Redeploy」。 此时会跳转到「Overview」界面开始部署，等待片刻后 STATUS 会变成 Ready。 再点击「Visit」，即可跳转到部署好的网站地址，此地址即为你的服务端地址。 自定义域名（可选） # 点击顶部的「Settings -\u0026gt; Domains」进入域名配置页\n在输入框输入需要绑定的域名然后点击「Add」（假设我添加了一个域名为 example.mydomain.com）\n在你所托管的域名服务器商处添加新的 CNAME解析记录，那么我的就是\n类型 记录 值 CNAME example cname.vercel-dns.com 等待 DNS 生效后就可以通过自定义域名进行访问了\n评论系统：example.mydomain.com 评论管理：example.mydomain.com/ui Html引入 # 现在所有的服务端都搭好了，开始进行前端修改，我这里以我使用的 Blowfish 为例，对应的主题请寻找对应的添加方式\n在站点根目录下的layouts/partials文件夹下创建一个comment.html文件，并添加以下代码，serverURL记得改为自己的 \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/@waline/client@v2/dist/waline.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import { init } from \u0026#39;https://unpkg.com/@waline/client@v2/dist/waline.mjs\u0026#39;; init({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;https://example.mydomain.com/\u0026#39;, lang: \u0026#39;zh-CN\u0026#39;, locale: { placeholder: \u0026#39;\u0026lt;评论提示语不需要的话直接注释掉本行\u0026gt;\u0026#39; }, wordLimit: 500, search: false, pageview: true, emoji: [ // 表情包，不需要的直接注释或者删除 \u0026#39;//unpkg.com/@waline/emojis@1.2.0/bmoji\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.2.0/tieba\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.2.0/qq\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.2.0/alus\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.1.0/bilibili\u0026#39;, \u0026#39;https://cdn.jsdelivr.net/gh/norevi/waline-blobcatemojis@1.0/blobs\u0026#39;, ], dark: \u0026#39;html[class=\u0026#34;scroll-smooth dark\u0026#34;]\u0026#39;, }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /*日间模式*/ :root { /* 字体大小 */ --waline-font-size: 16px; /* 白色 */ --waline-white: #ffff; /* 浅灰色 */ --waline-light-grey: #999; /* 深灰色 */ --waline-dark-grey: #666; /* 主题色 */ --waline-theme-color: #3b82f6; /* 活动状态的颜色 */ --waline-active-color: #2ecc71; /* 一般文本颜色 */ --waline-color: #222; /* 背景颜色 */ --waline-bgcolor: #fff; /* 较浅的背景颜色 */ --waline-bgcolor-light: #f8f8f8; /* 鼠标悬停时的背景颜色 */ --waline-bgcolor-hover: #2ecc71; /* 边框颜色 */ --waline-border-color: #ddd; /* 禁用状态的背景颜色 */ --waline-disable-bgcolor: rgba(248, 248, 248, 0.4); /* 禁用状态的文本颜色 */ --waline-disable-color:#bbb; /* 代码块的背景颜色 */ --waline-code-bgcolor: #282c34; /* 引用块的颜色 */ --waline-bq-color: #f0f0f0; /* 头像 */ --waline-avatar-size: 3.25rem; /* 移动设备上的头像大小 */ --waline-m-avatar-size: calc(var(--waline-avatar-size) * 9 / 13); /* 徽章颜色 */ --waline-badge-color: #3b82f6; /* ：徽章字体大小 */ --waline-badge-font-size: 12px; /* 信息块的边框 */ --waline-info-border: 1px solid #999; /* 信息块的文本颜色 */ --waline-info-color: #999; /* 信息块的字体大小 */ --waline-info-font-size: 16px; /* 信息块背景颜色 */ --waline-info-bgcolor: rgba(235, 235, 235, 0.4); /* 渲染选择，一般边框样式 */ --waline-border: 1px solid var(--waline-border-color); /* 头像的圆角半径 */ --waline-avatar-radius: 50%; /* 阴影效果 */ --waline-box-shadow: none; } /* 暗黑模式，根据用户设置 ↓ */ html[class=\u0026#34;scroll-smooth dark\u0026#34;]{ /* 这是用于表示白色的CSS变量, 在暗模式下，白色将变为黑色*/ --waline-white: #000; /* 浅灰色的CSS变量, 在暗模式下，变为深灰色 */ --waline-light-grey: #999; /* --waline-light-grey: #666;*/ /* 示深灰色, 在暗模式下，变为浅灰色 */ --waline-dark-grey: #999; /* 一般文本颜色 */ --waline-color: #c2c2c2; /* 背景颜色 */ --waline-bgcolor: #1E293B; /* 较浅的背景颜色 */ --waline-bgcolor-light: #2A354F; /* 边框颜色 */ --waline-border-color: #666; /* 禁用状态的背景颜色 */ --waline-disable-bgcolor: rgba(68, 68, 68, 0.8); /* 禁用状态的文本颜色 */ --waline-disable-color: #888; /* 引用块颜色 */ --waline-bq-color: #1F2D4B; /* 信息块背景颜色 */ --waline-info-bgcolor: rgba(31, 45, 75, 0.8); /* 信息块字体 */ --waline-info-color: #888; /* 信息块的边框 */ --waline-info-border: 1px solid #d3d3d3; } \u0026lt;/style\u0026gt; \u0026lt;/body\u0026gt; 进入站点根目录下的config/_default文件夹，修改params.toml，将需要添加评论的地方的showComments修改为true\n重新部署你的网站，就可以看到评论系统已经成功添加了\n评论管理 (管理端) # 部署完成后，请访问 /ui/register 进行注册。首个注册的人会被设定成管理员。 管理员登陆后，即可看到评论管理界面。在这里可以修改、标记或删除评论。 用户也可通过评论框注册账号，登陆后会跳转到自己的档案页。 总结 # 总体来说其实 waline 的部署是非常简单的，并且本文只讲了怎样部署。其实 waline 支持的功能很多，十分推荐进入 waline 官网查看，做出一个适合自己的评论系统\n","date":"2024 年 8 月 17 日","externalUrl":null,"permalink":"/posts/use-waline-comment-on-hugo/","section":"Posts","summary":"","title":"在博客中使用 waline 评论","type":"posts"},{"content":"","date":"2024 年 8 月 10 日","externalUrl":null,"permalink":"/tags/firebase/","section":"Tags","summary":"","title":"Firebase","type":"tags"},{"content":" 注意 本教程是基于上一篇文章的教程，如果没有看过上一篇文章，建议先进入目录依次阅读文章。 前言 # 我们现在使用了Blowfish和hugo作为自己的博客，Blowfish是原生支持阅读量和点赞的，默认不开启，本篇文章将会指导你如何开启Blowfish的阅读量和点赞功能。\n开启阅读量和点赞量 # 进入站点根目录下的config/_default目录，找到配置文件params.toml，其中有article、list、taxonomy和term拥有showViews和showLikes这两个值\n其中article是文章页面的配置，list是列表页面的配置，taxonomy是分类页面的配置，term是标签页面的配置，请对应选择打开\n使用 firebase 作为后端数据库 # 按照上述方法打开阅读量和点赞量的配置后你会发现在文章头确实会显示点赞和阅读的图标，但是数值却一直是加载状态，因为我们需要配置firebase作为后端数据库，将数据存储到firebase中，才可以实时获取到点赞和阅读的数值。\n注册并创建 firebase 项目 # 进入firebase官网 前往 firebase 官网\r登录或者注册后登录 Google 账号\n点击「开始使用 Firebase 项目」\n输入项目名字，我这边使用blog-blowfish\n协议全部勾上，选择分析位置的时候按需选择，我这里选择「中国」\n最后点击继续，此时不要关闭浏览器和切换网络环境等，等待1min左右分配资源即可\n获取 firebase API 等 # 点击「继续」就会直接进入项目配置页面，在「将 Firebase 添加至您的应用即可开始使用」下面选择「网页应用」图标是「 」\n自己填上想要的应用名字，我这里就直接使用「blog」作为应用名了。「还为此应用设置 Firebase Hosting。」选择开启，因为我们已经使用了Github Pages，所以我不勾选，如果有把网站迁移过来的想法可以勾选。\n此时就会生成一段npm初始化firebase的代码，复制下来，存放到安全的位置，后面会用到\n// Import the functions you need from the SDKs you need import { initializeApp } from \u0026#34;firebase/app\u0026#34;; import { getAnalytics } from \u0026#34;firebase/analytics\u0026#34;; // TODO: Add SDKs for Firebase products that you want to use // https://firebase.google.com/docs/web/setup#available-libraries // Your web app\u0026#39;s Firebase configuration // For Firebase JS SDK v7.20.0 and later, measurementId is optional const firebaseConfig = { apiKey: \u0026#34;AIzaSyCqeh1gtG-KHEbcU4N053JBZ6eM8qaF4rQ\u0026#34;, authDomain: \u0026#34;blog-blowfish-68e82.firebaseapp.com\u0026#34;, projectId: \u0026#34;blog-blowfish-68e82\u0026#34;, storageBucket: \u0026#34;blog-blowfish-68e82.appspot.com\u0026#34;, messagingSenderId: \u0026#34;272654749490\u0026#34;, appId: \u0026#34;1:272654749490:web:15aedf00da71774b7c512b\u0026#34;, measurementId: \u0026#34;G-KFZZ7CMD6V\u0026#34; }; // Initialize Firebase const app = initializeApp(firebaseConfig); const analytics = getAnalytics(app); 配置 Cloud Firestore 和 Authentication # 在项目主页应该就可以看见「Cloud Firestore」选项，没有的话在左边菜单栏的「构建」中\n点击「创建数据库」按钮，然后「下一步」，「创建」\n创建好后从左边菜单栏「构建」一栏中选择「Authentication」，点击「开始」\n顶部选择「登录方法」，选择「匿名」，点击启用即可\n配置 Blowfish # 现在firebase已经配置完毕了，回到我们的博客根目录，进入config/_default，找到配置文件params.toml，修改里面的firebase部分\n[firebase] # apiKey = \u0026#34;XXXXXX\u0026#34; # authDomain = \u0026#34;XXXXXX\u0026#34; # projectId = \u0026#34;XXXXXX\u0026#34; # storageBucket = \u0026#34;XXXXXX\u0026#34; # messagingSenderId = \u0026#34;XXXXXX\u0026#34; # appId = \u0026#34;XXXXXX\u0026#34; # measurementId = \u0026#34;XXXXXX\u0026#34; 刚刚配置 firebase 时那一段代码，依次按照取消注释和修改这一部分的值，修改完成后保存即可\n测试 # 现在重新部署你的博客，进入文章页面，你应该就可以看到点赞和阅读的数值了\n参考 # 官方文档：Firebase: 阅读量 \u0026amp; 点赞量 ","date":"2024 年 8 月 10 日","externalUrl":null,"permalink":"/posts/show-like-and-view-on-blog/","section":"Posts","summary":"","title":"如何为自己的博客开启阅读量和点赞量显示","type":"posts"},{"content":" 前言 # 由于自己买的服务器快过期了，上面搭了很多服务，包括自己的博客，虽然文章不多，但是不想以后再写一遍。想到了 Github Page ，由于踩坑过多，于是想记录一下，说不定能帮上别人呢。\nGitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。\n准备工作 # 一个 Github 账号，这个就不用我多说了吧 一个域名（可选），如果你有自己的域名，搭建好后可以将其指向 Github Page 的地址 一个文本编辑器（如 VSCode） 步骤 # 注意 本教程主要写给有一定计算机基础的人，如果你是小白，建议先去学一下基本的计算机知识，例如如何使用命令行、如何添加环境变量以及 Github 和 Git 的使用等。 创建 Github 仓库 # 登录 Github，点击右上角的「 + 」按钮，选择「New repository」。 在「Repository name」输入框中输入你的仓库名称，格式为 \u0026lt;username\u0026gt;.github.io，其中 \u0026lt;username\u0026gt; 是你的 Github 用户名。 在「Description」输入框中输入你的仓库描述（可选）。 选择Public 勾选「Initialize this repository with a README」选项，创建一个 README 文件。 点击「Create repository」按钮，创建你的 Github 仓库。 本地安装 Hugo # 前往Hugo的官方Github仓库 release，选择对应的版本进行下载，这里我用 Windows 举例，选择hugo_0.131.0_windows-amd64.zip下载。 gohugoio/hugo The world’s fastest framework for building websites. Go 78355 7697 解压hugo_0.131.0_windows-amd64.zip，放在你自己觉得合适的位置，比如D:\\hugo\n然后将hugo.exe所在的路径添加到系统的环境变量中。注意，是存放hugo.exe文件夹路径而不是hugo.exe的路径哦\n安装完成后，输入以下命令验证安装是否成功： hugo version 如果成功安装，会显示 Hugo 的版本信息。\n创建 Hugo 站点 # 在终端或命令提示符中，输入以下命令创建一个新的 Hugo 站点。其中，\u0026lt;site-name\u0026gt; 是你的站点名称，可以根据自己的喜好进行命名。例如我的站点名称为blog，则命令为： hugo new site \u0026lt;site-name\u0026gt; # 示例 hugo new site blog 进入站点目录： cd \u0026lt;site-name\u0026gt; # 示例 cd blog 介绍一下hugo的目录结构，以下就是站点根目录\n. ├─ archetypes # 存放文章的模板文件 ├─ assets # 存放静态资源文件 ├─ content # 存放文章的目录 ├─ i18n # 存放国际化文件的目录 ├─ data # 存放数据文件的目录 ├─ layouts # 存放布局文件的目录 ├─ static # 存放静态文件的目录 ├─ themes # 存放主题的目录 └─ hugo.toml # 站点配置文件 新建一篇文章 hugo new posts/my-first-post.md 此时会在站点目录下的content文件夹中生成posts文件夹，同时在其中生成文件my-first-post.md。使用文件管理器然后用你喜欢的文本编辑器打开这个.md文件\n打开后可以看到已经预生成了一些内容。例如title是标题，date是日期，draft是草稿状态（草稿状态如果设置为true的话后面进行渲染后是看不见的，需要设定参数-D，像这样hugo server -D）。\n+++ title = \u0026#39;My First Post\u0026#39; date = 2024-08-09T20:03:34+08:00 draft = true +++ 启动hugo预览： hugo server 在浏览器中访问 http://localhost:1313，即可看到你的站点。但此时你会发现是Page Not Found。不用急，因为我们还没有装主题。先CTRL+C停止服务器 安装主题 # 这里我就使用我现在正在使用的主题blowfish做演示，其他主题建议去寻找对应的官方文档进行配置\n前往Blowfish官网\r进入站点目录，依次使用以下指令： git init -b main git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 进入themes/blowfish目录，找到archetypes和config目录，复制到站点根目录的archetypes和config，提示要替换文件选择「是」 . ├─ archetypes # 复制到这儿 ├─ assets ├─ config # 和这儿 ├─ content ├─ data ├─ i18n ├─ layouts ├─ public ├─ static └─ themes └─ blowfish ├─ .github ... ├─ archetypes # 将这个文件夹 ... ├─ config # 和这个文件夹 ... 进入你刚刚复制的config/_default文件夹中，将languages.en.toml、menus.en.toml两个文件中间的en改为你的默认语言，例如languages.zh-cn.toml、menus.zh-cn.toml\n现在回到你的站点根目录，进入刚刚复制过来的config/_default文件夹中，找到hugo.toml文件，可以在开头看到下面这一段，先添加一句在下面hasCJKLanguage = true，用来后面开启正确的汉字计数。\n取消第五、六行的注释 将your_domain.com替换为你的域名，如果没有域名，可以将其替换为你刚刚创建的git仓库的名字：https://\u0026lt;username\u0026gt;.github.io，其中\u0026lt;username\u0026gt;是你的 Github 用户名 将en替换为你的默认语言，例如zh-cn表示中文简体 1 2 3 4 5 6 7 8 9 10 11 # -- Site Configuration -- # Refer to the theme docs for more details about each of these parameters. # https://blowfish.page/docs/getting-started/ theme = \u0026#34;blowfish\u0026#34; # UNCOMMENT THIS LINE baseURL = \u0026#34;https://your_domain.com/\u0026#34; defaultContentLanguage = \u0026#34;zh-cn\u0026#34; hasCJKLanguage = true # Other configuration options... 现在回到站点根目录，使用以下命令启动 Hugo 服务器： hugo server 在浏览器中访问 http://localhost:1313，可以看到你的站点已经成功运行了。🎉Congratulations! 现在你已经完成了一半了，接下来就是配置你的站点了。 配置站点 # 本节所有配置都是在config/_default文件夹下进行，可以边运行着hugo server边观察修改情况。 本小节建议参照官方文档 在站点根目录下，找到config/_default文件夹，打开languages.zh-cn.toml文件，以下是我自己的文件，请自行修改： languageCode = \u0026#34;zh-cn\u0026#34; languageName = \u0026#34;Simplified Chinese (China)\u0026#34; weight = 1 title = \u0026#34;瞳のBlog\u0026#34; [params] displayName = \u0026#34;简体中文\u0026#34; isoCode = \u0026#34;cn\u0026#34; rtl = false dateFormat = \u0026#34;2006 年 1 月 2 日\u0026#34; logo = \u0026#34;img/site_logo.png\u0026#34; # secondaryLogo = \u0026#34;img/secondary-logo.png\u0026#34; description = \u0026#34;HeTongRe4per\u0026#39;s website\u0026#34; copyright = \u0026#39;© 2024 - { year } 褐瞳さん All Rights Reserved.\u0026#39; [params.author] name = \u0026#34;褐瞳さん\u0026#34; image = \u0026#34;img/avatar.png\u0026#34; headline = \u0026#34;驕る鳥は墜ち 頭垂れて乞い\u0026#34; bio = \u0026#34;Everyone is mania in general\u0026#34; links = [ { bilibili = \u0026#34;https://space.bilibili.com/199364052\u0026#34; }, { 163music = \u0026#34;https://music.163.com/#/user/home?id=541376277\u0026#34; }, { linkedin = \u0026#34;https://www.linkedin.com/in/hetong-re4per/\u0026#34; }, { email = \u0026#34;mailto:zhang_zlf@outlook.com\u0026#34; }, { steam = \u0026#34;https://steamcommunity.com/id/he_tong/\u0026#34; }, ] languageCode：语言代码\nlanguageName：语言名称\nweight：权重，用于排序，数值越小越靠前\ntitle：站点标题，会显示在浏览器标签页上\nparams： 站点参数\ndisplayName：语言显示名称 isoCode：语言ISO代码 dateFormat：日期格式 logo：logo位置，应当存放在themes/blowfish/assets/img下 description：网站描述 author：作者信息，都会显示在文章页和主页\nname：作者名称 image：作者头像位置，应当存放在themes/blowfish/assets/img下 headline：作者标语 bio：作者简介 links：作者链接，可以添加多个 打开menus.zh-cn.toml文件进行修改，此部分请参考官方文档 [[main]] name = \u0026#34;Home\u0026#34; pageRef = \u0026#34;/\u0026#34; weight = 10 [[main]] name = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;/posts\u0026#34; weight = 20 [[main]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;/tags\u0026#34; weight = 30 打开params.toml文件进行修改，请参照官方文档 创建文章 # 注意 如果文章没有实时渲染请先确认文章是否是草稿状态，如果想渲染草稿请使用hugo server -D Blowfish官方简码使用方式：简码 markdown和hugo的格式文档：格式文档 文章缩略图：缩略图 Blowfish官方内容示例：内容示例 还记得我们创建的第一个文章吗posts/my-first-post.md，它的头部和我们以后写的文章可能不太一样，所以推荐删除后创建新的文章，使用以下命令创建新的文章。当然你没有强迫症可以直接在my-first-post.md上修改就行：\nhugo new posts/my-second-post.md 打开新创建的文章，可以看到以下内容： --- title: \u0026#34;My Second Post\u0026#34; date: 2024-08-09T23:24:22+08:00 draft: true description: \u0026#34;\u0026#34; --- 修改文章的标题和内容，保存文件。\n在浏览器中访问 http://localhost:1313，进入Posts一栏可以看到你的文章已经成功创建并显示在页面上。\n部署到Github Pages # 在站点根目录下，使用以下命令生成静态文件： hugo 静态文件都将生成在public内，所以先进入生成的public文件夹，然后依次使用以下命令将文件推送到你的 Github 仓库： git init -b main # 由于我们之前安装主题时已经初始化过了可以不执行这一条 git remote add origin https://github.com/\u0026lt;your-username\u0026gt;/\u0026lt;your-username\u0026gt;.github.io.git git pull --rebase origin main git add . git commit -m \u0026#34;\u0026lt;提交说明\u0026gt;\u0026#34; git push -u origin main 等待一段时间后，你的站点就会部署到 Github Pages 上，你可以在浏览器中访问 https://\u0026lt;your-username\u0026gt;.github.io 来查看你的站点。\n之后新增文章或者修改网站属性需要提交可以使用\ngit add . git commit -m \u0026#34;\u0026lt;提交说明\u0026gt;\u0026#34; git pull --rebase origin main # 可选,如果远端仓库与本地一致，则不需要合并。 git push origin main 如果需要配置自定义域名，请自行上网搜索，非常的简单，不多赘述。\n一些小技巧和提示 # 1. 分享链接和RSS链接错误 # 如果你设置了文章分享链接或者想使用RSS但是发现分享链接中并不是你设定的baseURL，而是localhost:1313，请不要直接使用hugo server后 push 到仓库，而是使用hugo生成静态文件后再 push 到仓库。\n2. 添加自定义图标 # 如果想使用原本主题中不存在的图标，比如 、 等，你可以去寻找对应的.svg矢量图，然后改为\u0026lt;只包含有英文数字的文件名\u0026gt;.svg存放在themes/blowfish/assets/icons中，使用时直接填对应名字。例如我想用Bilibili和网易云音乐的icon，找到后将文件改名为bilibili.svg和163music.svg，然后使用{{\u0026lt;icon \u0026quot;bilibili\u0026quot;\u0026gt;}}和{{\u0026lt;icon \u0026quot;163music\u0026quot;\u0026gt;}}即可，就连主页下面的Links也是同理：\n[author] name = \u0026#34;褐瞳さん\u0026#34; image = \u0026#34;img/avatar.png\u0026#34; headline = \u0026#34;驕る鳥は墜ち 頭垂れて乞い\u0026#34; bio = \u0026#34;Everyone is mania in general\u0026#34; links = [ { bilibili = \u0026#34;https://space.bilibili.com/199364052\u0026#34; }, { 163music = \u0026#34;https://music.163.com/#/user/home?id=541376277\u0026#34; }, { linkedin = \u0026#34;https://www.linkedin.com/in/hetong-re4per/\u0026#34; }, { email = \u0026#34;mailto:zhang_zlf@outlook.com\u0026#34; }, { steam = \u0026#34;https://steamcommunity.com/id/he_tong/\u0026#34; }, ] 如果使用后发现图标颜色不对请使用文本编辑器打开对应.svg图标文件，找到fill=\u0026quot;#xxxxxx\u0026quot;修改为fill=\u0026quot;currentColor\u0026quot;；如果没有就在\u0026lt;path d='xxxxxx'\u0026gt;中间添加，修改为\u0026lt;path fill=\u0026quot;currentColor\u0026quot; d='xxxxxx'\u0026gt;。\n推荐两个svg矢量图图标网址（因为版权问题Simple Icons时常会缺失很多图标，可以使用网页时光机查到自己想要的图标，但请遵守其对应的使用规则）。\nSimple Icons Iconify.Design 3. 代码块Copy失效 # 首先请确认你是否开启了代码块快捷Copy允许，在config/_default/params.toml中的enableCodeCopy设置为true，并且config/_default/markup.toml中的highlight.noClasses设置为了false\n如果设置正确还是不可以使用那就大概率是因为你使用了不标准的Markdown代码块格式，主题作者曾在issue #610中解释。请确认代码块是否声明了对应的语言，可以在此查看，如果不是标准的编码语言可以声明为plaintext或者markdown，例如本文的目录结构表示部分就是声明为了plaintext：\n```plaintext . ├─ archetypes ├─ assets ├─ config ├─ content ├─ data ... ``` 如果还是有问题就有可能是因为结尾换行符的原因了，如果在git时有关于CRLF和LF的警告，就有可能是这个原因。可以参考一下这个issue\n参考 # Hugo官方文档 Hugo主题Blowfish 小绵尾巴 - 如何用 GitHub Pages + Hugo 搭建个人博客 ","date":"2024 年 8 月 9 日","externalUrl":null,"permalink":"/posts/how-bulid-blog-on-github-page/","section":"Posts","summary":"","title":"如何使用 Github Page 搭建自己的博客","type":"posts"},{"content":"","date":"2024 年 8 月 6 日","externalUrl":null,"permalink":"/tags/neutrino/","section":"Tags","summary":"","title":"NEUTRINO","type":"tags"},{"content":" 前言 # 本人很喜欢听歌，各种风格。而很早的时候使用软件调教的歌让我觉得很有意思，所以也想自己试着调教一首。市面上主流的歌姬调教软件有什么 UTAU、VOCALOID 和 CeVIO AI，其中 UTAU 是免费的调教软件，你在 bilibili 听到的很多人力其实也是 UTAU 调教的。而 VOCALOID 和 CeVIO AI 都是付费软件。（因为我只用过 UTAU，所以本文很多预处理都是使用 UTAU 进行的）\nUTAU 的调教刚开始用时会比较难，要想让歌姬唱的很自然有感情的话需要进行很多修饰和调音，而我只是想听听我喜欢的歌姬唱出来是什么样子，后来突然就兴起了 AIKiritan 让我很感兴趣，Kiritan 的声音很可爱，并且 AIKiritan 唱出来的歌声音都非常自然。于是我就去了解了一下，知道了 NEUTRINO。\n开始之前 # NEUTRINO是由SHACHI开发的免费歌声合成器。它基于音频合成深度学习模型（例如WaveNet，WaveRNN）与Morise开发的NSF来完成合成唱歌任务\n据官方推特，此软件的名称（软件直译：中微子）来源于一个“希望能开拓未曾听说过的乐曲与流派”的想法。\n引自萌娘百科( https://mzh.moegirl.org.cn )，文字内容默认使用《知识共享 署名-非商业性使用-相同方式共享 3.0 中国大陆》协议。\n提示 本节需要一些上网方法才能访问相关链接 你需要下载 NEUTRINO，官网是 https://studio-neutrino.com/ ，点击「Start Now」就可以前往下载页\n在下载页里找到「ダウンロード（Google Drive）」一节，点击链接「NEUTRINO Diffusion ダウンロード（Google Drive）」就会进入 NEUTRINO 的谷歌网盘\n云盘根目录会有一个文件夹叫NEUTRINO Diffusion - Muon vx.x，这里的x.x是版本号，这个文件夹默认就是 NEUTRINO 的最新版。在这个文件夹里找到NEUTRINO-windows-vx.x.x.zip并下载（这里我就默认你使用的 Windows 系统了，如果你使用的是其他系统请自行选择对应的文件下载）\n同时，在这个文件夹会有很多有人名的压缩文件，格式为\u0026lt;名字\u0026gt;（NEUTRINO-Library）-\u0026lt;版本\u0026gt;.zip，比如 Kiritan 的就是東北きりたん（NEUTRINO-Library）-v2.5.3.zip，选择你想要让其为你而唱的歌姬，也下载下来。\n接下来你就拥有了 NEUTRINO 和歌姬的声音模型，接下来可以先将 NEUTRINO 解压到你想要的位置，解压之后可以看见 NEUTRINO 的文件夹内容为\nNEUTRINO ├── bin/ NEUTRINO 的运行所需文件 ├── license/ NEUTRINO 的相关协议 ├── model/ 存放声音模型 ├── output/ 默认的生成输出位置 ├── score/ 存放生成歌曲的谱子 │ ├── label/ 和生成相关 │ └── musicxml/ 存放 musicxml 谱子 ├── settings/ NEUTRINO 的默认设定 ├── Readme（お読みください）.pdf 使用说明 ├── Run.bat 运行脚本 ├── Run_single_phrase.bat 运行单句 ├── ひらがな・カタカナ・音素一覧表.pdf 平、片假名、音素列表 ├── リリースノート.pdf 发行说明 └── 利用許諾契約書.pdf 最终用户许可协议 接下来将你下载的声音模型放入model文件夹中，model文件夹格式如\nmodel ├── KIRITAN 东北切蒲英的声音模型 ├── MERROW Merrow的声音模型 ├── NAKUMO Nakumo的声音模型 ... 乐谱准备 # 想让歌姬唱出来至少要让ta知道唱什么吧，所以我们需要一个谱子。在 NEUTRINO 中使用的乐谱格式为.musicxml格式，所以我们需要一个格式正确的.muscixml文件。官方推荐的是 MuseScore，一个乐谱编辑软件。如果你是专业的音乐师或者能够看懂五线谱推荐使用 MuseScore。因为我不是音乐系科班出身，所以这里使用了另外的方法来生成乐谱文件。\n以下我就使用 ピフ優 的 警報のあった日 谱子做演示了：\n当然，你如果不想自己从头写谱的话可以去网上搜索你想要听的歌曲的.ust文件，一般都很好搜索到（但如果真的很冷门的话就需要你来当第一人了）\n提示下面使用OpenUTAU部分如果嫌麻烦可以直接下载好需要的.ust后直接跳过，如果你有其他调音之类的需求可以参照 准备工具：\nOpenUTAU UtaFormatix UTAU声源 准备以上工具，你就可以开始创作了。OpenUTAU 是用来创作和调整乐谱的，但 OpenUTAU 只能将乐谱导出为.ust、.ustx或者.midi，所以我们还需要使用 UtaFormatix 来将上述格式转换为.musicxml（注意：不包括.midi，因为该格式不包含歌词）\n在搜索引擎中搜索关键字「歌名+ust」比如我是「警報のあった日 ust」 寻找心仪的作者的谱子下载 打开 OpenUTAU，点击左上角菜单栏「文件」，找到导入轨道，选择你的.ust文件。我这里 ピフ優 的 警報のあった日 有三个.ust文件，将其全部导入进去 选择音源，我这里使用了Kiritan（东北切蒲英） 给每个轨道选择好音源后点击左上角播放键「▶」可以进行试听，如果有觉得不对的地方可以进行调整 将每个轨道导出为.ust格式 乐谱转换 # 上面我们准备好了.ust文件，现在打开UtaFormatix，将你的.ust文件全部放进去，向下翻页，找到MusicXml\n设置部分一般默认即可，最后点击导出，会下载一个压缩包\n使用NEUTRINO生成音乐 # 将上面获得的压缩包文件解压到你的NEUTRINO\\score\\musicxml中（如果文件名有符号尽量修改掉，尽量只用字母、数字、连接符和下划线，不然可能会报错）\n回到NEUTRINO的根目录，右键Run.bat，选择编辑（这里我是用了Microsoft VS Code，完全可以使用记事本进行编辑），主要修改BASENAME（文件名）和ModelDir（模型名），其他参数可以参照这篇文章\n双击Run.bat，便会开始生成声音文件，等待进程结束（如果有多个音轨文件就多次修改和运行Run.bat文件）\n现在在NEUTRINO\\output中就可以看见生成的声音，需要使用的都是.wav格式，带和不带world的哪个效果更好都看你自己的选择\n混音和合成 # 现在有了人声部分，我们还需要伴奏，请自行去寻找，可以通过搜索引擎搜索「\u0026lt;歌名\u0026gt;+off vocal」或者「instrumental」来搜索\n使用音频编辑软件（例如Adobe Audition、Wave Editor等）进行对轴和混音等，因为我也是菜鸡，所以这里就不进行展开了，可以自行搜索教程等\n希望你可以使用NEUTRINO用自己喜欢的声源创造出属于自己的歌\n","date":"2024 年 8 月 6 日","externalUrl":null,"permalink":"/posts/neutrino/","section":"Posts","summary":"","title":"如何使用 NEUTRINO 让歌姬为你而唱","type":"posts"},{"content":" 前言 # 我相信有很多 MC 玩家在拥有了自己的第一台服务器时都想要搭建一个属于自己的服务器，我买下第一台服务器时就是为了和小伙伴开黑 MC。因为可以说是零基础搭建的服务器，在此期间遇到了很多问题，所以想借此写一篇博客，用来帮那些也是第一次搭 MC 服务器的萌新。 本篇文章主要会说到 Liunx 服务器上 Java 纯净服和 Forge 服的搭建，还会简单说一下如何在服务器上将不同端口上的 MC 服务器分配到不同的三级域名上。 MC 的服务器主要为纯净服，Mod 服和插件服，因为插件服我并没有搭建过，所以就不在这里多做解释了。\n纯净服搭建 # 需要准备的东西：\n一台服务器，云服务器或者自己搭建的本地服务器都可，我的这里使用的是阿里云服务器，系统是 Ubuntu 22.04 纯净服的服务器核心 对应版本的 Java 1.17 及以上使用 Java16，以下使用 Java8，根据自己的服务器版本装对应的 Java 版本 Xshell 和 Xftp，这俩软件的个人版是免费的，如果你的服务器上有安装宝塔，也可以直接使用宝塔 以上都准备好了就可以开始准备搭建你的纯净服服务器了\n首先将你的服务器核心放进你的服务器文件夹，比如我的的核心是 1.12.2 的版本核心，放在了 /home/HeTong/Minecraft/1.12.2文件夹内。\n接下来安装 Java，我第一次开服就在这里卡了很久，首先对应看你下载的 Java 版本是否正确，1.17 及以上的版本都需要 Java16 或者以上的版本，其他的用 Java8，如果你是 1.16.5 及以下的版本启动还有问题试试退到 Java8 更老的版本，比如我使用了 Java8 的 331 版本启动 1.12.2 却报错，换成 Java8 的 251 就好了，请对应版本下载 Jdk，比如我的的服务器就需要的是 jdk-8u251-linux-x64.tar.gz请对照自己的服务器版本下载对应的 Jdk，Java 的安装可以参照这篇文章。\n安装好了正确的 Java 版本后你就可以开始启动你的 MC 服务器啦，纯净服的启动十分的简单，直接输入\njava -Xms**m -Xmx**m -jar \u0026lt;你的核心名字\u0026gt; nogui 就会开始启动了，在这其中，-Xms**m是你的最小分配给 MC 的运行内存，-Xmx**m是你分配给MC的最大运行内存，比如我的的是\njava -Xms1G -Xmx1G -jar server-1.12.2.jar nogui 第一次启动肯定是不会直接启动的，需要你确定协议（EULA），你可以打开你的 Xftp，找到你的服务器核心的位置，里面有一个刚生成的「eula.txt」文件，右键使用记事本编辑，将 false改为 true\n#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula). #Fri Jan 12 18:56:37 CST 2024 eula=false 然后除了eula还有一个文件需要修改，就是 server.properties，里面的参数在这篇文章有详解，一般我们需要改的有「online-mode」这一项，意思是是否启用在线模式，如果是 true，将只有正版玩家可以进入游戏。 现在你已经基本设定好了你的服务器属性了，再次输入\njava -Xms**m -Xmx**m -jar server-*.*.*.jar nogui 你就会发现自己的服务器顺利启动了，ok啦！然后在控制台键入 op \u0026lt;你的ID\u0026gt;来赋予管理员权限给你自己\n接下来你就可以邀请好友进入你的服务器了，如果你打算开一个小服用来开黑一起玩建议开启白名单，在控制台键入 whitelist on便开启了白名单\n然后用 whitelist add \u0026lt;你的好友的ID\u0026gt;来添加白名单\n那想停止服务器怎么办呢？直接在控制台键入 stop 就行了，当然你也可以在游戏内以 op 身份使用指令 /stop 来停止服务器。\n当然我们不想每次启动服务器都输入那么长的指令，那我们可以写个简单的 shell 脚本，文件名为 run.sh，大概的内容是\n#!/bin/bash cd /your/minecraft/path/ screen -dmS \u0026lt;你想要的 screen 名字\u0026gt; java -Xms*G -Xmx*G -XX:+AggressiveOpts -XX:+UseCompressedOops -jar \u0026lt;mc核心文件名\u0026gt; nogui echo \u0026#34;minecraft \u0026lt;MC 的版本\u0026gt; server started successfully\u0026#34; 如果 screen 报错可以先 sudo apt-get install screen -y来安装 screen。\n其中的 screen -dmS是后台启动一个窗口名字就是你设定的名字，-XX:+AggressiveOpts -XX:+UseCompressedOops是用来优化启动的指令，/your/minecraft/path/是你放置服务器核心文件夹的绝对路径，比如我的的脚本就是\n#!/bin/bash cd /home/HeTong/Minecraft/1.12.2/ screen -dmS mc java -Xms2G -Xmx2G -XX:+AggressiveOpts -XX:+UseCompressedOops -jar minecraft_server.1.12.2.jar nogui echo \u0026#34;minecraft 1.12.2 server started successfully\u0026#34; 现在你每次启动都可以使用 ./run.sh来快捷启动 MC 服务器\n但是要记得你的 run.sh的文件位置才行的，比如我将 MC 放在了 /home/HeTong/Minecraft/1.12.2这个文件夹内，并且脚本名称为 1.12.2-run.sh，那么我想在任何地方运行服务器核心的话运行指令就为 bash /home/HeTong/Minecraft/1.12.2/1.12.2-run.sh\n那么如何用 shell 脚本停止 mc 服务器的运行呢？答案就是：\n#!/bin/sh screen -dr \u0026lt;你的screen名字\u0026gt; -X stuff \u0026#34;say 服务器将在10S后关闭！\\n\u0026#34; sleep 10 screen -dr \u0026lt;你的screen名字\u0026gt; -X stuff \u0026#34;stop\\n\u0026#34; ok以上就是纯净服的开服教程了，很简单吧，接下来说说 forge 版开服教程，其实和纯净版差不多，只是细节更多而已。\nForge服的搭建 # 首先需要准备的东西有\n一台服务器 纯净服的服务器核心并重命名为 minecraft_server.*.*.*.jar格式，其中 *.*.*是你纯净版核心的版本号 对应版本的 Java（1.16.5 以下 (包括) 使用 Java 8 以上的使用 Java 11或者更高） Xshell 和 Xftp ，或者宝塔面板 既然是 Forge 服，肯定需要 Forge 核心，对应开服版本下载核心的下载器就行了，如果一直加载不出来可以试试科学上网 首先将你的 Forge 核心的下载器和对应版本的纯净服核心放进你觉得合适的位置，比如我使用了 1.16.5 的 Forge 核心，放在了 /home/HeTong/Minecraft/1.16.5-forge下\n然后安装正确的 Java 版本（不知道为什么，似乎 Forge 对于 Java 版本要求比纯净版要求高许多）\n现在假设你没有 Java 版本的问题，你就可以到你的核心所在文件夹下运行这一段指令\njava -jar forge-***-installer.jar --installServer 其中 forge-***-installer.jar是你的 Forge 核心下载器的文件名称比如我的的是\njava -jar forge-1.16.5-36.2.0-installer.jar --installServer 如果出现了\nA problem occurred running the Server launcher.java.lang.reflect.InvocationTargetException at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:110) at java.base/java.lang.reflect.Method.invoke(Method.java:577) at net.minecraftforge.fml.relauncher.ServerLaunchWrapper.run(ServerLaunchWrapper.java:70) at net.minecraftforge.fml.relauncher.ServerLaunchWrapper.main(ServerLaunchWrapper.java:34) Caused by: java.lang.ClassCastException: class jdk.internal.loader.ClassLoaders$AppClassLoader cannot be cast to class java.net.URLClassLoader (jdk.internal.loader.ClassLoaders$AppClassLoader and java.net.URLClassLoader are in module java.base of loader \u0026#39;bootstrap\u0026#39;) at net.minecraft.launchwrapper.Launch.\u0026lt;init\u0026gt;(Launch.java:34) at net.minecraft.launchwrapper.Launch.main(Launch.java:28) at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) ... 3 more 这种类似的错误大概率是 Java 版本不对，可以多试几个 Java 版本。 现在假设你已经安装了正确的 Java 版本，这时候它第一步会下载 mc 的纯净服的服务器核心和 Forge 的核心，因为 mc 官方的下载服务器在国外，所以你的服务器如果没有下载纯净服核心大概会卡在这一步，如果你按照我说的提前准备好了纯净服的核心就会跳过纯净服核心下载这一步，然后等待下载 libraries 库，有的时候也会因为网络原因卡在某一个下载上，你可以试试在自己电脑上先运行 Forge 安装 Server，将下载的 libraries 库打包到服务器上。 现在你已经装好了 Forge 核心，在你的 forge-***-installer.jar同级文件夹下会有一个名为forge-***.jar的核心，运行\njava -jar forge-***.jar nogui 例如我的是\njava -jar forge-1.16.5-36.2.0 nogui 运行后依旧是 eula 的同意，和 server.properties 的修改，请参照纯净版对应部分。\n最后，依旧是写一个方便运行的脚本 run.sh\n#!/bin/bash cd /your/forge/minecraft/path/ screen -dmS \u0026lt;你的 forge screen 名字\u0026gt; java -Xms*G -Xmx*G -XX:+AggressiveOpts -XX:+UseCompressedOops -jar \u0026lt;forge 核心文件名\u0026gt; nogui echo \u0026#34;minecraft \u0026lt;MC 的版本\u0026gt; server started successfully\u0026#34; 比如我的是\n#!/bin/bash cd /home/HeTong/.minecraft/1.16.5-forge/ screen -dmS forge-1.16.5 java -Xms2G -Xmx2G -XX:+AggressiveOpts -XX:+UseCompressedOops -jar forge-1.16.5-36.2.41.jar nogui echo \u0026#34;minecraft 1.16-forage server started successfully\u0026#34; 和一个停止运行的脚本 stop.sh\n#!/bin/bash screen -dr \u0026lt;你的 forge MC 的 screen 名字\u0026gt; -X stuff \u0026#34;say 服务器将在10S后关闭！\\n\u0026#34; sleep 10 screen -dr \u0026lt;你的 forge MC 的 screen 名字\u0026gt; -X stuff \u0026#34;stop\\n\u0026#34; 取的 screen 名字尽量不要重复\n将不同的mc服务器分配给不同的三级域名 # 现在我的的手上只有一个二级域名，但是我又想将两个 mc 服务器同时启动并分配给我手上的两个三级域名，其实最开始也在网上找了好久没有找到解决方案，后来知道了 SRV 解析，完美的解决了我的疑惑。\n首先在自己的两个 server.properties 中修改 server-port 即端口的值，其中纯净版服务器端口为默认的25565，Forge 服的端口改为25566。\n然后到我的DNS服务商即腾讯 DNS 服务中新添加两条解析，解析类型都为 SRV,主机记录为 _minecraft.tcp.\u0026lt;第三级的名字\u0026gt;其中 \u0026lt;第三级的名字\u0026gt;自己想要实现的三级域名的最前端，比如我想要在 mc.hetong-re4per.com 上运行我的纯净服（端口25565），在 earth.hetong-re4per.com 上运行我的 forge 服（端口26657），就在主记录上填上 _minecraft.tcp.mc，记录值填上 5 0 25565 _mcserver.hetong-re4per.com.，forge 的另起一项分别填上 _minecraft.tcp.earth和 5 0 25567 _mcserver.hetong-re4per.com.。注意，不要直接填服务器 ip，需要填一个提供服务的域名，然后就同下图：\n好了，以上，希望能够帮到萌新，有问题也可以提问，我如果知道的话会尽量帮忙解决。\n","date":"2024 年 7 月 10 日","externalUrl":null,"permalink":"/posts/mcserver-build/","section":"Posts","summary":"","title":"Java MC服务器搭建","type":"posts"},{"content":"","date":"2024 年 7 月 10 日","externalUrl":null,"permalink":"/tags/minecraft/","section":"Tags","summary":"","title":"Minecraft","type":"tags"},{"content":" 前言 # 众所周知，kook 在差不多垄断了国内的语音聊天市场之后就开始搞一些逆天操作了，对于非会员用户几乎可以说是只有一个糊得不能听的语音聊天功能，甚至如果同时使用 B 站的直播姬或者开 OBS 直接没法正常使用。所以我们需要一个可以平替甚至超越 kook 的语音聊天平台\n国外的有 Discord，但是并不支持大陆的网络环境 YY 广告多，后台占用又大 即时聊天软件的语音功能只能说是单纯的通电话，没有降噪和键盘声抑制等功能 当然国内最近又推出了一个新的语音聊天软件。叫 Oopz ，如果你懒得折腾也可以选择使用 Oopz 或者使用结语的方案。\n所以有没有一个可以免费使用、音质好、功能全，甚至你拥有所有的管理权限的语音软件呢，答案当然是有的，就是 Teamspeak（以下简称 ts）\n下载 # 适用 Linux 本教程主要是搭建 Linux 的 ts 服务器，如需 Windows 版本可以参照 bilibili up主 大河李斯特视频工作室 的视频《【看番教程35】无延迟、超稳定、功能强劲，搭建属于你自己的TeamSpeak语音服务器保姆级教程》，但对于一个需要长期运行的服务，我建议使用服务器 Linux 进行搭建 teamspeak3 的官网是 https://teamspeak.com/zh-CN/ ，你可以直接点击进去，找到顶上的「下载」按钮，选择「server」选项卡。\n然后向下找到 Linux，然后下载对应你服务器的版本（一般都是 64-bit），点击右方的像剪切板的按钮来复制下载链接。\n下载好后就可以开始解压了：\n打开你的 ssh 连接你的服务器，使用 curl -O \u0026quot;\u0026lt;你刚刚复制的链接\u0026gt;\u0026quot;来下载 ts 服务器（链接需要加半角双引号） 后使用 tar -xjf \u0026lt;ts 服务器文件名\u0026gt;来解压服务器 解压后 cd到对应文件夹，里面是这个样子的\n启动服务器 # 同意许可：touch .ts3server_license_accepted\n启动服务器：./ts3server_startscript.sh start\n启动后会返回你一个 token，复制下来\n初次启动的输出十分重要，请务必保管好，不要泄露。如果可以还请将 ts 这一次运行输出的全部内容存放在你本地安全的位置 如果你的服务器是使用的云服务器商的 vps 还需要去后台打开 ts 需要的端口，以下是建议打开的端口，所有端口可以在服务器文件中自行修改\n用处 是否必须 端口号 端口协议 默认语音服务器端口 是 9987 UDP ServerQuery raw 端口 否 10011 TCP ServerQuery SSH 端口 否 10022 TCP ServerQuery HTTP 端口 否 10080 TCP ServerQuery HTTPS 端口 否 10443 TCP 文件传输端口 是 30033 TCP TSDNS 否 41144 TCP 连接服务器 # 接下来启动你的 ts 客户端，可以使用 ts3，也可以使用 ts5。因为 ts5 还在 Beta 阶段，这里我使用 ts3 进行演示。如果不知道如何安装 ts3 客户端可以去我的分享站查看并安装。启动 ts3 客户端后如果没有汉化也可以在 VigorousPro/TS3-Translation_zh-CN 里面进行下载。\n启动后左上角会有一个「连接」的菜单按钮，然后点击「连接服务器」，在「服务器别名或地址」里填上你的服务器地址，然后点击连接，就会进入你的服务器\n这时候会弹出一个小窗口，让你输入 token，就将你刚刚开服时的 token 粘贴进去然后点击「OK」，你就会成为服务器的唯一管理员，拥有服务器的全部权限：\n这里建议创建一个备用权限密钥保存在自己的记事本或者网盘中。教程如下：\n点击 ts3 客户端顶部菜单栏的「权限 -\u0026gt; 权限密钥」 点击左下角「创建」按钮 Type：\u0026ldquo;服务器组\u0026rdquo;，Group：\u0026ldquo;Server Admin\u0026rdquo; 点击「创建」按钮，就会有一串 token 出现在 Generated privilege key 一栏中，点击右边的复制按钮，然后将其存放在你觉得安全的地方 创建服务器开机自启动 # 本部分需要使用 root 用户或者 sudo 创建服务文件 /lib/systemd/system/teamspeak.service\n添加如下内容：\n[Unit] Description=Teamspeak, The most superior online voice communication solution. Wants=network-online.target After=syslog.target network.target network-online.target [Service] User=\u0026lt;你搭建时用的用户名\u0026gt; Group=\u0026lt;你搭建时用的用户组\u0026gt; WorkingDirectory=\u0026lt;你的 ts 服务器文件夹位置\u0026gt; ExecStart=\u0026lt;你的 ts 服务器文件夹位置\u0026gt;/ts3server_startscript.sh start ExecStop=\u0026lt;你的 ts 服务器文件夹位置\u0026gt;/ts3server_startscript.sh stop PIDFile=\u0026lt;你的 ts 服务器文件夹位置\u0026gt;/ts3server.pid Type=forking [Install] WantedBy=multi-user.target 重载 systemd:systemctl daemon-reload\n开启自启动:systemctl enable teamspeak.service\n启动 ts 服务器:systemctl start teamspeak.service\n停止 ts 服务器:systemctl stop teamspeak.service\n重启 ts 服务器:systemctl restart teamspeak.service\n总结 # 以上全部就是 teamspeak 服务器的搭建教程了，希望大家能够成功搭建属于自己的语音服务器，不明白的或者不懂的可以评论询问。实在不想动，不理解或者不容易获得公网 IP 之类的话可以上某宝搜搜，直接一站式解决你的问题\n参考 # Vigorous Pro - TeamSpeak 服务器搭建方法\n","date":"2024 年 6 月 6 日","externalUrl":null,"permalink":"/posts/ts3server-build/","section":"Posts","summary":"","title":"如何搭建自己的 ts3 服务器","type":"posts"},{"content":"","date":"2024 年 5 月 21 日","externalUrl":null,"permalink":"/tags/%E5%A4%9A%E8%AE%BE%E5%A4%87%E6%A3%80%E6%B5%8B/","section":"Tags","summary":"","title":"多设备检测","type":"tags"},{"content":"","date":"2024 年 5 月 21 日","externalUrl":null,"permalink":"/tags/%E6%A0%A1%E5%9B%AD%E7%BD%91/","section":"Tags","summary":"","title":"校园网","type":"tags"},{"content":" 起因 # 因为去年校园网升级到了千兆网，当时心动办了校园网。虽然校园网的有线网速度很快，但是限制设备数量为两台。而我的设备比较多，两台肯定不够用，并且校园网就只有有线网的速度可以。于是我了解了一下，决定使用红米 AC2100 路由器然后安装 OpenWRT 来实现校园网认证并共享网络给我的舍友。买路由器之前看了一些讨论，说他们学校有什么多设备检测之类的，但我当时安装路由器后并没有出现被检测到的现象，当时还在暗暗窃喜。\n于是就在前几天喜提多设备检测。当天刚刚起床，舍友就给我说网没法用了，看了一下，说什么检测到分享网络，冻结 30 分钟。我人懵了，用了这么久咋突然被检测到了，后来去贴吧里一看才发现是突然加的，我的专业需要使用一些虚拟机，而且一些安卓模拟器也会被误报，真的十分影响体验。之后和吧里一位兄弟讨论得出大概是用的ttl检测（后来似乎加了其他的检测方式，不排除有很逆天的深度包检测）。于是去搜了一下多设备检测的绕过方法，在这里记录一下。\n博主并非科班出身，只是记录自己解决的方式，并不能保证 100% 成功，也不保准你的路由器按照我的方式不会出现问题甚至损坏。文章中可能会出现错误，还请指正。 大致了解 # 校园的多设备检测方式主要有 TTL 检测和 UA 检测。\n这两种检测方式都是能很快查出来我们的流量是否是一个设备的，服务器只需要解析我们数据的包头就能知道我们的 TTL 值和 UA 了。所以我们要想办法让我们的数据包在到学校服务器的时候 TTL 值和普通的电脑一样（至少看起来一样），还要让我们的UA无法被识别，或者路由器下面所有设备通过路由器后统一成为同一个UA。\nTTL修改 # 存活时间（英语：Time To Live，简写TTL）是电脑网络技术的一个术语，指一个数据包在经过一个路由器时，可传递的最长距离（跃点数）。 每当数据包经过一个路由器时，其存活次数就会被减一。 当其存活次数为0时，路由器便会取消该数据包转发，IP网络的话，会向原数据包的发出者发送一个ICMP TTL数据包以告知跃点数超限。 其设计目的是防止数据包因不正确的路由表等原因造成的无限循环而无法送达及耗尽网络资源。\nTTL 是最简单的多设备检测方式，因为 TTL 每过一个路由值都会 -1，所以只需要抓包然后读出我们的包头里面的 TTL 值是否是一般情况下系统默认的 128 或者 64 就可以判断我们是否共享了网络。但在 OpenWRT 中我们可以简单的通过添加 iptables 或者 nftables 防火墙规则来实现路由器下所有设备 TTL 值的统一。\n我们需要先确定自己路由器防火墙的类型。一般在 OpenWRT 22.01 版本以后（包括）自带防火墙是 nftables ，以前的为 iptables。可以在网页的路由器管理后台 系统-\u0026gt;概览 看到固件版本。\n确认了防火墙类型后，我们就可以开始设置防火墙了。\nnftables 设置防火墙规则 # 如果你是 nftables，那么你需要进入 ssh 来进行防火墙的修改或者使用 iptables-nft工具，可以自动将 iptable指令转换成 nftable指令，直接在 系统-\u0026gt;软件包 然后搜索 iptables-nft然后安装即可。推荐使用 iptables-nft。\n如果你还是想使用 nftables规则的话，以下是如何进入路由器的 ssh 的简单教程。\n由于 OpenWRT 一般都默认只有root用户，所以本文以下所有命令都是默认以 root 执行的 在自己电脑上利用终端（Windows Terminal）或者 cmd 键入以下命令。也可以使用更专业的 ssh 工具。\nssh root@\u0026lt;路由器网关地址\u0026gt; 回车后输入路由器管理员账户的密码（这里在输入时不会显示任何值，这是正常的，输入完成后回车即可）。然后就进入了路由器的ssh界面。\n创建用来修改所有流量包头TTL值的规则 12-mangle-ttl-128（128可以改成64，分别对应 windows 和 Linux/Android 默认的 TTL）\n键入 cd /etc/nftables.d回车，该文件夹是 nftables 存档部分防火墙规则的文件 输入 vi 12-mangle-ttl-128.nft回车，以新建一个 nftables 的规则文件 轻敲键盘上字母 I键进入编辑模式 复制以下代码，再通过按 Shift + Insert（Insert在有的键盘上写的是Ins）来将代码粘贴进去 chain mangle_postrouting_ttl128 { type filter hook postrouting priority 300; policy accept; counter ip ttl set 128 } chain mangle_prerouting_ttl128 { type filter hook prerouting priority 300; policy accept; counter ip ttl set 128 } 完成后先按键盘上的 Esc退出编辑模式，再输入 :wq回车就可以退出并保存文件了。 完成后在命令行使用 service firewall restart来重启防火墙即可。效果如图（图是之前截的，所以设置的值并不是128）。\niptables设置防火墙规则 # 进入 OpenWRT 网页后台管理页的防火墙设置，在 自定义设置 中填入以下内容，然后点击右下角保存并退出即可。\niptables -t mangle -A POSTROUTING -j TTL --ttl-set 128 UA 隐藏 # User-Agent 请求标头是一个特征字符串，使得服务器和对等网络能够识别发出请求的用户代理的应用程序、操作系统、供应商或版本信息。\n学校可以通过多次抓包检测我们的数据包然后查找 UA 是否有同时出现两种不同的设备来判定我们是否有共享网络，所以我们需要消除可以识别设备类型的字段，或者统一所有设备的 UA 都是同一个设备的。\n我这里使用的是 Zxilly 的 UA2F\nZxilly/UA2F Change User-Agent to F-string on OpenWRT router to prevent being detected. C 442 88 先去 Releases 找到对应你路由器架构的 .ipk包，下载后通过 OpenWRT 中的 系统-\u0026gt;软件包 中的 上传软件包，然后点击安装。路由器的架构依旧可以在网页的路由器管理后台 系统-\u0026gt;概览 看到 cpu 架构。当然你还是不知道你的路由器是什么架构的话可以去 系统-\u0026gt;软件包 ，找到 配置opkg\u0026hellip; 按钮，点击后在 /etc/opkg/distfeeds.conf项中的镜像源地址会有 packages/的字样，后跟的就是的路由器 cpu 架构，比如我的就是 mipsel_24kc。\nsrc/gz openwrt_core https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/targets/ramips/mt7621/packages src/gz openwrt_base https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/packages/mipsel_24kc/base src/gz openwrt_luci https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/packages/mipsel_24kc/luci src/gz openwrt_packages https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/packages/mipsel_24kc/packages src/gz openwrt_routing https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/packages/mipsel_24kc/routing src/gz openwrt_telephony https://mirrors.ustc.edu.cn/openwrt/releases/23.05.3/packages/mipsel_24kc/telephony 下载并安装后需要进行一些设置，请参考 UA2F 的 uci command 部分进行设置。\n然后就是需要关掉软件分流和全锥型NAT，有 TurboACC的话也请尽量不要使用，不然 rkp-ipid和 ua2f可能会失效。\n最终效果如图。\n最终 # 网络开发出来就是让我们来使用的，学校总是会以一些很让人不可理喻的理由来限制我们上网，这次加了检测的理由是去年有人使用学校的 IP 被诈骗了（说实话我猜不到是怎么用 IP 被骗了的），然后就来限制我们的网络自由。就算是限制成4台设备我可能都不会为了这个东西搞这么久。希望校园网越来越好吧。\n参考 # 知乎 鶴唳 的文章《适用于 Nftables 的 TTL 修改》 博客园 夜读春秋 的文章《iptables对报文中TTL的操作》 Zero\u0026rsquo;s Record博客站 zero 的文章《校园网多设备检测绕过》 ","date":"2024 年 5 月 21 日","externalUrl":null,"permalink":"/posts/multi-device-detection/","section":"Posts","summary":"","title":"校园网防止多设备检测指北","type":"posts"},{"content":" ","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/go/","section":"","summary":"","title":"Redirect","type":"sample"},{"content":" 版权信息 # 本网站使用 Hugo + Blowfish 搭建，托管于 Github Page，使用 又拍云 CDN。\n文章内容由褐瞳さん撰写，Copyright 2024 - 2025 褐瞳さん All Rights Reserved.\n免责声明 # 本站对网站上所显示的信息或资料的准确性、内容、完整性、合法性、可靠性、可操作性或可用性不承担任何责任。 本站中的任何信息或材料的删除、存储失败、错误提供或未及时提供不承担任何责任。 本站其许可方不对通过本站服务得到的或在其上刊登广告所推介的产品或服务、通过由本站提供的任何链接而得到的产品或服务，以及通过在本站中所提供的任何链接而得到的任何信息或建议做任何担保。对因通过服务下载或访问网上的任何信息或材料而导致的任何伤害不承担任何责任。 本站服务包含的下载资源信息内的所有内容并不反映亦不代表任何本站之意见。 本站作为程序共享网络服务提供者，对非法转载，盗版行为的发生不具备充分的监控能力。但是当版权拥有者提出侵权指控并出示充分的版权证明材料时，本站负有移除盗版和非法转载作品以及停止继续传播的义务。 除另有明确说明或者中国法律有强制性规定外，本网站原创的程序，本网站及作者共同享有版权，其他网站及传统媒体如需使用，须取得本网站的授权，未经授权严禁转载或用于其它商业用途。 由于与本网站链接的其它网站所造成之个人资料泄露及由此而导致的任何法律争议和后果，本网站均得免责。 禁止运用安全技术对网络或计算机造成恶意非法操作甚至破坏，发生一切后果与本站无关，操作者自行承担责任；本站部分资源来源于网络或网友投稿，本站不保证所有资源的安全性，出于安全考虑，请在虚拟机下运行学习。 当政府司法机关依照法定程序要求本网站披露个人资料时，本人将根据执法单位之要求或为公共安全之目的提供个人资料。在此情况下之任何披露，本网站均得免责。 本网站如因系统维护或升级而需暂停服务时，将事先公告。若因线路、平台及非本人控制范围外的硬件故障或其它不可抗力而导致暂停服务，于暂停服务期间造成的一切不便与损失，本网站不负任何责任。 任何由于黑客攻击、计算机病毒侵入或发作、因政府管制而造成的暂时性关闭等影响网络正常运行的不可抗力而造成的个人资料泄露、丢失、被盗用或被窜改等，本网站均得免责。 本站使用者因为违反本声明的规定而触犯中华人民共和国法律的，一切后果自己负责，本网站不承担任何责任。 凡以任何方式登陆本网站或直接、间接使用本网站资料者，视为自愿接受本网站声明的约束。 本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。 使用条款 # 本站提供的资源仅供您个人用于非商业性目的。您不得使用本站提供的资源来销售产品或资源。\n您不得将本站的资源索引，将其重新排版后挪作他用，如果您想将本站服务用于商业目的，必须事先与本站签定协议，有关详细信息，请与我联系。\n使用本站提供工具必须遵守以下规定：\n《互联网信息服务管理办法》\n《中华人民共和国电信条例》\n《互联网电子公告服务管理规定》\n《互联网站从事登载新闻业务管理暂行规定》\n《计算机信息网络国际联网安全保护管理办法》\n《中华人民共和国计算机信息系统安全保护条例》\n《中华人民共和国计算机信息网络国际联网管理暂行规定》\n《全国人民代表大会常务委员会关于维护互联网安全的决定》\n转载协议 # 本站的全部文字在未明确声明的情况下默认使用知识共享 署名-非商业性使用-相同方式共享 4.0（CC BY-NC-SA 4.0） 条款下提供，附加条款亦可能应用。\n版权投诉 # 本站尊重知识产权，如果版权拥有者发现自己作品被侵权，请及时向本站提出权利通知，将身份证明、权属证明、具体链接（URL）及详细侵权情况证明发往zhang_zlf@outlook.com。在收到上述法律文件后，在5个工作日内移除相关涉嫌侵权的内容。\n关于本站使用的插图和背景 # 主要源于 Pixiv插画站 ，部分可能来自 X （原“Twitter”）。原图请善用F12和搜图工具。可以在我的 Pixiv 收藏中找到部分。\n","externalUrl":null,"permalink":"/copyright/","section":"","summary":"","title":"版权声明","type":"page"},{"content":" 👋 Hi there # 👩‍💻 关于我 # 我是 HeTongRe4per，就读于长沙的大四学生，对编程和一些新鲜技术非常好奇。目前，我正在磨练自己在 Java、C#、Python 和 C++ 方面的技能，并对后端运维有着很大兴趣。我有长期使用 Linux、配置 Nginx 和 Docker 等的经验，我一直在寻找新的挑战和学习成长的机会。这是我的博客站，我在这里分享我的学习笔记和项目经验。\n📝 简介 # 🔭 我目前正在使用 Java、C#、Python 和 C++ 进行各种项目。 🌱 我目前正在学习软件开发和后端运维。 👯 我希望能在在开源项目和编程中有所合作。 🤔 我希望在掌握软件开发高级概念方面得到帮助。 💬 可以向我咨询任何与我的项目相关的问题或兴趣相关的问题。 ⚡ 有趣的事实：我喜欢玩游戏和听音乐，还喜欢探索新的技术和框架。 🛠️ 语言和工具 # \u0026nbsp;\u0026nbsp;Java \u0026nbsp;\u0026nbsp;C# \u0026nbsp;\u0026nbsp;python \u0026nbsp;\u0026nbsp;C++ 📫 联系方式 # 你可以通过以下方式找到我：\n💻 关于本站 # 本站最初创建于2024年5月21日，后由于之前服务器过期在8月6日转移到 Github Page 上，使用 Cloudflare CDN。主要用于记录自己平时的一些笔记和经验分享，有的时候可能也会说一些胡话或者闲谈。我的文笔不好，有的时候还会有错别字，文章有错误、有什么好的建议见解或者疑问的话十分欢迎通过邮箱或者其他方式告诉我。感谢🙏\n🧰 部分实现 # 评论：\n评论使用的是 Waline，自定义了部分规则，例如违禁词和 Cloudflare Turnstile 人机验证，后台消息提醒方式是使用的微信平台的 Server 酱（毕竟我这小站没那多评论）。\n访问计数和阅读量：\n阅读量计数是使用的不蒜子，非常好用，真的是开箱即用的阅读量计数了。而阅读量因为国内访问 Blowfish 的默认阅读量计数后台 Firebase 比较困难，而不蒜子刚好有文章阅读计数，于是修改了 Blowfish 的计数方案为不蒜子。\n部分图标和部分自定义文字：\n部分汉字使用了悠哉字体，真的非常好看，很喜欢。另外是部分图标和英文字母使用的是 ComicShannsMono Nerd Font，也是我非常喜欢的字体，我的终端和许多 IDE 都是使用的这个字体，图标很全。另外我自己制作了一部分图标字体，占用的 Unicode 区域为Private Use Area中的U+E108到U+E115。\n托管平台：\n网站本身托管在 Github Page 上。一般是在我本地编辑，然后推送到 Github 的一个 Private 仓库，这个 Private 仓库会使用 hugo 生成静态网页再推送到 Public 仓库 HeTongRe4per.github.io 中，Github 就会将这些静态网页投放到公网上。\nCDN 和域名解析的 DNS：\n域名是托管在 Cloudflare 上面的，但是这个博客的域名www.hetong-re4per.com其实是 Cloudflare 进行 NS 以子域名的形式然后托管在 DNSPod 进行双线解析的，国内解析到我使用的 CDN 平台又拍云上的，而国外直接使用的是 Github 自带的 CDN。\n📊 网站状态 # 本站已托管 Github Page 运行：加载中\u0026hellip;\n\u0026nbsp;\rMon\r\u0026nbsp; Wed\r\u0026nbsp;\rFri\r\u0026nbsp;\rSun\rLess\rMore\r🏆 里程碑 # 主站从根域名改为www 2024-11-27 由于直接使用根域名作为主站在又拍云上会出现部分解析问题，于是将主站从根域名hetong-re4per.com更改为www.hetong-re4per.com 使用又拍云作为国内CDN 2024-11-15 介于国内使用 Cloudflare + GitHub Page 访问速度比较慢于是加入了又拍云联盟，并使用又拍云 CDN 提供国内 CDN Google 搜索 250 点击量 2024-10-29 24 年 10 月 29 日，本站在 Google 获得了 250 点击量🥳🥳🥳感谢大家！ 使用 GitHub Action 自动生成静态页 2024-10-5 24 年 10 月 5 日，使用 GitHub Action （几乎）全自动化生成静态网页并推送到公开仓库。 使用 Github Action + Hugo 实现推送仓库自动生成静态文件并推送到 Page 仓库\r2024 年 10 月 6 日\u0026middot;2927 字\u0026middot;6 分钟\r技术教程 Github Page Github OpenWrt 本站添加到 Bing 和 Google 搜索 2024-10-3 24 年 10 月 3 日，将本站投放到了 Bing 和 Google 搜索上。 转移到 GitHub 2024-8-6 24 年 8 月 6 日，由于服务器过期，所以决定直接将博客转移到 GitHub Page 上，经过一番寻找和比较，决定使用 Hugo + Blowfish 作为框架。 如何使用 Github Page 搭建自己的博客\r2024 年 8 月 9 日\u0026middot;4630 字\u0026middot;10 分钟\r技术教程 Github Page Hugo 初次露面 2024-5-21 24 年 5 月 21 日，在阿里云服务器上搭建了这个网站，最初使用 vanblog 搭建。（虽然一共就写了三篇） Mereithhh/vanblog 一款简洁实用优雅的个人博客系统 TypeScript 3182 435 ","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"关于","type":"page"},{"content":"可以✉邮我交换友链，贴上网站链接，头像和 Bio 就行\n我的友链信息：\nTitle：瞳のBlog URL：https://hetong-re4per.com Avatar：https://gravatar.com/avatar/483e3b3470d53aa874a893395140b05f Logo：https://hetong-re4per.com/img/site_logo.png Favicon：http://hetong-re4per.com/favicon.ico Bio：驕る鳥は墜ち 頭垂れて乞い\n🎈 欢迎交换友链 # 樱木の碎碎念\rStraight ahead of him, noboady can go very far.\r","externalUrl":null,"permalink":"/friends/","section":"","summary":"","title":"友链","type":"page"}]